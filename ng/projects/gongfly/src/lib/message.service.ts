// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { MessageDB } from './message-db';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class MessageService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  MessageServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private messagesUrl: string

  constructor(
    private http: HttpClient,
    private location: Location,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.messagesUrl = origin + '/api/github.com/fullstack-lang/gongfly/go/v1/messages';
  }

  /** GET messages from the server */
  getMessages(GONG__StackPath: string = ""): Observable<MessageDB[]> {

	let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<MessageDB[]>(this.messagesUrl, { params: params })
      .pipe(
        tap(_ => this.log('fetched messages')),
        catchError(this.handleError<MessageDB[]>('getMessages', []))
      );
  }

  /** GET message by id. Will 404 if id not found */
  getMessage(id: number): Observable<MessageDB> {
    const url = `${this.messagesUrl}/${id}`;
    return this.http.get<MessageDB>(url).pipe(
      tap(_ => this.log(`fetched message id=${id}`)),
      catchError(this.handleError<MessageDB>(`getMessage id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new message to the server */
  postMessage(messagedb: MessageDB): Observable<MessageDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)

    return this.http.post<MessageDB>(this.messagesUrl, messagedb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        this.log(`posted messagedb id=${messagedb.ID}`)
      }),
      catchError(this.handleError<MessageDB>('postMessage'))
    );
  }

  /** DELETE: delete the messagedb from the server */
  deleteMessage(messagedb: MessageDB | number): Observable<MessageDB> {
    const id = typeof messagedb === 'number' ? messagedb : messagedb.ID;
    const url = `${this.messagesUrl}/${id}`;

    return this.http.delete<MessageDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted messagedb id=${id}`)),
      catchError(this.handleError<MessageDB>('deleteMessage'))
    );
  }

  /** PUT: update the messagedb on the server */
  updateMessage(messagedb: MessageDB): Observable<MessageDB> {
    const id = typeof messagedb === 'number' ? messagedb : messagedb.ID;
    const url = `${this.messagesUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)

    return this.http.put<MessageDB>(url, messagedb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        this.log(`updated messagedb id=${messagedb.ID}`)
      }),
      catchError(this.handleError<MessageDB>('updateMessage'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
