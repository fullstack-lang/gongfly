// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional, Input } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData, FrontRepoService, FrontRepo, SelectionMode } from '../front-repo.service'
import { NullInt64 } from '../null-int64'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { ActivatedRoute, Router, RouterState } from '@angular/router';
import { MessageDB } from '../message-db'
import { MessageService } from '../message.service'

// insertion point for additional imports

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-messagestable',
  templateUrl: './messages-table.component.html',
  styleUrls: ['./messages-table.component.css'],
})
export class MessagesTableComponent implements OnInit {

  @Input() GONG__StackPath: string = ""

  // mode at invocation
  mode: TableComponentMode = TableComponentMode.DISPLAY_MODE

  // used if the component is called as a selection component of Message instances
  selection: SelectionModel<MessageDB> = new (SelectionModel)
  initialSelection = new Array<MessageDB>()

  // the data source for the table
  messages: MessageDB[] = []
  matTableDataSource: MatTableDataSource<MessageDB> = new (MatTableDataSource)

  // front repo, that will be referenced by this.messages
  frontRepo: FrontRepo = new (FrontRepo)

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort)
  sort: MatSort | undefined
  @ViewChild(MatPaginator)
  paginator: MatPaginator | undefined;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (messageDB: MessageDB, property: string) => {
      switch (property) {
        case 'ID':
          return messageDB.ID

        // insertion point for specific sorting accessor
        case 'Lat':
          return messageDB.Lat;

        case 'Lng':
          return messageDB.Lng;

        case 'Heading':
          return messageDB.Heading;

        case 'Level':
          return messageDB.Level;

        case 'Speed':
          return messageDB.Speed;

        case 'State':
          return messageDB.State;

        case 'Name':
          return messageDB.Name;

        case 'TargetLocationLat':
          return messageDB.TargetLocationLat;

        case 'TargetLocationLng':
          return messageDB.TargetLocationLng;

        case 'DistanceToTarget':
          return messageDB.DistanceToTarget;

        case 'Timestampstring':
          return messageDB.Timestampstring;

        case 'DurationSinceSimulationStart':
          return messageDB.DurationSinceSimulationStart;

        case 'Timestampstartstring':
          return messageDB.Timestampstartstring;

        case 'Source':
          return messageDB.Source;

        case 'Destination':
          return messageDB.Destination;

        case 'Content':
          return messageDB.Content;

        case 'About_string':
          return messageDB.About_string;

        case 'Display':
          return messageDB.Display ? "true" : "false";

        default:
          console.assert(false, "Unknown field")
          return "";
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (messageDB: MessageDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the messageDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += messageDB.Lat.toString()
      mergedContent += messageDB.Lng.toString()
      mergedContent += messageDB.Heading.toString()
      mergedContent += messageDB.Level.toString()
      mergedContent += messageDB.Speed.toString()
      mergedContent += messageDB.State.toLowerCase()
      mergedContent += messageDB.Name.toLowerCase()
      mergedContent += messageDB.TargetLocationLat.toString()
      mergedContent += messageDB.TargetLocationLng.toString()
      mergedContent += messageDB.DistanceToTarget.toString()
      mergedContent += messageDB.Timestampstring.toLowerCase()
      mergedContent += messageDB.Timestampstartstring.toLowerCase()
      mergedContent += messageDB.Source.toLowerCase()
      mergedContent += messageDB.Destination.toLowerCase()
      mergedContent += messageDB.Content.toLowerCase()
      mergedContent += messageDB.About_string.toLowerCase()

      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort!
    this.matTableDataSource.paginator = this.paginator!
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private messageService: MessageService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of message instances
    public dialogRef: MatDialogRef<MessagesTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
    private activatedRoute: ActivatedRoute,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      this.GONG__StackPath = dialogData.GONG__StackPath
      switch (dialogData.SelectionMode) {
        case SelectionMode.ONE_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
          break
        case SelectionMode.MANY_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.MANY_MANY_ASSOCIATION_MODE
          break
        default:
      }
    }

    // observable for changes in structs
    this.messageService.MessageServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getMessages()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
      this.displayedColumns = ['ID', 'Delete', // insertion point for columns to display
        "Lat",
        "Lng",
        "Heading",
        "Level",
        "Speed",
        "State",
        "Name",
        "TargetLocationLat",
        "TargetLocationLng",
        "DistanceToTarget",
        "Timestampstring",
        "DurationSinceSimulationStart",
        "Timestampstartstring",
        "Source",
        "Destination",
        "Content",
        "About_string",
        "Display",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Lat",
        "Lng",
        "Heading",
        "Level",
        "Speed",
        "State",
        "Name",
        "TargetLocationLat",
        "TargetLocationLng",
        "DistanceToTarget",
        "Timestampstring",
        "DurationSinceSimulationStart",
        "Timestampstartstring",
        "Source",
        "Destination",
        "Content",
        "About_string",
        "Display",
      ]
      this.selection = new SelectionModel<MessageDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    let stackPath = this.activatedRoute.snapshot.paramMap.get('GONG__StackPath')
    if ( stackPath != undefined) {
      this.GONG__StackPath = stackPath
    }

    this.getMessages()

    this.matTableDataSource = new MatTableDataSource(this.messages)
  }

  getMessages(): void {
    this.frontRepoService.pull(this.GONG__StackPath).subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.messages = this.frontRepo.Messages_array;

        // insertion point for time duration Recoveries
        // compute strings for durations
        for (let message of this.messages) {
          message.DurationSinceSimulationStart_string =
            Math.floor(message.DurationSinceSimulationStart / (3600 * 1000 * 1000 * 1000)) + "H " +
            Math.floor(message.DurationSinceSimulationStart % (3600 * 1000 * 1000 * 1000) / (60 * 1000 * 1000 * 1000)) + "M " +
            message.DurationSinceSimulationStart % (60 * 1000 * 1000 * 1000) / (1000 * 1000 * 1000) + "S"
        }
        // insertion point for enum int Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
          for (let message of this.messages) {
            let ID = this.dialogData.ID
            let revPointer = message[this.dialogData.ReversePointer as keyof MessageDB] as unknown as NullInt64
            if (revPointer.Int64 == ID) {
              this.initialSelection.push(message)
            }
            this.selection = new SelectionModel<MessageDB>(allowMultiSelect, this.initialSelection);
          }
        }

        if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

          let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s" as keyof FrontRepo] as Map<number, MessageDB>
          let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)!

          let sourceField = sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance]! as unknown as MessageDB[]
          for (let associationInstance of sourceField) {
            let message = associationInstance[this.dialogData.IntermediateStructField as keyof typeof associationInstance] as unknown as MessageDB
            this.initialSelection.push(message)
          }

          this.selection = new SelectionModel<MessageDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.messages
      }
    )
  }

  // newMessage initiate a new message
  // create a new Message objet
  newMessage() {
  }

  deleteMessage(messageID: number, message: MessageDB) {
    // list of messages is truncated of message before the delete
    this.messages = this.messages.filter(h => h !== message);

    this.messageService.deleteMessage(messageID).subscribe(
      message => {
        this.messageService.MessageServiceChanged.next("delete")
      }
    );
  }

  editMessage(messageID: number, message: MessageDB) {

  }

  // display message in router
  displayMessageInRouter(messageID: number) {
    this.router.navigate(["github_com_fullstack_lang_gongfly_go-" + "message-display", messageID])
  }

  // set editor outlet
  setEditorRouterOutlet(messageID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongfly_go_editor: ["github_com_fullstack_lang_gongfly_go-" + "message-detail", messageID, this.GONG__StackPath]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.messages.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.messages.forEach(row => this.selection.select(row));
  }

  save() {

    if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {

      let toUpdate = new Set<MessageDB>()

      // reset all initial selection of message that belong to message
      for (let message of this.initialSelection) {
        let index = message[this.dialogData.ReversePointer as keyof MessageDB] as unknown as NullInt64
        index.Int64 = 0
        index.Valid = true
        toUpdate.add(message)

      }

      // from selection, set message that belong to message
      for (let message of this.selection.selected) {
        let ID = this.dialogData.ID as number
        let reversePointer = message[this.dialogData.ReversePointer as keyof MessageDB] as unknown as NullInt64
        reversePointer.Int64 = ID
        reversePointer.Valid = true
        toUpdate.add(message)
      }


      // update all message (only update selection & initial selection)
      for (let message of toUpdate) {
        this.messageService.updateMessage(message)
          .subscribe(message => {
            this.messageService.MessageServiceChanged.next("update")
          });
      }
    }

    if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

      // get the source instance via the map of instances in the front repo
      let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s" as keyof FrontRepo] as Map<number, MessageDB>
      let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)!

      // First, parse all instance of the association struct and remove the instance
      // that have unselect
      let unselectedMessage = new Set<number>()
      for (let message of this.initialSelection) {
        if (this.selection.selected.includes(message)) {
          // console.log("message " + message.Name + " is still selected")
        } else {
          console.log("message " + message.Name + " has been unselected")
          unselectedMessage.add(message.ID)
          console.log("is unselected " + unselectedMessage.has(message.ID))
        }
      }

      // delete the association instance
      let associationInstance = sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance]
      let message = associationInstance![this.dialogData.IntermediateStructField as keyof typeof associationInstance] as unknown as MessageDB
      if (unselectedMessage.has(message.ID)) {
        this.frontRepoService.deleteService(this.dialogData.IntermediateStruct, associationInstance)


      }

      // is the source array is empty create it
      if (sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance] == undefined) {
        (sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance] as unknown as Array<MessageDB>) = new Array<MessageDB>()
      }

      // second, parse all instance of the selected
      if (sourceInstance[this.dialogData.SourceField as keyof typeof sourceInstance]) {
        this.selection.selected.forEach(
          message => {
            if (!this.initialSelection.includes(message)) {
              // console.log("message " + message.Name + " has been added to the selection")

              let associationInstance = {
                Name: sourceInstance["Name"] + "-" + message.Name,
              }

              let index = associationInstance[this.dialogData.IntermediateStructField + "ID" as keyof typeof associationInstance] as unknown as NullInt64
              index.Int64 = message.ID
              index.Valid = true

              let indexDB = associationInstance[this.dialogData.IntermediateStructField + "DBID" as keyof typeof associationInstance] as unknown as NullInt64
              indexDB.Int64 = message.ID
              index.Valid = true

              this.frontRepoService.postService(this.dialogData.IntermediateStruct, associationInstance)

            } else {
              // console.log("message " + message.Name + " is still selected")
            }
          }
        )
      }

      // this.selection = new SelectionModel<MessageDB>(allowMultiSelect, this.initialSelection);
    }

    // why pizza ?
    this.dialogRef.close('Pizza!');
  }
}
