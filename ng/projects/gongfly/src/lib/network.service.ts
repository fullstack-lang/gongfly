// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { NetworkDB } from './network-db';

@Injectable({
  providedIn: 'root'
})
export class NetworkService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  NetworkServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private networksUrl: string

  constructor(
    private http: HttpClient,
    private location: Location,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
	let origin = this.document.location.origin
    
	// if debugging with ng, replace 4200 with 8080
	origin = origin.replace("4200", "8080")

    // compute path to the service
    this.networksUrl = origin + '/api/github.com/fullstack-lang/gongfly/go/v1/networks';
   }

  /** GET networks from the server */
  getNetworks(): Observable<NetworkDB[]> {
    return this.http.get<NetworkDB[]>(this.networksUrl)
      .pipe(
        tap(_ => this.log('fetched networks')),
        catchError(this.handleError<NetworkDB[]>('getNetworks', []))
      );
  }

  /** GET network by id. Will 404 if id not found */
  getNetwork(id: number): Observable<NetworkDB> {
    const url = `${this.networksUrl}/${id}`;
    return this.http.get<NetworkDB>(url).pipe(
      tap(_ => this.log(`fetched network id=${id}`)),
      catchError(this.handleError<NetworkDB>(`getNetwork id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new network to the server */
  postNetwork(networkdb: NetworkDB): Observable<NetworkDB> {

		// insertion point for reset of pointers and reverse pointers (to avoid circular JSON)

		return this.http.post<NetworkDB>(this.networksUrl, networkdb, this.httpOptions).pipe(
			tap(_ => {
				// insertion point for restoration of reverse pointers
				this.log(`posted networkdb id=${networkdb.ID}`)
			}),
			catchError(this.handleError<NetworkDB>('postNetwork'))
		);
  }

  /** DELETE: delete the networkdb from the server */
  deleteNetwork(networkdb: NetworkDB | number): Observable<NetworkDB> {
    const id = typeof networkdb === 'number' ? networkdb : networkdb.ID;
    const url = `${this.networksUrl}/${id}`;

    return this.http.delete<NetworkDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted networkdb id=${id}`)),
      catchError(this.handleError<NetworkDB>('deleteNetwork'))
    );
  }

  /** PUT: update the networkdb on the server */
  updateNetwork(networkdb: NetworkDB): Observable<NetworkDB> {
    const id = typeof networkdb === 'number' ? networkdb : networkdb.ID;
    const url = `${this.networksUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)

    return this.http.put(url, networkdb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        this.log(`updated networkdb id=${networkdb.ID}`)
      }),
      catchError(this.handleError<NetworkDB>('updateNetwork'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
