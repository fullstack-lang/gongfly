// generated by gong
import { Component, OnInit, Inject, Optional } from '@angular/core';
import { TypeofExpr } from '@angular/compiler';
import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

import { Router, RouterState } from '@angular/router';
import { OpsLineDB } from '../opsline-db'
import { OpsLineService } from '../opsline.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'
import { NullInt64 } from '../null-int64'

@Component({
  selector: 'lib-opsline-sorting',
  templateUrl: './opsline-sorting.component.html',
  styleUrls: ['./opsline-sorting.component.css']
})
export class OpsLineSortingComponent implements OnInit {

  frontRepo: FrontRepo = new (FrontRepo)

  // array of OpsLine instances that are in the association
  associatedOpsLines = new Array<OpsLineDB>();

  constructor(
    private opslineService: OpsLineService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of opsline instances
    public dialogRef: MatDialogRef<OpsLineSortingComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    this.router.routeReuseStrategy.shouldReuseRoute = function () {
      return false;
    };
  }

  ngOnInit(): void {
    this.getOpsLines()
  }

  getOpsLines(): void {
    this.frontRepoService.pull(this.dialogData.GONG__StackPath).subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        let index = 0
        for (let opsline of this.frontRepo.OpsLines_array) {
          let ID = this.dialogData.ID
          let revPointerID = opsline[this.dialogData.ReversePointer as keyof OpsLineDB] as unknown as NullInt64
          let revPointerID_Index = opsline[this.dialogData.ReversePointer + "_Index" as keyof OpsLineDB] as unknown as NullInt64
          if (revPointerID.Int64 == ID) {
            if (revPointerID_Index == undefined) {
              revPointerID_Index = new NullInt64
              revPointerID_Index.Valid = true
              revPointerID_Index.Int64 = index++
            }
            this.associatedOpsLines.push(opsline)
          }
        }

        // sort associated opsline according to order
        this.associatedOpsLines.sort((t1, t2) => {
          let t1_revPointerID_Index = t1[this.dialogData.ReversePointer + "_Index" as keyof typeof t1] as unknown as NullInt64
          let t2_revPointerID_Index = t2[this.dialogData.ReversePointer + "_Index" as keyof typeof t2] as unknown as NullInt64
          if (t1_revPointerID_Index && t2_revPointerID_Index) {
            if (t1_revPointerID_Index.Int64 > t2_revPointerID_Index.Int64) {
              return 1;
            }
            if (t1_revPointerID_Index.Int64 < t2_revPointerID_Index.Int64) {
              return -1;
            }
          }
          return 0;
        });
      }
    )
  }

  drop(event: CdkDragDrop<string[]>) {
    moveItemInArray(this.associatedOpsLines, event.previousIndex, event.currentIndex);

    // set the order of OpsLine instances
    let index = 0

    for (let opsline of this.associatedOpsLines) {
      let revPointerID_Index = opsline[this.dialogData.ReversePointer + "_Index" as keyof OpsLineDB] as unknown as NullInt64
      revPointerID_Index.Valid = true
      revPointerID_Index.Int64 = index++
    }
  }

  save() {

    this.associatedOpsLines.forEach(
      opsline => {
        this.opslineService.updateOpsLine(opsline, this.dialogData.GONG__StackPath)
          .subscribe(opsline => {
            this.opslineService.OpsLineServiceChanged.next("update")
          });
      }
    )

    this.dialogRef.close('Sorting of ' + this.dialogData.ReversePointer + ' done');
  }
}
