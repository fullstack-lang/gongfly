// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongfly/go/models"
	"github.com/fullstack-lang/gongfly/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Satellite__dummysDeclaration__ models.Satellite
var __Satellite_time__dummyDeclaration time.Duration

// An SatelliteID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getSatellite updateSatellite deleteSatellite
type SatelliteID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// SatelliteInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postSatellite updateSatellite
type SatelliteInput struct {
	// The Satellite to submit or modify
	// in: body
	Satellite *orm.SatelliteAPI
}

// GetSatellites
//
// swagger:route GET /satellites satellites getSatellites
//
// Get all satellites
//
// Responses:
//    default: genericError
//        200: satelliteDBsResponse
func GetSatellites(c *gin.Context) {
	db := orm.BackRepo.BackRepoSatellite.GetDB()

	// source slice
	var satelliteDBs []orm.SatelliteDB
	query := db.Find(&satelliteDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	satelliteAPIs := make([]orm.SatelliteAPI, 0)

	// for each satellite, update fields from the database nullable fields
	for idx := range satelliteDBs {
		satelliteDB := &satelliteDBs[idx]
		_ = satelliteDB
		var satelliteAPI orm.SatelliteAPI

		// insertion point for updating fields
		satelliteAPI.ID = satelliteDB.ID
		satelliteDB.CopyBasicFieldsToSatellite(&satelliteAPI.Satellite)
		satelliteAPI.SatellitePointersEnconding = satelliteDB.SatellitePointersEnconding
		satelliteAPIs = append(satelliteAPIs, satelliteAPI)
	}

	c.JSON(http.StatusOK, satelliteAPIs)
}

// PostSatellite
//
// swagger:route POST /satellites satellites postSatellite
//
// Creates a satellite
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: satelliteDBResponse
func PostSatellite(c *gin.Context) {
	db := orm.BackRepo.BackRepoSatellite.GetDB()

	// Validate input
	var input orm.SatelliteAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create satellite
	satelliteDB := orm.SatelliteDB{}
	satelliteDB.SatellitePointersEnconding = input.SatellitePointersEnconding
	satelliteDB.CopyBasicFieldsFromSatellite(&input.Satellite)

	query := db.Create(&satelliteDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, satelliteDB)
}

// GetSatellite
//
// swagger:route GET /satellites/{ID} satellites getSatellite
//
// Gets the details for a satellite.
//
// Responses:
//    default: genericError
//        200: satelliteDBResponse
func GetSatellite(c *gin.Context) {
	db := orm.BackRepo.BackRepoSatellite.GetDB()

	// Get satelliteDB in DB
	var satelliteDB orm.SatelliteDB
	if err := db.First(&satelliteDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var satelliteAPI orm.SatelliteAPI
	satelliteAPI.ID = satelliteDB.ID
	satelliteAPI.SatellitePointersEnconding = satelliteDB.SatellitePointersEnconding
	satelliteDB.CopyBasicFieldsToSatellite(&satelliteAPI.Satellite)

	c.JSON(http.StatusOK, satelliteAPI)
}

// UpdateSatellite
//
// swagger:route PATCH /satellites/{ID} satellites updateSatellite
//
// Update a satellite
//
// Responses:
//    default: genericError
//        200: satelliteDBResponse
func UpdateSatellite(c *gin.Context) {
	db := orm.BackRepo.BackRepoSatellite.GetDB()

	// Get model if exist
	var satelliteDB orm.SatelliteDB

	// fetch the satellite
	query := db.First(&satelliteDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.SatelliteAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	satelliteDB.CopyBasicFieldsFromSatellite(&input.Satellite)
	satelliteDB.SatellitePointersEnconding = input.SatellitePointersEnconding

	query = db.Model(&satelliteDB).Updates(satelliteDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the satelliteDB
	c.JSON(http.StatusOK, satelliteDB)
}

// DeleteSatellite
//
// swagger:route DELETE /satellites/{ID} satellites deleteSatellite
//
// Delete a satellite
//
// Responses:
//    default: genericError
func DeleteSatellite(c *gin.Context) {
	db := orm.BackRepo.BackRepoSatellite.GetDB()

	// Get model if exist
	var satelliteDB orm.SatelliteDB
	if err := db.First(&satelliteDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&satelliteDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
