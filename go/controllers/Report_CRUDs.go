// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongfly/go/models"
	"github.com/fullstack-lang/gongfly/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Report__dummysDeclaration__ models.Report
var __Report_time__dummyDeclaration time.Duration

// An ReportID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getReport updateReport deleteReport
type ReportID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ReportInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postReport updateReport
type ReportInput struct {
	// The Report to submit or modify
	// in: body
	Report *orm.ReportAPI
}

// GetReports
//
// swagger:route GET /reports reports getReports
//
// Get all reports
//
// Responses:
//    default: genericError
//        200: reportDBsResponse
func GetReports(c *gin.Context) {
	db := orm.BackRepo.BackRepoReport.GetDB()

	// source slice
	var reportDBs []orm.ReportDB
	query := db.Find(&reportDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	reportAPIs := make([]orm.ReportAPI, 0)

	// for each report, update fields from the database nullable fields
	for idx := range reportDBs {
		reportDB := &reportDBs[idx]
		_ = reportDB
		var reportAPI orm.ReportAPI

		// insertion point for updating fields
		reportAPI.ID = reportDB.ID
		reportDB.CopyBasicFieldsToReport(&reportAPI.Report)
		reportAPI.ReportPointersEnconding = reportDB.ReportPointersEnconding
		reportAPIs = append(reportAPIs, reportAPI)
	}

	c.JSON(http.StatusOK, reportAPIs)
}

// PostReport
//
// swagger:route POST /reports reports postReport
//
// Creates a report
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: reportDBResponse
func PostReport(c *gin.Context) {
	db := orm.BackRepo.BackRepoReport.GetDB()

	// Validate input
	var input orm.ReportAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create report
	reportDB := orm.ReportDB{}
	reportDB.ReportPointersEnconding = input.ReportPointersEnconding
	reportDB.CopyBasicFieldsFromReport(&input.Report)

	query := db.Create(&reportDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, reportDB)
}

// GetReport
//
// swagger:route GET /reports/{ID} reports getReport
//
// Gets the details for a report.
//
// Responses:
//    default: genericError
//        200: reportDBResponse
func GetReport(c *gin.Context) {
	db := orm.BackRepo.BackRepoReport.GetDB()

	// Get reportDB in DB
	var reportDB orm.ReportDB
	if err := db.First(&reportDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var reportAPI orm.ReportAPI
	reportAPI.ID = reportDB.ID
	reportAPI.ReportPointersEnconding = reportDB.ReportPointersEnconding
	reportDB.CopyBasicFieldsToReport(&reportAPI.Report)

	c.JSON(http.StatusOK, reportAPI)
}

// UpdateReport
//
// swagger:route PATCH /reports/{ID} reports updateReport
//
// Update a report
//
// Responses:
//    default: genericError
//        200: reportDBResponse
func UpdateReport(c *gin.Context) {
	db := orm.BackRepo.BackRepoReport.GetDB()

	// Get model if exist
	var reportDB orm.ReportDB

	// fetch the report
	query := db.First(&reportDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ReportAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	reportDB.CopyBasicFieldsFromReport(&input.Report)
	reportDB.ReportPointersEnconding = input.ReportPointersEnconding

	query = db.Model(&reportDB).Updates(reportDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the reportDB
	c.JSON(http.StatusOK, reportDB)
}

// DeleteReport
//
// swagger:route DELETE /reports/{ID} reports deleteReport
//
// Delete a report
//
// Responses:
//    default: genericError
func DeleteReport(c *gin.Context) {
	db := orm.BackRepo.BackRepoReport.GetDB()

	// Get model if exist
	var reportDB orm.ReportDB
	if err := db.First(&reportDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&reportDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
