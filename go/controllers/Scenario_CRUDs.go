// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongfly/go/models"
	"github.com/fullstack-lang/gongfly/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Scenario__dummysDeclaration__ models.Scenario
var __Scenario_time__dummyDeclaration time.Duration

// An ScenarioID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getScenario updateScenario deleteScenario
type ScenarioID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ScenarioInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postScenario updateScenario
type ScenarioInput struct {
	// The Scenario to submit or modify
	// in: body
	Scenario *orm.ScenarioAPI
}

// GetScenarios
//
// swagger:route GET /scenarios scenarios getScenarios
//
// Get all scenarios
//
// Responses:
//    default: genericError
//        200: scenarioDBsResponse
func GetScenarios(c *gin.Context) {
	db := orm.BackRepo.BackRepoScenario.GetDB()

	// source slice
	var scenarioDBs []orm.ScenarioDB
	query := db.Find(&scenarioDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	scenarioAPIs := make([]orm.ScenarioAPI, 0)

	// for each scenario, update fields from the database nullable fields
	for idx := range scenarioDBs {
		scenarioDB := &scenarioDBs[idx]
		_ = scenarioDB
		var scenarioAPI orm.ScenarioAPI

		// insertion point for updating fields
		scenarioAPI.ID = scenarioDB.ID
		scenarioDB.CopyBasicFieldsToScenario(&scenarioAPI.Scenario)
		scenarioAPI.ScenarioPointersEnconding = scenarioDB.ScenarioPointersEnconding
		scenarioAPIs = append(scenarioAPIs, scenarioAPI)
	}

	c.JSON(http.StatusOK, scenarioAPIs)
}

// PostScenario
//
// swagger:route POST /scenarios scenarios postScenario
//
// Creates a scenario
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: scenarioDBResponse
func PostScenario(c *gin.Context) {
	db := orm.BackRepo.BackRepoScenario.GetDB()

	// Validate input
	var input orm.ScenarioAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create scenario
	scenarioDB := orm.ScenarioDB{}
	scenarioDB.ScenarioPointersEnconding = input.ScenarioPointersEnconding
	scenarioDB.CopyBasicFieldsFromScenario(&input.Scenario)

	query := db.Create(&scenarioDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, scenarioDB)
}

// GetScenario
//
// swagger:route GET /scenarios/{ID} scenarios getScenario
//
// Gets the details for a scenario.
//
// Responses:
//    default: genericError
//        200: scenarioDBResponse
func GetScenario(c *gin.Context) {
	db := orm.BackRepo.BackRepoScenario.GetDB()

	// Get scenarioDB in DB
	var scenarioDB orm.ScenarioDB
	if err := db.First(&scenarioDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var scenarioAPI orm.ScenarioAPI
	scenarioAPI.ID = scenarioDB.ID
	scenarioAPI.ScenarioPointersEnconding = scenarioDB.ScenarioPointersEnconding
	scenarioDB.CopyBasicFieldsToScenario(&scenarioAPI.Scenario)

	c.JSON(http.StatusOK, scenarioAPI)
}

// UpdateScenario
//
// swagger:route PATCH /scenarios/{ID} scenarios updateScenario
//
// Update a scenario
//
// Responses:
//    default: genericError
//        200: scenarioDBResponse
func UpdateScenario(c *gin.Context) {
	db := orm.BackRepo.BackRepoScenario.GetDB()

	// Get model if exist
	var scenarioDB orm.ScenarioDB

	// fetch the scenario
	query := db.First(&scenarioDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ScenarioAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	scenarioDB.CopyBasicFieldsFromScenario(&input.Scenario)
	scenarioDB.ScenarioPointersEnconding = input.ScenarioPointersEnconding

	query = db.Model(&scenarioDB).Updates(scenarioDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the scenarioDB
	c.JSON(http.StatusOK, scenarioDB)
}

// DeleteScenario
//
// swagger:route DELETE /scenarios/{ID} scenarios deleteScenario
//
// Delete a scenario
//
// Responses:
//    default: genericError
func DeleteScenario(c *gin.Context) {
	db := orm.BackRepo.BackRepoScenario.GetDB()

	// Get model if exist
	var scenarioDB orm.ScenarioDB
	if err := db.First(&scenarioDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&scenarioDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
