// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongfly/go/models"
	"github.com/fullstack-lang/gongfly/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Order__dummysDeclaration__ models.Order
var __Order_time__dummyDeclaration time.Duration

// An OrderID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getOrder updateOrder deleteOrder
type OrderID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// OrderInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postOrder updateOrder
type OrderInput struct {
	// The Order to submit or modify
	// in: body
	Order *orm.OrderAPI
}

// GetOrders
//
// swagger:route GET /orders orders getOrders
//
// Get all orders
//
// Responses:
//    default: genericError
//        200: orderDBsResponse
func GetOrders(c *gin.Context) {
	db := orm.BackRepo.BackRepoOrder.GetDB()
	
	// source slice
	var orderDBs []orm.OrderDB
	query := db.Find(&orderDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	orderAPIs := make([]orm.OrderAPI, 0)

	// for each order, update fields from the database nullable fields
	for idx := range orderDBs {
		orderDB := &orderDBs[idx]
		_ = orderDB
		var orderAPI orm.OrderAPI

		// insertion point for updating fields
		orderAPI.ID = orderDB.ID
		orderDB.CopyBasicFieldsToOrder(&orderAPI.Order)
		orderAPI.OrderPointersEnconding = orderDB.OrderPointersEnconding
		orderAPIs = append(orderAPIs, orderAPI)
	}

	c.JSON(http.StatusOK, orderAPIs)
}

// PostOrder
//
// swagger:route POST /orders orders postOrder
//
// Creates a order
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: orderDBResponse
func PostOrder(c *gin.Context) {
	db := orm.BackRepo.BackRepoOrder.GetDB()

	// Validate input
	var input orm.OrderAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create order
	orderDB := orm.OrderDB{}
	orderDB.OrderPointersEnconding = input.OrderPointersEnconding
	orderDB.CopyBasicFieldsFromOrder(&input.Order)

	query := db.Create(&orderDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, orderDB)
}

// GetOrder
//
// swagger:route GET /orders/{ID} orders getOrder
//
// Gets the details for a order.
//
// Responses:
//    default: genericError
//        200: orderDBResponse
func GetOrder(c *gin.Context) {
	db := orm.BackRepo.BackRepoOrder.GetDB()

	// Get orderDB in DB
	var orderDB orm.OrderDB
	if err := db.First(&orderDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var orderAPI orm.OrderAPI
	orderAPI.ID = orderDB.ID
	orderAPI.OrderPointersEnconding = orderDB.OrderPointersEnconding
	orderDB.CopyBasicFieldsToOrder(&orderAPI.Order)

	c.JSON(http.StatusOK, orderAPI)
}

// UpdateOrder
//
// swagger:route PATCH /orders/{ID} orders updateOrder
//
// Update a order
//
// Responses:
//    default: genericError
//        200: orderDBResponse
func UpdateOrder(c *gin.Context) {
	db := orm.BackRepo.BackRepoOrder.GetDB()

	// Get model if exist
	var orderDB orm.OrderDB

	// fetch the order
	query := db.First(&orderDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.OrderAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	orderDB.CopyBasicFieldsFromOrder(&input.Order)
	orderDB.OrderPointersEnconding = input.OrderPointersEnconding

	query = db.Model(&orderDB).Updates(orderDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the orderDB
	c.JSON(http.StatusOK, orderDB)
}

// DeleteOrder
//
// swagger:route DELETE /orders/{ID} orders deleteOrder
//
// Delete a order
//
// Responses:
//    default: genericError
func DeleteOrder(c *gin.Context) {
	db := orm.BackRepo.BackRepoOrder.GetDB()

	// Get model if exist
	var orderDB orm.OrderDB
	if err := db.First(&orderDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&orderDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
