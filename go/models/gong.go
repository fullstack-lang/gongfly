// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	CivilianAirports           map[*CivilianAirport]any
	CivilianAirports_mapString map[string]*CivilianAirport

	OnAfterCivilianAirportCreateCallback OnAfterCreateInterface[CivilianAirport]
	OnAfterCivilianAirportUpdateCallback OnAfterUpdateInterface[CivilianAirport]
	OnAfterCivilianAirportDeleteCallback OnAfterDeleteInterface[CivilianAirport]
	OnAfterCivilianAirportReadCallback   OnAfterReadInterface[CivilianAirport]

	Liners           map[*Liner]any
	Liners_mapString map[string]*Liner

	OnAfterLinerCreateCallback OnAfterCreateInterface[Liner]
	OnAfterLinerUpdateCallback OnAfterUpdateInterface[Liner]
	OnAfterLinerDeleteCallback OnAfterDeleteInterface[Liner]
	OnAfterLinerReadCallback   OnAfterReadInterface[Liner]

	Messages           map[*Message]any
	Messages_mapString map[string]*Message

	OnAfterMessageCreateCallback OnAfterCreateInterface[Message]
	OnAfterMessageUpdateCallback OnAfterUpdateInterface[Message]
	OnAfterMessageDeleteCallback OnAfterDeleteInterface[Message]
	OnAfterMessageReadCallback   OnAfterReadInterface[Message]

	OpsLines           map[*OpsLine]any
	OpsLines_mapString map[string]*OpsLine

	OnAfterOpsLineCreateCallback OnAfterCreateInterface[OpsLine]
	OnAfterOpsLineUpdateCallback OnAfterUpdateInterface[OpsLine]
	OnAfterOpsLineDeleteCallback OnAfterDeleteInterface[OpsLine]
	OnAfterOpsLineReadCallback   OnAfterReadInterface[OpsLine]

	Radars           map[*Radar]any
	Radars_mapString map[string]*Radar

	OnAfterRadarCreateCallback OnAfterCreateInterface[Radar]
	OnAfterRadarUpdateCallback OnAfterUpdateInterface[Radar]
	OnAfterRadarDeleteCallback OnAfterDeleteInterface[Radar]
	OnAfterRadarReadCallback   OnAfterReadInterface[Radar]

	Satellites           map[*Satellite]any
	Satellites_mapString map[string]*Satellite

	OnAfterSatelliteCreateCallback OnAfterCreateInterface[Satellite]
	OnAfterSatelliteUpdateCallback OnAfterUpdateInterface[Satellite]
	OnAfterSatelliteDeleteCallback OnAfterDeleteInterface[Satellite]
	OnAfterSatelliteReadCallback   OnAfterReadInterface[Satellite]

	Scenarios           map[*Scenario]any
	Scenarios_mapString map[string]*Scenario

	OnAfterScenarioCreateCallback OnAfterCreateInterface[Scenario]
	OnAfterScenarioUpdateCallback OnAfterUpdateInterface[Scenario]
	OnAfterScenarioDeleteCallback OnAfterDeleteInterface[Scenario]
	OnAfterScenarioReadCallback   OnAfterReadInterface[Scenario]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string
	Map_DocLink_Renaming   map[string]GONG__Identifier

	// map_Gongstruct_BackPointer is storage of back pointers
	map_Gongstruct_BackPointer map[any]any
}

func SetBackPointer[T Gongstruct](stageStruct *StageStruct, instance *T, backPointer any) {
	stageStruct.map_Gongstruct_BackPointer[instance] = backPointer
}
func GetBackPointer[T Gongstruct](stageStruct *StageStruct, instance *T) (backPointer any) {
	backPointer, _ = stageStruct.map_Gongstruct_BackPointer[instance]
	return
}

type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCivilianAirport(civilianairport *CivilianAirport)
	CheckoutCivilianAirport(civilianairport *CivilianAirport)
	CommitLiner(liner *Liner)
	CheckoutLiner(liner *Liner)
	CommitMessage(message *Message)
	CheckoutMessage(message *Message)
	CommitOpsLine(opsline *OpsLine)
	CheckoutOpsLine(opsline *OpsLine)
	CommitRadar(radar *Radar)
	CheckoutRadar(radar *Radar)
	CommitSatellite(satellite *Satellite)
	CheckoutSatellite(satellite *Satellite)
	CommitScenario(scenario *Scenario)
	CheckoutScenario(scenario *Scenario)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	CivilianAirports:           make(map[*CivilianAirport]any),
	CivilianAirports_mapString: make(map[string]*CivilianAirport),

	Liners:           make(map[*Liner]any),
	Liners_mapString: make(map[string]*Liner),

	Messages:           make(map[*Message]any),
	Messages_mapString: make(map[string]*Message),

	OpsLines:           make(map[*OpsLine]any),
	OpsLines_mapString: make(map[string]*OpsLine),

	Radars:           make(map[*Radar]any),
	Radars_mapString: make(map[string]*Radar),

	Satellites:           make(map[*Satellite]any),
	Satellites_mapString: make(map[string]*Satellite),

	Scenarios:           make(map[*Scenario]any),
	Scenarios_mapString: make(map[string]*Scenario),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
	map_Gongstruct_BackPointer:     make(map[any]any),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["CivilianAirport"] = len(stage.CivilianAirports)
	stage.Map_GongStructName_InstancesNb["Liner"] = len(stage.Liners)
	stage.Map_GongStructName_InstancesNb["Message"] = len(stage.Messages)
	stage.Map_GongStructName_InstancesNb["OpsLine"] = len(stage.OpsLines)
	stage.Map_GongStructName_InstancesNb["Radar"] = len(stage.Radars)
	stage.Map_GongStructName_InstancesNb["Satellite"] = len(stage.Satellites)
	stage.Map_GongStructName_InstancesNb["Scenario"] = len(stage.Scenarios)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["CivilianAirport"] = len(stage.CivilianAirports)
	stage.Map_GongStructName_InstancesNb["Liner"] = len(stage.Liners)
	stage.Map_GongStructName_InstancesNb["Message"] = len(stage.Messages)
	stage.Map_GongStructName_InstancesNb["OpsLine"] = len(stage.OpsLines)
	stage.Map_GongStructName_InstancesNb["Radar"] = len(stage.Radars)
	stage.Map_GongStructName_InstancesNb["Satellite"] = len(stage.Satellites)
	stage.Map_GongStructName_InstancesNb["Scenario"] = len(stage.Scenarios)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts civilianairport to the model stage
func (civilianairport *CivilianAirport) Stage() *CivilianAirport {
	Stage.CivilianAirports[civilianairport] = __member
	Stage.CivilianAirports_mapString[civilianairport.Name] = civilianairport

	return civilianairport
}

// Unstage removes civilianairport off the model stage
func (civilianairport *CivilianAirport) Unstage() *CivilianAirport {
	delete(Stage.CivilianAirports, civilianairport)
	delete(Stage.CivilianAirports_mapString, civilianairport.Name)
	return civilianairport
}

// commit civilianairport to the back repo (if it is already staged)
func (civilianairport *CivilianAirport) Commit() *CivilianAirport {
	if _, ok := Stage.CivilianAirports[civilianairport]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCivilianAirport(civilianairport)
		}
	}
	return civilianairport
}

// Checkout civilianairport to the back repo (if it is already staged)
func (civilianairport *CivilianAirport) Checkout() *CivilianAirport {
	if _, ok := Stage.CivilianAirports[civilianairport]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCivilianAirport(civilianairport)
		}
	}
	return civilianairport
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of civilianairport to the model stage
func (civilianairport *CivilianAirport) StageCopy() *CivilianAirport {
	_civilianairport := new(CivilianAirport)
	*_civilianairport = *civilianairport
	_civilianairport.Stage()
	return _civilianairport
}

// StageAndCommit appends civilianairport to the model stage and commit to the orm repo
func (civilianairport *CivilianAirport) StageAndCommit() *CivilianAirport {
	civilianairport.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCivilianAirport(civilianairport)
	}
	return civilianairport
}

// DeleteStageAndCommit appends civilianairport to the model stage and commit to the orm repo
func (civilianairport *CivilianAirport) DeleteStageAndCommit() *CivilianAirport {
	civilianairport.Unstage()
	DeleteORMCivilianAirport(civilianairport)
	return civilianairport
}

// StageCopyAndCommit appends a copy of civilianairport to the model stage and commit to the orm repo
func (civilianairport *CivilianAirport) StageCopyAndCommit() *CivilianAirport {
	_civilianairport := new(CivilianAirport)
	*_civilianairport = *civilianairport
	_civilianairport.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCivilianAirport(civilianairport)
	}
	return _civilianairport
}

// CreateORMCivilianAirport enables dynamic staging of a CivilianAirport instance
func CreateORMCivilianAirport(civilianairport *CivilianAirport) {
	civilianairport.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCivilianAirport(civilianairport)
	}
}

// DeleteORMCivilianAirport enables dynamic staging of a CivilianAirport instance
func DeleteORMCivilianAirport(civilianairport *CivilianAirport) {
	civilianairport.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCivilianAirport(civilianairport)
	}
}

// for satisfaction of GongStruct interface
func (civilianairport *CivilianAirport) GetName() (res string) {
	return civilianairport.Name
}

// Stage puts liner to the model stage
func (liner *Liner) Stage() *Liner {
	Stage.Liners[liner] = __member
	Stage.Liners_mapString[liner.Name] = liner

	return liner
}

// Unstage removes liner off the model stage
func (liner *Liner) Unstage() *Liner {
	delete(Stage.Liners, liner)
	delete(Stage.Liners_mapString, liner.Name)
	return liner
}

// commit liner to the back repo (if it is already staged)
func (liner *Liner) Commit() *Liner {
	if _, ok := Stage.Liners[liner]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLiner(liner)
		}
	}
	return liner
}

// Checkout liner to the back repo (if it is already staged)
func (liner *Liner) Checkout() *Liner {
	if _, ok := Stage.Liners[liner]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLiner(liner)
		}
	}
	return liner
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of liner to the model stage
func (liner *Liner) StageCopy() *Liner {
	_liner := new(Liner)
	*_liner = *liner
	_liner.Stage()
	return _liner
}

// StageAndCommit appends liner to the model stage and commit to the orm repo
func (liner *Liner) StageAndCommit() *Liner {
	liner.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLiner(liner)
	}
	return liner
}

// DeleteStageAndCommit appends liner to the model stage and commit to the orm repo
func (liner *Liner) DeleteStageAndCommit() *Liner {
	liner.Unstage()
	DeleteORMLiner(liner)
	return liner
}

// StageCopyAndCommit appends a copy of liner to the model stage and commit to the orm repo
func (liner *Liner) StageCopyAndCommit() *Liner {
	_liner := new(Liner)
	*_liner = *liner
	_liner.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLiner(liner)
	}
	return _liner
}

// CreateORMLiner enables dynamic staging of a Liner instance
func CreateORMLiner(liner *Liner) {
	liner.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLiner(liner)
	}
}

// DeleteORMLiner enables dynamic staging of a Liner instance
func DeleteORMLiner(liner *Liner) {
	liner.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLiner(liner)
	}
}

// for satisfaction of GongStruct interface
func (liner *Liner) GetName() (res string) {
	return liner.Name
}

// Stage puts message to the model stage
func (message *Message) Stage() *Message {
	Stage.Messages[message] = __member
	Stage.Messages_mapString[message.Name] = message

	return message
}

// Unstage removes message off the model stage
func (message *Message) Unstage() *Message {
	delete(Stage.Messages, message)
	delete(Stage.Messages_mapString, message.Name)
	return message
}

// commit message to the back repo (if it is already staged)
func (message *Message) Commit() *Message {
	if _, ok := Stage.Messages[message]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMessage(message)
		}
	}
	return message
}

// Checkout message to the back repo (if it is already staged)
func (message *Message) Checkout() *Message {
	if _, ok := Stage.Messages[message]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMessage(message)
		}
	}
	return message
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of message to the model stage
func (message *Message) StageCopy() *Message {
	_message := new(Message)
	*_message = *message
	_message.Stage()
	return _message
}

// StageAndCommit appends message to the model stage and commit to the orm repo
func (message *Message) StageAndCommit() *Message {
	message.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMessage(message)
	}
	return message
}

// DeleteStageAndCommit appends message to the model stage and commit to the orm repo
func (message *Message) DeleteStageAndCommit() *Message {
	message.Unstage()
	DeleteORMMessage(message)
	return message
}

// StageCopyAndCommit appends a copy of message to the model stage and commit to the orm repo
func (message *Message) StageCopyAndCommit() *Message {
	_message := new(Message)
	*_message = *message
	_message.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMessage(message)
	}
	return _message
}

// CreateORMMessage enables dynamic staging of a Message instance
func CreateORMMessage(message *Message) {
	message.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMessage(message)
	}
}

// DeleteORMMessage enables dynamic staging of a Message instance
func DeleteORMMessage(message *Message) {
	message.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMessage(message)
	}
}

// for satisfaction of GongStruct interface
func (message *Message) GetName() (res string) {
	return message.Name
}

// Stage puts opsline to the model stage
func (opsline *OpsLine) Stage() *OpsLine {
	Stage.OpsLines[opsline] = __member
	Stage.OpsLines_mapString[opsline.Name] = opsline

	return opsline
}

// Unstage removes opsline off the model stage
func (opsline *OpsLine) Unstage() *OpsLine {
	delete(Stage.OpsLines, opsline)
	delete(Stage.OpsLines_mapString, opsline.Name)
	return opsline
}

// commit opsline to the back repo (if it is already staged)
func (opsline *OpsLine) Commit() *OpsLine {
	if _, ok := Stage.OpsLines[opsline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitOpsLine(opsline)
		}
	}
	return opsline
}

// Checkout opsline to the back repo (if it is already staged)
func (opsline *OpsLine) Checkout() *OpsLine {
	if _, ok := Stage.OpsLines[opsline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutOpsLine(opsline)
		}
	}
	return opsline
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of opsline to the model stage
func (opsline *OpsLine) StageCopy() *OpsLine {
	_opsline := new(OpsLine)
	*_opsline = *opsline
	_opsline.Stage()
	return _opsline
}

// StageAndCommit appends opsline to the model stage and commit to the orm repo
func (opsline *OpsLine) StageAndCommit() *OpsLine {
	opsline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOpsLine(opsline)
	}
	return opsline
}

// DeleteStageAndCommit appends opsline to the model stage and commit to the orm repo
func (opsline *OpsLine) DeleteStageAndCommit() *OpsLine {
	opsline.Unstage()
	DeleteORMOpsLine(opsline)
	return opsline
}

// StageCopyAndCommit appends a copy of opsline to the model stage and commit to the orm repo
func (opsline *OpsLine) StageCopyAndCommit() *OpsLine {
	_opsline := new(OpsLine)
	*_opsline = *opsline
	_opsline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOpsLine(opsline)
	}
	return _opsline
}

// CreateORMOpsLine enables dynamic staging of a OpsLine instance
func CreateORMOpsLine(opsline *OpsLine) {
	opsline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOpsLine(opsline)
	}
}

// DeleteORMOpsLine enables dynamic staging of a OpsLine instance
func DeleteORMOpsLine(opsline *OpsLine) {
	opsline.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMOpsLine(opsline)
	}
}

// for satisfaction of GongStruct interface
func (opsline *OpsLine) GetName() (res string) {
	return opsline.Name
}

// Stage puts radar to the model stage
func (radar *Radar) Stage() *Radar {
	Stage.Radars[radar] = __member
	Stage.Radars_mapString[radar.Name] = radar

	return radar
}

// Unstage removes radar off the model stage
func (radar *Radar) Unstage() *Radar {
	delete(Stage.Radars, radar)
	delete(Stage.Radars_mapString, radar.Name)
	return radar
}

// commit radar to the back repo (if it is already staged)
func (radar *Radar) Commit() *Radar {
	if _, ok := Stage.Radars[radar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitRadar(radar)
		}
	}
	return radar
}

// Checkout radar to the back repo (if it is already staged)
func (radar *Radar) Checkout() *Radar {
	if _, ok := Stage.Radars[radar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutRadar(radar)
		}
	}
	return radar
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of radar to the model stage
func (radar *Radar) StageCopy() *Radar {
	_radar := new(Radar)
	*_radar = *radar
	_radar.Stage()
	return _radar
}

// StageAndCommit appends radar to the model stage and commit to the orm repo
func (radar *Radar) StageAndCommit() *Radar {
	radar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRadar(radar)
	}
	return radar
}

// DeleteStageAndCommit appends radar to the model stage and commit to the orm repo
func (radar *Radar) DeleteStageAndCommit() *Radar {
	radar.Unstage()
	DeleteORMRadar(radar)
	return radar
}

// StageCopyAndCommit appends a copy of radar to the model stage and commit to the orm repo
func (radar *Radar) StageCopyAndCommit() *Radar {
	_radar := new(Radar)
	*_radar = *radar
	_radar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRadar(radar)
	}
	return _radar
}

// CreateORMRadar enables dynamic staging of a Radar instance
func CreateORMRadar(radar *Radar) {
	radar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRadar(radar)
	}
}

// DeleteORMRadar enables dynamic staging of a Radar instance
func DeleteORMRadar(radar *Radar) {
	radar.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMRadar(radar)
	}
}

// for satisfaction of GongStruct interface
func (radar *Radar) GetName() (res string) {
	return radar.Name
}

// Stage puts satellite to the model stage
func (satellite *Satellite) Stage() *Satellite {
	Stage.Satellites[satellite] = __member
	Stage.Satellites_mapString[satellite.Name] = satellite

	return satellite
}

// Unstage removes satellite off the model stage
func (satellite *Satellite) Unstage() *Satellite {
	delete(Stage.Satellites, satellite)
	delete(Stage.Satellites_mapString, satellite.Name)
	return satellite
}

// commit satellite to the back repo (if it is already staged)
func (satellite *Satellite) Commit() *Satellite {
	if _, ok := Stage.Satellites[satellite]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitSatellite(satellite)
		}
	}
	return satellite
}

// Checkout satellite to the back repo (if it is already staged)
func (satellite *Satellite) Checkout() *Satellite {
	if _, ok := Stage.Satellites[satellite]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutSatellite(satellite)
		}
	}
	return satellite
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of satellite to the model stage
func (satellite *Satellite) StageCopy() *Satellite {
	_satellite := new(Satellite)
	*_satellite = *satellite
	_satellite.Stage()
	return _satellite
}

// StageAndCommit appends satellite to the model stage and commit to the orm repo
func (satellite *Satellite) StageAndCommit() *Satellite {
	satellite.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSatellite(satellite)
	}
	return satellite
}

// DeleteStageAndCommit appends satellite to the model stage and commit to the orm repo
func (satellite *Satellite) DeleteStageAndCommit() *Satellite {
	satellite.Unstage()
	DeleteORMSatellite(satellite)
	return satellite
}

// StageCopyAndCommit appends a copy of satellite to the model stage and commit to the orm repo
func (satellite *Satellite) StageCopyAndCommit() *Satellite {
	_satellite := new(Satellite)
	*_satellite = *satellite
	_satellite.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSatellite(satellite)
	}
	return _satellite
}

// CreateORMSatellite enables dynamic staging of a Satellite instance
func CreateORMSatellite(satellite *Satellite) {
	satellite.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSatellite(satellite)
	}
}

// DeleteORMSatellite enables dynamic staging of a Satellite instance
func DeleteORMSatellite(satellite *Satellite) {
	satellite.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMSatellite(satellite)
	}
}

// for satisfaction of GongStruct interface
func (satellite *Satellite) GetName() (res string) {
	return satellite.Name
}

// Stage puts scenario to the model stage
func (scenario *Scenario) Stage() *Scenario {
	Stage.Scenarios[scenario] = __member
	Stage.Scenarios_mapString[scenario.Name] = scenario

	return scenario
}

// Unstage removes scenario off the model stage
func (scenario *Scenario) Unstage() *Scenario {
	delete(Stage.Scenarios, scenario)
	delete(Stage.Scenarios_mapString, scenario.Name)
	return scenario
}

// commit scenario to the back repo (if it is already staged)
func (scenario *Scenario) Commit() *Scenario {
	if _, ok := Stage.Scenarios[scenario]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitScenario(scenario)
		}
	}
	return scenario
}

// Checkout scenario to the back repo (if it is already staged)
func (scenario *Scenario) Checkout() *Scenario {
	if _, ok := Stage.Scenarios[scenario]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutScenario(scenario)
		}
	}
	return scenario
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of scenario to the model stage
func (scenario *Scenario) StageCopy() *Scenario {
	_scenario := new(Scenario)
	*_scenario = *scenario
	_scenario.Stage()
	return _scenario
}

// StageAndCommit appends scenario to the model stage and commit to the orm repo
func (scenario *Scenario) StageAndCommit() *Scenario {
	scenario.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMScenario(scenario)
	}
	return scenario
}

// DeleteStageAndCommit appends scenario to the model stage and commit to the orm repo
func (scenario *Scenario) DeleteStageAndCommit() *Scenario {
	scenario.Unstage()
	DeleteORMScenario(scenario)
	return scenario
}

// StageCopyAndCommit appends a copy of scenario to the model stage and commit to the orm repo
func (scenario *Scenario) StageCopyAndCommit() *Scenario {
	_scenario := new(Scenario)
	*_scenario = *scenario
	_scenario.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMScenario(scenario)
	}
	return _scenario
}

// CreateORMScenario enables dynamic staging of a Scenario instance
func CreateORMScenario(scenario *Scenario) {
	scenario.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMScenario(scenario)
	}
}

// DeleteORMScenario enables dynamic staging of a Scenario instance
func DeleteORMScenario(scenario *Scenario) {
	scenario.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMScenario(scenario)
	}
}

// for satisfaction of GongStruct interface
func (scenario *Scenario) GetName() (res string) {
	return scenario.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCivilianAirport(CivilianAirport *CivilianAirport)
	CreateORMLiner(Liner *Liner)
	CreateORMMessage(Message *Message)
	CreateORMOpsLine(OpsLine *OpsLine)
	CreateORMRadar(Radar *Radar)
	CreateORMSatellite(Satellite *Satellite)
	CreateORMScenario(Scenario *Scenario)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCivilianAirport(CivilianAirport *CivilianAirport)
	DeleteORMLiner(Liner *Liner)
	DeleteORMMessage(Message *Message)
	DeleteORMOpsLine(OpsLine *OpsLine)
	DeleteORMRadar(Radar *Radar)
	DeleteORMSatellite(Satellite *Satellite)
	DeleteORMScenario(Scenario *Scenario)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.CivilianAirports = make(map[*CivilianAirport]any)
	stage.CivilianAirports_mapString = make(map[string]*CivilianAirport)

	stage.Liners = make(map[*Liner]any)
	stage.Liners_mapString = make(map[string]*Liner)

	stage.Messages = make(map[*Message]any)
	stage.Messages_mapString = make(map[string]*Message)

	stage.OpsLines = make(map[*OpsLine]any)
	stage.OpsLines_mapString = make(map[string]*OpsLine)

	stage.Radars = make(map[*Radar]any)
	stage.Radars_mapString = make(map[string]*Radar)

	stage.Satellites = make(map[*Satellite]any)
	stage.Satellites_mapString = make(map[string]*Satellite)

	stage.Scenarios = make(map[*Scenario]any)
	stage.Scenarios_mapString = make(map[string]*Scenario)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.CivilianAirports = nil
	stage.CivilianAirports_mapString = nil

	stage.Liners = nil
	stage.Liners_mapString = nil

	stage.Messages = nil
	stage.Messages_mapString = nil

	stage.OpsLines = nil
	stage.OpsLines_mapString = nil

	stage.Radars = nil
	stage.Radars_mapString = nil

	stage.Satellites = nil
	stage.Satellites_mapString = nil

	stage.Scenarios = nil
	stage.Scenarios_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for civilianairport := range stage.CivilianAirports {
		civilianairport.Unstage()
	}

	for liner := range stage.Liners {
		liner.Unstage()
	}

	for message := range stage.Messages {
		message.Unstage()
	}

	for opsline := range stage.OpsLines {
		opsline.Unstage()
	}

	for radar := range stage.Radars {
		radar.Unstage()
	}

	for satellite := range stage.Satellites {
		satellite.Unstage()
	}

	for scenario := range stage.Scenarios {
		scenario.Unstage()
	}

}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	CivilianAirport | Liner | Message | OpsLine | Radar | Satellite | Scenario
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*CivilianAirport | *Liner | *Message | *OpsLine | *Radar | *Satellite | *Scenario
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*CivilianAirport]any |
		map[*Liner]any |
		map[*Message]any |
		map[*OpsLine]any |
		map[*Radar]any |
		map[*Satellite]any |
		map[*Scenario]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*CivilianAirport |
		map[string]*Liner |
		map[string]*Message |
		map[string]*OpsLine |
		map[string]*Radar |
		map[string]*Satellite |
		map[string]*Scenario |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet](stages ...*StageStruct) *Type {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*CivilianAirport]any:
		return any(&stage.CivilianAirports).(*Type)
	case map[*Liner]any:
		return any(&stage.Liners).(*Type)
	case map[*Message]any:
		return any(&stage.Messages).(*Type)
	case map[*OpsLine]any:
		return any(&stage.OpsLines).(*Type)
	case map[*Radar]any:
		return any(&stage.Radars).(*Type)
	case map[*Satellite]any:
		return any(&stage.Satellites).(*Type)
	case map[*Scenario]any:
		return any(&stage.Scenarios).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString](stages ...*StageStruct) *Type {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*CivilianAirport:
		return any(&stage.CivilianAirports_mapString).(*Type)
	case map[string]*Liner:
		return any(&stage.Liners_mapString).(*Type)
	case map[string]*Message:
		return any(&stage.Messages_mapString).(*Type)
	case map[string]*OpsLine:
		return any(&stage.OpsLines_mapString).(*Type)
	case map[string]*Radar:
		return any(&stage.Radars_mapString).(*Type)
	case map[string]*Satellite:
		return any(&stage.Satellites_mapString).(*Type)
	case map[string]*Scenario:
		return any(&stage.Scenarios_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct](stages ...*StageStruct) *map[*Type]any {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case CivilianAirport:
		return any(&stage.CivilianAirports).(*map[*Type]any)
	case Liner:
		return any(&stage.Liners).(*map[*Type]any)
	case Message:
		return any(&stage.Messages).(*map[*Type]any)
	case OpsLine:
		return any(&stage.OpsLines).(*map[*Type]any)
	case Radar:
		return any(&stage.Radars).(*map[*Type]any)
	case Satellite:
		return any(&stage.Satellites).(*map[*Type]any)
	case Scenario:
		return any(&stage.Scenarios).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct](stages ...*StageStruct) *map[string]*Type {
	var ret Type

	var stage *StageStruct
	if len(stages) > 0 {
		stage = stages[0]
	} else {
		stage = &Stage
	}

	switch any(ret).(type) {
	// insertion point for generic get functions
	case CivilianAirport:
		return any(&stage.CivilianAirports_mapString).(*map[string]*Type)
	case Liner:
		return any(&stage.Liners_mapString).(*map[string]*Type)
	case Message:
		return any(&stage.Messages_mapString).(*map[string]*Type)
	case OpsLine:
		return any(&stage.OpsLines_mapString).(*map[string]*Type)
	case Radar:
		return any(&stage.Radars_mapString).(*map[string]*Type)
	case Satellite:
		return any(&stage.Satellites_mapString).(*map[string]*Type)
	case Scenario:
		return any(&stage.Scenarios_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case CivilianAirport:
		return any(&CivilianAirport{
			// Initialisation of associations
		}).(*Type)
	case Liner:
		return any(&Liner{
			// Initialisation of associations
			// field is initialized with an instance of OpsLine with the name of the field
			ReporingLine: &OpsLine{Name: "ReporingLine"},
		}).(*Type)
	case Message:
		return any(&Message{
			// Initialisation of associations
		}).(*Type)
	case OpsLine:
		return any(&OpsLine{
			// Initialisation of associations
			// field is initialized with an instance of Scenario with the name of the field
			Scenario: &Scenario{Name: "Scenario"},
		}).(*Type)
	case Radar:
		return any(&Radar{
			// Initialisation of associations
		}).(*Type)
	case Satellite:
		return any(&Satellite{
			// Initialisation of associations
		}).(*Type)
	case Scenario:
		return any(&Scenario{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of CivilianAirport
	case CivilianAirport:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Liner
	case Liner:
		switch fieldname {
		// insertion point for per direct association field
		case "ReporingLine":
			res := make(map[*OpsLine][]*Liner)
			for liner := range Stage.Liners {
				if liner.ReporingLine != nil {
					opsline_ := liner.ReporingLine
					var liners []*Liner
					_, ok := res[opsline_]
					if ok {
						liners = res[opsline_]
					} else {
						liners = make([]*Liner, 0)
					}
					liners = append(liners, liner)
					res[opsline_] = liners
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Message
	case Message:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of OpsLine
	case OpsLine:
		switch fieldname {
		// insertion point for per direct association field
		case "Scenario":
			res := make(map[*Scenario][]*OpsLine)
			for opsline := range Stage.OpsLines {
				if opsline.Scenario != nil {
					scenario_ := opsline.Scenario
					var opslines []*OpsLine
					_, ok := res[scenario_]
					if ok {
						opslines = res[scenario_]
					} else {
						opslines = make([]*OpsLine, 0)
					}
					opslines = append(opslines, opsline)
					res[scenario_] = opslines
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Radar
	case Radar:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Satellite
	case Satellite:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Scenario
	case Scenario:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of CivilianAirport
	case CivilianAirport:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Liner
	case Liner:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Message
	case Message:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of OpsLine
	case OpsLine:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Radar
	case Radar:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Satellite
	case Satellite:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Scenario
	case Scenario:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case CivilianAirport:
		res = "CivilianAirport"
	case Liner:
		res = "Liner"
	case Message:
		res = "Message"
	case OpsLine:
		res = "OpsLine"
	case Radar:
		res = "Radar"
	case Satellite:
		res = "Satellite"
	case Scenario:
		res = "Scenario"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case CivilianAirport:
		res = []string{"Lat", "Lng", "Name"}
	case Liner:
		res = []string{"Name", "Lat", "Lng", "Heading", "Level", "Speed", "State", "TargetHeading", "TargetLocationLat", "TargetLocationLng", "DistanceToTarget", "MaxRotationalSpeed", "VerticalSpeed", "Timestampstring", "ReporingLine"}
	case Message:
		res = []string{"Lat", "Lng", "Heading", "Level", "Speed", "State", "Name", "TargetLocationLat", "TargetLocationLng", "DistanceToTarget", "Timestampstring", "DurationSinceSimulationStart", "Timestampstartstring", "Source", "Destination", "Content", "About_string", "Display"}
	case OpsLine:
		res = []string{"IsTransmitting", "TransmissionMessage", "IsTransmittingBackward", "TransmissionMessageBackward", "Scenario", "State", "Name"}
	case Radar:
		res = []string{"State", "Name", "Lat", "Lng", "Range"}
	case Satellite:
		res = []string{"Name", "Line1", "Line2", "Lat", "Lng", "Heading", "Level", "Speed", "VerticalSpeed", "Timestampstring"}
	case Scenario:
		res = []string{"Name", "Lat", "Lng", "ZoomLevel", "MessageVisualSpeed"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case CivilianAirport:
		switch fieldName {
		// string value of fields
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(CivilianAirport).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(CivilianAirport).Lng)
		case "Name":
			res = any(instance).(CivilianAirport).Name
		}
	case Liner:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Liner).Name
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Liner).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Liner).Lng)
		case "Heading":
			res = fmt.Sprintf("%f", any(instance).(Liner).Heading)
		case "Level":
			res = fmt.Sprintf("%f", any(instance).(Liner).Level)
		case "Speed":
			res = fmt.Sprintf("%f", any(instance).(Liner).Speed)
		case "State":
			enum := any(instance).(Liner).State
			res = enum.ToCodeString()
		case "TargetHeading":
			res = fmt.Sprintf("%f", any(instance).(Liner).TargetHeading)
		case "TargetLocationLat":
			res = fmt.Sprintf("%f", any(instance).(Liner).TargetLocationLat)
		case "TargetLocationLng":
			res = fmt.Sprintf("%f", any(instance).(Liner).TargetLocationLng)
		case "DistanceToTarget":
			res = fmt.Sprintf("%f", any(instance).(Liner).DistanceToTarget)
		case "MaxRotationalSpeed":
			res = fmt.Sprintf("%f", any(instance).(Liner).MaxRotationalSpeed)
		case "VerticalSpeed":
			res = fmt.Sprintf("%f", any(instance).(Liner).VerticalSpeed)
		case "Timestampstring":
			res = any(instance).(Liner).Timestampstring
		case "ReporingLine":
			if any(instance).(Liner).ReporingLine != nil {
				res = any(instance).(Liner).ReporingLine.Name
			}
		}
	case Message:
		switch fieldName {
		// string value of fields
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Message).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Message).Lng)
		case "Heading":
			res = fmt.Sprintf("%f", any(instance).(Message).Heading)
		case "Level":
			res = fmt.Sprintf("%f", any(instance).(Message).Level)
		case "Speed":
			res = fmt.Sprintf("%f", any(instance).(Message).Speed)
		case "State":
			enum := any(instance).(Message).State
			res = enum.ToCodeString()
		case "Name":
			res = any(instance).(Message).Name
		case "TargetLocationLat":
			res = fmt.Sprintf("%f", any(instance).(Message).TargetLocationLat)
		case "TargetLocationLng":
			res = fmt.Sprintf("%f", any(instance).(Message).TargetLocationLng)
		case "DistanceToTarget":
			res = fmt.Sprintf("%f", any(instance).(Message).DistanceToTarget)
		case "Timestampstring":
			res = any(instance).(Message).Timestampstring
		case "DurationSinceSimulationStart":
			res = fmt.Sprintf("%d", any(instance).(Message).DurationSinceSimulationStart)
		case "Timestampstartstring":
			res = any(instance).(Message).Timestampstartstring
		case "Source":
			res = any(instance).(Message).Source
		case "Destination":
			res = any(instance).(Message).Destination
		case "Content":
			res = any(instance).(Message).Content
		case "About_string":
			res = any(instance).(Message).About_string
		case "Display":
			res = fmt.Sprintf("%t", any(instance).(Message).Display)
		}
	case OpsLine:
		switch fieldName {
		// string value of fields
		case "IsTransmitting":
			res = fmt.Sprintf("%t", any(instance).(OpsLine).IsTransmitting)
		case "TransmissionMessage":
			res = any(instance).(OpsLine).TransmissionMessage
		case "IsTransmittingBackward":
			res = fmt.Sprintf("%t", any(instance).(OpsLine).IsTransmittingBackward)
		case "TransmissionMessageBackward":
			res = any(instance).(OpsLine).TransmissionMessageBackward
		case "Scenario":
			if any(instance).(OpsLine).Scenario != nil {
				res = any(instance).(OpsLine).Scenario.Name
			}
		case "State":
			enum := any(instance).(OpsLine).State
			res = enum.ToCodeString()
		case "Name":
			res = any(instance).(OpsLine).Name
		}
	case Radar:
		switch fieldName {
		// string value of fields
		case "State":
			enum := any(instance).(Radar).State
			res = enum.ToCodeString()
		case "Name":
			res = any(instance).(Radar).Name
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Radar).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Radar).Lng)
		case "Range":
			res = fmt.Sprintf("%f", any(instance).(Radar).Range)
		}
	case Satellite:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Satellite).Name
		case "Line1":
			res = any(instance).(Satellite).Line1
		case "Line2":
			res = any(instance).(Satellite).Line2
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Satellite).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Satellite).Lng)
		case "Heading":
			res = fmt.Sprintf("%f", any(instance).(Satellite).Heading)
		case "Level":
			res = fmt.Sprintf("%f", any(instance).(Satellite).Level)
		case "Speed":
			res = fmt.Sprintf("%f", any(instance).(Satellite).Speed)
		case "VerticalSpeed":
			res = fmt.Sprintf("%f", any(instance).(Satellite).VerticalSpeed)
		case "Timestampstring":
			res = any(instance).(Satellite).Timestampstring
		}
	case Scenario:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Scenario).Name
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Scenario).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Scenario).Lng)
		case "ZoomLevel":
			res = fmt.Sprintf("%f", any(instance).(Scenario).ZoomLevel)
		case "MessageVisualSpeed":
			res = fmt.Sprintf("%f", any(instance).(Scenario).MessageVisualSpeed)
		}
	}
	return
}

// Last line of the template
