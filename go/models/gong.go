// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	CivilianAirports           map[*CivilianAirport]struct{}
	CivilianAirports_mapString map[string]*CivilianAirport

	Liners           map[*Liner]struct{}
	Liners_mapString map[string]*Liner

	Messages           map[*Message]struct{}
	Messages_mapString map[string]*Message

	OpsLines           map[*OpsLine]struct{}
	OpsLines_mapString map[string]*OpsLine

	Orders           map[*Order]struct{}
	Orders_mapString map[string]*Order

	Radars           map[*Radar]struct{}
	Radars_mapString map[string]*Radar

	Reports           map[*Report]struct{}
	Reports_mapString map[string]*Report

	Satellites           map[*Satellite]struct{}
	Satellites_mapString map[string]*Satellite

	Scenarios           map[*Scenario]struct{}
	Scenarios_mapString map[string]*Scenario

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCivilianAirport(civilianairport *CivilianAirport)
	CheckoutCivilianAirport(civilianairport *CivilianAirport)
	CommitLiner(liner *Liner)
	CheckoutLiner(liner *Liner)
	CommitMessage(message *Message)
	CheckoutMessage(message *Message)
	CommitOpsLine(opsline *OpsLine)
	CheckoutOpsLine(opsline *OpsLine)
	CommitOrder(order *Order)
	CheckoutOrder(order *Order)
	CommitRadar(radar *Radar)
	CheckoutRadar(radar *Radar)
	CommitReport(report *Report)
	CheckoutReport(report *Report)
	CommitSatellite(satellite *Satellite)
	CheckoutSatellite(satellite *Satellite)
	CommitScenario(scenario *Scenario)
	CheckoutScenario(scenario *Scenario)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	CivilianAirports:           make(map[*CivilianAirport]struct{}),
	CivilianAirports_mapString: make(map[string]*CivilianAirport),

	Liners:           make(map[*Liner]struct{}),
	Liners_mapString: make(map[string]*Liner),

	Messages:           make(map[*Message]struct{}),
	Messages_mapString: make(map[string]*Message),

	OpsLines:           make(map[*OpsLine]struct{}),
	OpsLines_mapString: make(map[string]*OpsLine),

	Orders:           make(map[*Order]struct{}),
	Orders_mapString: make(map[string]*Order),

	Radars:           make(map[*Radar]struct{}),
	Radars_mapString: make(map[string]*Radar),

	Reports:           make(map[*Report]struct{}),
	Reports_mapString: make(map[string]*Report),

	Satellites:           make(map[*Satellite]struct{}),
	Satellites_mapString: make(map[string]*Satellite),

	Scenarios:           make(map[*Scenario]struct{}),
	Scenarios_mapString: make(map[string]*Scenario),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["CivilianAirport"] = len(stage.CivilianAirports)
	stage.Map_GongStructName_InstancesNb["Liner"] = len(stage.Liners)
	stage.Map_GongStructName_InstancesNb["Message"] = len(stage.Messages)
	stage.Map_GongStructName_InstancesNb["OpsLine"] = len(stage.OpsLines)
	stage.Map_GongStructName_InstancesNb["Order"] = len(stage.Orders)
	stage.Map_GongStructName_InstancesNb["Radar"] = len(stage.Radars)
	stage.Map_GongStructName_InstancesNb["Report"] = len(stage.Reports)
	stage.Map_GongStructName_InstancesNb["Satellite"] = len(stage.Satellites)
	stage.Map_GongStructName_InstancesNb["Scenario"] = len(stage.Scenarios)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getCivilianAirportOrderedStructWithNameField() []*CivilianAirport {
	// have alphabetical order generation
	civilianairportOrdered := []*CivilianAirport{}
	for civilianairport := range stage.CivilianAirports {
		civilianairportOrdered = append(civilianairportOrdered, civilianairport)
	}
	sort.Slice(civilianairportOrdered[:], func(i, j int) bool {
		return civilianairportOrdered[i].Name < civilianairportOrdered[j].Name
	})
	return civilianairportOrdered
}

// Stage puts civilianairport to the model stage
func (civilianairport *CivilianAirport) Stage() *CivilianAirport {
	Stage.CivilianAirports[civilianairport] = __member
	Stage.CivilianAirports_mapString[civilianairport.Name] = civilianairport

	return civilianairport
}

// Unstage removes civilianairport off the model stage
func (civilianairport *CivilianAirport) Unstage() *CivilianAirport {
	delete(Stage.CivilianAirports, civilianairport)
	delete(Stage.CivilianAirports_mapString, civilianairport.Name)
	return civilianairport
}

// commit civilianairport to the back repo (if it is already staged)
func (civilianairport *CivilianAirport) Commit() *CivilianAirport {
	if _, ok := Stage.CivilianAirports[civilianairport]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCivilianAirport(civilianairport)
		}
	}
	return civilianairport
}

// Checkout civilianairport to the back repo (if it is already staged)
func (civilianairport *CivilianAirport) Checkout() *CivilianAirport {
	if _, ok := Stage.CivilianAirports[civilianairport]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCivilianAirport(civilianairport)
		}
	}
	return civilianairport
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of civilianairport to the model stage
func (civilianairport *CivilianAirport) StageCopy() *CivilianAirport {
	_civilianairport := new(CivilianAirport)
	*_civilianairport = *civilianairport
	_civilianairport.Stage()
	return _civilianairport
}

// StageAndCommit appends civilianairport to the model stage and commit to the orm repo
func (civilianairport *CivilianAirport) StageAndCommit() *CivilianAirport {
	civilianairport.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCivilianAirport(civilianairport)
	}
	return civilianairport
}

// DeleteStageAndCommit appends civilianairport to the model stage and commit to the orm repo
func (civilianairport *CivilianAirport) DeleteStageAndCommit() *CivilianAirport {
	civilianairport.Unstage()
	DeleteORMCivilianAirport(civilianairport)
	return civilianairport
}

// StageCopyAndCommit appends a copy of civilianairport to the model stage and commit to the orm repo
func (civilianairport *CivilianAirport) StageCopyAndCommit() *CivilianAirport {
	_civilianairport := new(CivilianAirport)
	*_civilianairport = *civilianairport
	_civilianairport.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCivilianAirport(civilianairport)
	}
	return _civilianairport
}

// CreateORMCivilianAirport enables dynamic staging of a CivilianAirport instance
func CreateORMCivilianAirport(civilianairport *CivilianAirport) {
	civilianairport.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCivilianAirport(civilianairport)
	}
}

// DeleteORMCivilianAirport enables dynamic staging of a CivilianAirport instance
func DeleteORMCivilianAirport(civilianairport *CivilianAirport) {
	civilianairport.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCivilianAirport(civilianairport)
	}
}

// for satisfaction of GongStruct interface
func (civilianairport *CivilianAirport) GetName() (res string) {
	return civilianairport.Name
}

func (civilianairport *CivilianAirport) GetFields() (res []string) {
	// list of fields 
	res = []string{"Lat", "Lng", "TechName", "Name",  }
	return
}

func (civilianairport *CivilianAirport) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Lat":
		res = fmt.Sprintf("%f", civilianairport.Lat)
	case "Lng":
		res = fmt.Sprintf("%f", civilianairport.Lng)
	case "TechName":
		res = civilianairport.TechName
	case "Name":
		res = civilianairport.Name
	}
	return
}

func (stage *StageStruct) getLinerOrderedStructWithNameField() []*Liner {
	// have alphabetical order generation
	linerOrdered := []*Liner{}
	for liner := range stage.Liners {
		linerOrdered = append(linerOrdered, liner)
	}
	sort.Slice(linerOrdered[:], func(i, j int) bool {
		return linerOrdered[i].Name < linerOrdered[j].Name
	})
	return linerOrdered
}

// Stage puts liner to the model stage
func (liner *Liner) Stage() *Liner {
	Stage.Liners[liner] = __member
	Stage.Liners_mapString[liner.Name] = liner

	return liner
}

// Unstage removes liner off the model stage
func (liner *Liner) Unstage() *Liner {
	delete(Stage.Liners, liner)
	delete(Stage.Liners_mapString, liner.Name)
	return liner
}

// commit liner to the back repo (if it is already staged)
func (liner *Liner) Commit() *Liner {
	if _, ok := Stage.Liners[liner]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLiner(liner)
		}
	}
	return liner
}

// Checkout liner to the back repo (if it is already staged)
func (liner *Liner) Checkout() *Liner {
	if _, ok := Stage.Liners[liner]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLiner(liner)
		}
	}
	return liner
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of liner to the model stage
func (liner *Liner) StageCopy() *Liner {
	_liner := new(Liner)
	*_liner = *liner
	_liner.Stage()
	return _liner
}

// StageAndCommit appends liner to the model stage and commit to the orm repo
func (liner *Liner) StageAndCommit() *Liner {
	liner.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLiner(liner)
	}
	return liner
}

// DeleteStageAndCommit appends liner to the model stage and commit to the orm repo
func (liner *Liner) DeleteStageAndCommit() *Liner {
	liner.Unstage()
	DeleteORMLiner(liner)
	return liner
}

// StageCopyAndCommit appends a copy of liner to the model stage and commit to the orm repo
func (liner *Liner) StageCopyAndCommit() *Liner {
	_liner := new(Liner)
	*_liner = *liner
	_liner.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLiner(liner)
	}
	return _liner
}

// CreateORMLiner enables dynamic staging of a Liner instance
func CreateORMLiner(liner *Liner) {
	liner.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLiner(liner)
	}
}

// DeleteORMLiner enables dynamic staging of a Liner instance
func DeleteORMLiner(liner *Liner) {
	liner.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLiner(liner)
	}
}

// for satisfaction of GongStruct interface
func (liner *Liner) GetName() (res string) {
	return liner.Name
}

func (liner *Liner) GetFields() (res []string) {
	// list of fields 
	res = []string{"Name", "Lat", "Lng", "Heading", "Level", "Speed", "TechName", "State", "TargetHeading", "TargetLocationLat", "TargetLocationLng", "DistanceToTarget", "MaxRotationalSpeed", "VerticalSpeed", "Timestampstring", "ReporingLine",  }
	return
}

func (liner *Liner) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = liner.Name
	case "Lat":
		res = fmt.Sprintf("%f", liner.Lat)
	case "Lng":
		res = fmt.Sprintf("%f", liner.Lng)
	case "Heading":
		res = fmt.Sprintf("%f", liner.Heading)
	case "Level":
		res = fmt.Sprintf("%f", liner.Level)
	case "Speed":
		res = fmt.Sprintf("%f", liner.Speed)
	case "TechName":
		res = liner.TechName
	case "State":
		res = liner.State.ToCodeString()
	case "TargetHeading":
		res = fmt.Sprintf("%f", liner.TargetHeading)
	case "TargetLocationLat":
		res = fmt.Sprintf("%f", liner.TargetLocationLat)
	case "TargetLocationLng":
		res = fmt.Sprintf("%f", liner.TargetLocationLng)
	case "DistanceToTarget":
		res = fmt.Sprintf("%f", liner.DistanceToTarget)
	case "MaxRotationalSpeed":
		res = fmt.Sprintf("%f", liner.MaxRotationalSpeed)
	case "VerticalSpeed":
		res = fmt.Sprintf("%f", liner.VerticalSpeed)
	case "Timestampstring":
		res = liner.Timestampstring
	case "ReporingLine":
		if liner.ReporingLine != nil {
			res = liner.ReporingLine.Name
		}
	}
	return
}

func (stage *StageStruct) getMessageOrderedStructWithNameField() []*Message {
	// have alphabetical order generation
	messageOrdered := []*Message{}
	for message := range stage.Messages {
		messageOrdered = append(messageOrdered, message)
	}
	sort.Slice(messageOrdered[:], func(i, j int) bool {
		return messageOrdered[i].Name < messageOrdered[j].Name
	})
	return messageOrdered
}

// Stage puts message to the model stage
func (message *Message) Stage() *Message {
	Stage.Messages[message] = __member
	Stage.Messages_mapString[message.Name] = message

	return message
}

// Unstage removes message off the model stage
func (message *Message) Unstage() *Message {
	delete(Stage.Messages, message)
	delete(Stage.Messages_mapString, message.Name)
	return message
}

// commit message to the back repo (if it is already staged)
func (message *Message) Commit() *Message {
	if _, ok := Stage.Messages[message]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMessage(message)
		}
	}
	return message
}

// Checkout message to the back repo (if it is already staged)
func (message *Message) Checkout() *Message {
	if _, ok := Stage.Messages[message]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMessage(message)
		}
	}
	return message
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of message to the model stage
func (message *Message) StageCopy() *Message {
	_message := new(Message)
	*_message = *message
	_message.Stage()
	return _message
}

// StageAndCommit appends message to the model stage and commit to the orm repo
func (message *Message) StageAndCommit() *Message {
	message.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMessage(message)
	}
	return message
}

// DeleteStageAndCommit appends message to the model stage and commit to the orm repo
func (message *Message) DeleteStageAndCommit() *Message {
	message.Unstage()
	DeleteORMMessage(message)
	return message
}

// StageCopyAndCommit appends a copy of message to the model stage and commit to the orm repo
func (message *Message) StageCopyAndCommit() *Message {
	_message := new(Message)
	*_message = *message
	_message.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMessage(message)
	}
	return _message
}

// CreateORMMessage enables dynamic staging of a Message instance
func CreateORMMessage(message *Message) {
	message.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMessage(message)
	}
}

// DeleteORMMessage enables dynamic staging of a Message instance
func DeleteORMMessage(message *Message) {
	message.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMessage(message)
	}
}

// for satisfaction of GongStruct interface
func (message *Message) GetName() (res string) {
	return message.Name
}

func (message *Message) GetFields() (res []string) {
	// list of fields 
	res = []string{"Lat", "Lng", "Heading", "Level", "Speed", "TechName", "State", "Name", "TargetLocationLat", "TargetLocationLng", "DistanceToTarget", "Timestampstring", "DurationSinceSimulationStart", "Timestampstartstring", "Source", "Destination", "Content", "About_string", "Display",  }
	return
}

func (message *Message) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Lat":
		res = fmt.Sprintf("%f", message.Lat)
	case "Lng":
		res = fmt.Sprintf("%f", message.Lng)
	case "Heading":
		res = fmt.Sprintf("%f", message.Heading)
	case "Level":
		res = fmt.Sprintf("%f", message.Level)
	case "Speed":
		res = fmt.Sprintf("%f", message.Speed)
	case "TechName":
		res = message.TechName
	case "State":
		res = message.State.ToCodeString()
	case "Name":
		res = message.Name
	case "TargetLocationLat":
		res = fmt.Sprintf("%f", message.TargetLocationLat)
	case "TargetLocationLng":
		res = fmt.Sprintf("%f", message.TargetLocationLng)
	case "DistanceToTarget":
		res = fmt.Sprintf("%f", message.DistanceToTarget)
	case "Timestampstring":
		res = message.Timestampstring
	case "DurationSinceSimulationStart":
		res = fmt.Sprintf("%d", message.DurationSinceSimulationStart)
	case "Timestampstartstring":
		res = message.Timestampstartstring
	case "Source":
		res = message.Source
	case "Destination":
		res = message.Destination
	case "Content":
		res = message.Content
	case "About_string":
		res = message.About_string
	case "Display":
		res = fmt.Sprintf("%t", message.Display)
	}
	return
}

func (stage *StageStruct) getOpsLineOrderedStructWithNameField() []*OpsLine {
	// have alphabetical order generation
	opslineOrdered := []*OpsLine{}
	for opsline := range stage.OpsLines {
		opslineOrdered = append(opslineOrdered, opsline)
	}
	sort.Slice(opslineOrdered[:], func(i, j int) bool {
		return opslineOrdered[i].Name < opslineOrdered[j].Name
	})
	return opslineOrdered
}

// Stage puts opsline to the model stage
func (opsline *OpsLine) Stage() *OpsLine {
	Stage.OpsLines[opsline] = __member
	Stage.OpsLines_mapString[opsline.Name] = opsline

	return opsline
}

// Unstage removes opsline off the model stage
func (opsline *OpsLine) Unstage() *OpsLine {
	delete(Stage.OpsLines, opsline)
	delete(Stage.OpsLines_mapString, opsline.Name)
	return opsline
}

// commit opsline to the back repo (if it is already staged)
func (opsline *OpsLine) Commit() *OpsLine {
	if _, ok := Stage.OpsLines[opsline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitOpsLine(opsline)
		}
	}
	return opsline
}

// Checkout opsline to the back repo (if it is already staged)
func (opsline *OpsLine) Checkout() *OpsLine {
	if _, ok := Stage.OpsLines[opsline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutOpsLine(opsline)
		}
	}
	return opsline
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of opsline to the model stage
func (opsline *OpsLine) StageCopy() *OpsLine {
	_opsline := new(OpsLine)
	*_opsline = *opsline
	_opsline.Stage()
	return _opsline
}

// StageAndCommit appends opsline to the model stage and commit to the orm repo
func (opsline *OpsLine) StageAndCommit() *OpsLine {
	opsline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOpsLine(opsline)
	}
	return opsline
}

// DeleteStageAndCommit appends opsline to the model stage and commit to the orm repo
func (opsline *OpsLine) DeleteStageAndCommit() *OpsLine {
	opsline.Unstage()
	DeleteORMOpsLine(opsline)
	return opsline
}

// StageCopyAndCommit appends a copy of opsline to the model stage and commit to the orm repo
func (opsline *OpsLine) StageCopyAndCommit() *OpsLine {
	_opsline := new(OpsLine)
	*_opsline = *opsline
	_opsline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOpsLine(opsline)
	}
	return _opsline
}

// CreateORMOpsLine enables dynamic staging of a OpsLine instance
func CreateORMOpsLine(opsline *OpsLine) {
	opsline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOpsLine(opsline)
	}
}

// DeleteORMOpsLine enables dynamic staging of a OpsLine instance
func DeleteORMOpsLine(opsline *OpsLine) {
	opsline.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMOpsLine(opsline)
	}
}

// for satisfaction of GongStruct interface
func (opsline *OpsLine) GetName() (res string) {
	return opsline.Name
}

func (opsline *OpsLine) GetFields() (res []string) {
	// list of fields 
	res = []string{"IsTransmitting", "TransmissionMessage", "IsTransmittingBackward", "TransmissionMessageBackward", "TechName", "Scenario", "State", "Name",  }
	return
}

func (opsline *OpsLine) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "IsTransmitting":
		res = fmt.Sprintf("%t", opsline.IsTransmitting)
	case "TransmissionMessage":
		res = opsline.TransmissionMessage
	case "IsTransmittingBackward":
		res = fmt.Sprintf("%t", opsline.IsTransmittingBackward)
	case "TransmissionMessageBackward":
		res = opsline.TransmissionMessageBackward
	case "TechName":
		res = opsline.TechName
	case "Scenario":
		if opsline.Scenario != nil {
			res = opsline.Scenario.Name
		}
	case "State":
		res = opsline.State.ToCodeString()
	case "Name":
		res = opsline.Name
	}
	return
}

func (stage *StageStruct) getOrderOrderedStructWithNameField() []*Order {
	// have alphabetical order generation
	orderOrdered := []*Order{}
	for order := range stage.Orders {
		orderOrdered = append(orderOrdered, order)
	}
	sort.Slice(orderOrdered[:], func(i, j int) bool {
		return orderOrdered[i].Name < orderOrdered[j].Name
	})
	return orderOrdered
}

// Stage puts order to the model stage
func (order *Order) Stage() *Order {
	Stage.Orders[order] = __member
	Stage.Orders_mapString[order.Name] = order

	return order
}

// Unstage removes order off the model stage
func (order *Order) Unstage() *Order {
	delete(Stage.Orders, order)
	delete(Stage.Orders_mapString, order.Name)
	return order
}

// commit order to the back repo (if it is already staged)
func (order *Order) Commit() *Order {
	if _, ok := Stage.Orders[order]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitOrder(order)
		}
	}
	return order
}

// Checkout order to the back repo (if it is already staged)
func (order *Order) Checkout() *Order {
	if _, ok := Stage.Orders[order]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutOrder(order)
		}
	}
	return order
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of order to the model stage
func (order *Order) StageCopy() *Order {
	_order := new(Order)
	*_order = *order
	_order.Stage()
	return _order
}

// StageAndCommit appends order to the model stage and commit to the orm repo
func (order *Order) StageAndCommit() *Order {
	order.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOrder(order)
	}
	return order
}

// DeleteStageAndCommit appends order to the model stage and commit to the orm repo
func (order *Order) DeleteStageAndCommit() *Order {
	order.Unstage()
	DeleteORMOrder(order)
	return order
}

// StageCopyAndCommit appends a copy of order to the model stage and commit to the orm repo
func (order *Order) StageCopyAndCommit() *Order {
	_order := new(Order)
	*_order = *order
	_order.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOrder(order)
	}
	return _order
}

// CreateORMOrder enables dynamic staging of a Order instance
func CreateORMOrder(order *Order) {
	order.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMOrder(order)
	}
}

// DeleteORMOrder enables dynamic staging of a Order instance
func DeleteORMOrder(order *Order) {
	order.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMOrder(order)
	}
}

// for satisfaction of GongStruct interface
func (order *Order) GetName() (res string) {
	return order.Name
}

func (order *Order) GetFields() (res []string) {
	// list of fields 
	res = []string{"Name", "Duration", "OrderMessage", "Number", "Type", "Target", "TargetLat", "TargetLng",  }
	return
}

func (order *Order) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = order.Name
	case "Duration":
		res = fmt.Sprintf("%d", order.Duration)
	case "OrderMessage":
		res = order.OrderMessage
	case "Number":
		res = fmt.Sprintf("%d", order.Number)
	case "Type":
		res = order.Type.ToCodeString()
	case "Target":
		if order.Target != nil {
			res = order.Target.Name
		}
	case "TargetLat":
		res = fmt.Sprintf("%f", order.TargetLat)
	case "TargetLng":
		res = fmt.Sprintf("%f", order.TargetLng)
	}
	return
}

func (stage *StageStruct) getRadarOrderedStructWithNameField() []*Radar {
	// have alphabetical order generation
	radarOrdered := []*Radar{}
	for radar := range stage.Radars {
		radarOrdered = append(radarOrdered, radar)
	}
	sort.Slice(radarOrdered[:], func(i, j int) bool {
		return radarOrdered[i].Name < radarOrdered[j].Name
	})
	return radarOrdered
}

// Stage puts radar to the model stage
func (radar *Radar) Stage() *Radar {
	Stage.Radars[radar] = __member
	Stage.Radars_mapString[radar.Name] = radar

	return radar
}

// Unstage removes radar off the model stage
func (radar *Radar) Unstage() *Radar {
	delete(Stage.Radars, radar)
	delete(Stage.Radars_mapString, radar.Name)
	return radar
}

// commit radar to the back repo (if it is already staged)
func (radar *Radar) Commit() *Radar {
	if _, ok := Stage.Radars[radar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitRadar(radar)
		}
	}
	return radar
}

// Checkout radar to the back repo (if it is already staged)
func (radar *Radar) Checkout() *Radar {
	if _, ok := Stage.Radars[radar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutRadar(radar)
		}
	}
	return radar
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of radar to the model stage
func (radar *Radar) StageCopy() *Radar {
	_radar := new(Radar)
	*_radar = *radar
	_radar.Stage()
	return _radar
}

// StageAndCommit appends radar to the model stage and commit to the orm repo
func (radar *Radar) StageAndCommit() *Radar {
	radar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRadar(radar)
	}
	return radar
}

// DeleteStageAndCommit appends radar to the model stage and commit to the orm repo
func (radar *Radar) DeleteStageAndCommit() *Radar {
	radar.Unstage()
	DeleteORMRadar(radar)
	return radar
}

// StageCopyAndCommit appends a copy of radar to the model stage and commit to the orm repo
func (radar *Radar) StageCopyAndCommit() *Radar {
	_radar := new(Radar)
	*_radar = *radar
	_radar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRadar(radar)
	}
	return _radar
}

// CreateORMRadar enables dynamic staging of a Radar instance
func CreateORMRadar(radar *Radar) {
	radar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRadar(radar)
	}
}

// DeleteORMRadar enables dynamic staging of a Radar instance
func DeleteORMRadar(radar *Radar) {
	radar.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMRadar(radar)
	}
}

// for satisfaction of GongStruct interface
func (radar *Radar) GetName() (res string) {
	return radar.Name
}

func (radar *Radar) GetFields() (res []string) {
	// list of fields 
	res = []string{"TechName", "State", "Name", "Lat", "Lng", "Range",  }
	return
}

func (radar *Radar) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "TechName":
		res = radar.TechName
	case "State":
		res = radar.State.ToCodeString()
	case "Name":
		res = radar.Name
	case "Lat":
		res = fmt.Sprintf("%f", radar.Lat)
	case "Lng":
		res = fmt.Sprintf("%f", radar.Lng)
	case "Range":
		res = fmt.Sprintf("%f", radar.Range)
	}
	return
}

func (stage *StageStruct) getReportOrderedStructWithNameField() []*Report {
	// have alphabetical order generation
	reportOrdered := []*Report{}
	for report := range stage.Reports {
		reportOrdered = append(reportOrdered, report)
	}
	sort.Slice(reportOrdered[:], func(i, j int) bool {
		return reportOrdered[i].Name < reportOrdered[j].Name
	})
	return reportOrdered
}

// Stage puts report to the model stage
func (report *Report) Stage() *Report {
	Stage.Reports[report] = __member
	Stage.Reports_mapString[report.Name] = report

	return report
}

// Unstage removes report off the model stage
func (report *Report) Unstage() *Report {
	delete(Stage.Reports, report)
	delete(Stage.Reports_mapString, report.Name)
	return report
}

// commit report to the back repo (if it is already staged)
func (report *Report) Commit() *Report {
	if _, ok := Stage.Reports[report]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitReport(report)
		}
	}
	return report
}

// Checkout report to the back repo (if it is already staged)
func (report *Report) Checkout() *Report {
	if _, ok := Stage.Reports[report]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutReport(report)
		}
	}
	return report
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of report to the model stage
func (report *Report) StageCopy() *Report {
	_report := new(Report)
	*_report = *report
	_report.Stage()
	return _report
}

// StageAndCommit appends report to the model stage and commit to the orm repo
func (report *Report) StageAndCommit() *Report {
	report.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMReport(report)
	}
	return report
}

// DeleteStageAndCommit appends report to the model stage and commit to the orm repo
func (report *Report) DeleteStageAndCommit() *Report {
	report.Unstage()
	DeleteORMReport(report)
	return report
}

// StageCopyAndCommit appends a copy of report to the model stage and commit to the orm repo
func (report *Report) StageCopyAndCommit() *Report {
	_report := new(Report)
	*_report = *report
	_report.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMReport(report)
	}
	return _report
}

// CreateORMReport enables dynamic staging of a Report instance
func CreateORMReport(report *Report) {
	report.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMReport(report)
	}
}

// DeleteORMReport enables dynamic staging of a Report instance
func DeleteORMReport(report *Report) {
	report.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMReport(report)
	}
}

// for satisfaction of GongStruct interface
func (report *Report) GetName() (res string) {
	return report.Name
}

func (report *Report) GetFields() (res []string) {
	// list of fields 
	res = []string{"Name", "Duration", "ReportMessage", "Number", "Type", "About", "OpsLine",  }
	return
}

func (report *Report) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = report.Name
	case "Duration":
		res = fmt.Sprintf("%d", report.Duration)
	case "ReportMessage":
		res = report.ReportMessage
	case "Number":
		res = fmt.Sprintf("%d", report.Number)
	case "Type":
		res = report.Type.ToCodeString()
	case "About":
		if report.About != nil {
			res = report.About.Name
		}
	case "OpsLine":
		if report.OpsLine != nil {
			res = report.OpsLine.Name
		}
	}
	return
}

func (stage *StageStruct) getSatelliteOrderedStructWithNameField() []*Satellite {
	// have alphabetical order generation
	satelliteOrdered := []*Satellite{}
	for satellite := range stage.Satellites {
		satelliteOrdered = append(satelliteOrdered, satellite)
	}
	sort.Slice(satelliteOrdered[:], func(i, j int) bool {
		return satelliteOrdered[i].Name < satelliteOrdered[j].Name
	})
	return satelliteOrdered
}

// Stage puts satellite to the model stage
func (satellite *Satellite) Stage() *Satellite {
	Stage.Satellites[satellite] = __member
	Stage.Satellites_mapString[satellite.Name] = satellite

	return satellite
}

// Unstage removes satellite off the model stage
func (satellite *Satellite) Unstage() *Satellite {
	delete(Stage.Satellites, satellite)
	delete(Stage.Satellites_mapString, satellite.Name)
	return satellite
}

// commit satellite to the back repo (if it is already staged)
func (satellite *Satellite) Commit() *Satellite {
	if _, ok := Stage.Satellites[satellite]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitSatellite(satellite)
		}
	}
	return satellite
}

// Checkout satellite to the back repo (if it is already staged)
func (satellite *Satellite) Checkout() *Satellite {
	if _, ok := Stage.Satellites[satellite]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutSatellite(satellite)
		}
	}
	return satellite
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of satellite to the model stage
func (satellite *Satellite) StageCopy() *Satellite {
	_satellite := new(Satellite)
	*_satellite = *satellite
	_satellite.Stage()
	return _satellite
}

// StageAndCommit appends satellite to the model stage and commit to the orm repo
func (satellite *Satellite) StageAndCommit() *Satellite {
	satellite.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSatellite(satellite)
	}
	return satellite
}

// DeleteStageAndCommit appends satellite to the model stage and commit to the orm repo
func (satellite *Satellite) DeleteStageAndCommit() *Satellite {
	satellite.Unstage()
	DeleteORMSatellite(satellite)
	return satellite
}

// StageCopyAndCommit appends a copy of satellite to the model stage and commit to the orm repo
func (satellite *Satellite) StageCopyAndCommit() *Satellite {
	_satellite := new(Satellite)
	*_satellite = *satellite
	_satellite.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSatellite(satellite)
	}
	return _satellite
}

// CreateORMSatellite enables dynamic staging of a Satellite instance
func CreateORMSatellite(satellite *Satellite) {
	satellite.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMSatellite(satellite)
	}
}

// DeleteORMSatellite enables dynamic staging of a Satellite instance
func DeleteORMSatellite(satellite *Satellite) {
	satellite.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMSatellite(satellite)
	}
}

// for satisfaction of GongStruct interface
func (satellite *Satellite) GetName() (res string) {
	return satellite.Name
}

func (satellite *Satellite) GetFields() (res []string) {
	// list of fields 
	res = []string{"Lat", "Lng", "Heading", "Level", "Speed", "Line1", "Line2", "TechName", "Name", "VerticalSpeed", "Timestampstring",  }
	return
}

func (satellite *Satellite) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Lat":
		res = fmt.Sprintf("%f", satellite.Lat)
	case "Lng":
		res = fmt.Sprintf("%f", satellite.Lng)
	case "Heading":
		res = fmt.Sprintf("%f", satellite.Heading)
	case "Level":
		res = fmt.Sprintf("%f", satellite.Level)
	case "Speed":
		res = fmt.Sprintf("%f", satellite.Speed)
	case "Line1":
		res = satellite.Line1
	case "Line2":
		res = satellite.Line2
	case "TechName":
		res = satellite.TechName
	case "Name":
		res = satellite.Name
	case "VerticalSpeed":
		res = fmt.Sprintf("%f", satellite.VerticalSpeed)
	case "Timestampstring":
		res = satellite.Timestampstring
	}
	return
}

func (stage *StageStruct) getScenarioOrderedStructWithNameField() []*Scenario {
	// have alphabetical order generation
	scenarioOrdered := []*Scenario{}
	for scenario := range stage.Scenarios {
		scenarioOrdered = append(scenarioOrdered, scenario)
	}
	sort.Slice(scenarioOrdered[:], func(i, j int) bool {
		return scenarioOrdered[i].Name < scenarioOrdered[j].Name
	})
	return scenarioOrdered
}

// Stage puts scenario to the model stage
func (scenario *Scenario) Stage() *Scenario {
	Stage.Scenarios[scenario] = __member
	Stage.Scenarios_mapString[scenario.Name] = scenario

	return scenario
}

// Unstage removes scenario off the model stage
func (scenario *Scenario) Unstage() *Scenario {
	delete(Stage.Scenarios, scenario)
	delete(Stage.Scenarios_mapString, scenario.Name)
	return scenario
}

// commit scenario to the back repo (if it is already staged)
func (scenario *Scenario) Commit() *Scenario {
	if _, ok := Stage.Scenarios[scenario]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitScenario(scenario)
		}
	}
	return scenario
}

// Checkout scenario to the back repo (if it is already staged)
func (scenario *Scenario) Checkout() *Scenario {
	if _, ok := Stage.Scenarios[scenario]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutScenario(scenario)
		}
	}
	return scenario
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of scenario to the model stage
func (scenario *Scenario) StageCopy() *Scenario {
	_scenario := new(Scenario)
	*_scenario = *scenario
	_scenario.Stage()
	return _scenario
}

// StageAndCommit appends scenario to the model stage and commit to the orm repo
func (scenario *Scenario) StageAndCommit() *Scenario {
	scenario.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMScenario(scenario)
	}
	return scenario
}

// DeleteStageAndCommit appends scenario to the model stage and commit to the orm repo
func (scenario *Scenario) DeleteStageAndCommit() *Scenario {
	scenario.Unstage()
	DeleteORMScenario(scenario)
	return scenario
}

// StageCopyAndCommit appends a copy of scenario to the model stage and commit to the orm repo
func (scenario *Scenario) StageCopyAndCommit() *Scenario {
	_scenario := new(Scenario)
	*_scenario = *scenario
	_scenario.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMScenario(scenario)
	}
	return _scenario
}

// CreateORMScenario enables dynamic staging of a Scenario instance
func CreateORMScenario(scenario *Scenario) {
	scenario.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMScenario(scenario)
	}
}

// DeleteORMScenario enables dynamic staging of a Scenario instance
func DeleteORMScenario(scenario *Scenario) {
	scenario.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMScenario(scenario)
	}
}

// for satisfaction of GongStruct interface
func (scenario *Scenario) GetName() (res string) {
	return scenario.Name
}

func (scenario *Scenario) GetFields() (res []string) {
	// list of fields 
	res = []string{"Name", "Lat", "Lng", "ZoomLevel", "MessageVisualSpeed",  }
	return
}

func (scenario *Scenario) GetFieldStringValue(fieldName string) (res string) {
	switch fieldName {
	// string value of fields
	case "Name":
		res = scenario.Name
	case "Lat":
		res = fmt.Sprintf("%f", scenario.Lat)
	case "Lng":
		res = fmt.Sprintf("%f", scenario.Lng)
	case "ZoomLevel":
		res = fmt.Sprintf("%f", scenario.ZoomLevel)
	case "MessageVisualSpeed":
		res = fmt.Sprintf("%f", scenario.MessageVisualSpeed)
	}
	return
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCivilianAirport(CivilianAirport *CivilianAirport)
	CreateORMLiner(Liner *Liner)
	CreateORMMessage(Message *Message)
	CreateORMOpsLine(OpsLine *OpsLine)
	CreateORMOrder(Order *Order)
	CreateORMRadar(Radar *Radar)
	CreateORMReport(Report *Report)
	CreateORMSatellite(Satellite *Satellite)
	CreateORMScenario(Scenario *Scenario)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCivilianAirport(CivilianAirport *CivilianAirport)
	DeleteORMLiner(Liner *Liner)
	DeleteORMMessage(Message *Message)
	DeleteORMOpsLine(OpsLine *OpsLine)
	DeleteORMOrder(Order *Order)
	DeleteORMRadar(Radar *Radar)
	DeleteORMReport(Report *Report)
	DeleteORMSatellite(Satellite *Satellite)
	DeleteORMScenario(Scenario *Scenario)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.CivilianAirports = make(map[*CivilianAirport]struct{})
	stage.CivilianAirports_mapString = make(map[string]*CivilianAirport)

	stage.Liners = make(map[*Liner]struct{})
	stage.Liners_mapString = make(map[string]*Liner)

	stage.Messages = make(map[*Message]struct{})
	stage.Messages_mapString = make(map[string]*Message)

	stage.OpsLines = make(map[*OpsLine]struct{})
	stage.OpsLines_mapString = make(map[string]*OpsLine)

	stage.Orders = make(map[*Order]struct{})
	stage.Orders_mapString = make(map[string]*Order)

	stage.Radars = make(map[*Radar]struct{})
	stage.Radars_mapString = make(map[string]*Radar)

	stage.Reports = make(map[*Report]struct{})
	stage.Reports_mapString = make(map[string]*Report)

	stage.Satellites = make(map[*Satellite]struct{})
	stage.Satellites_mapString = make(map[string]*Satellite)

	stage.Scenarios = make(map[*Scenario]struct{})
	stage.Scenarios_mapString = make(map[string]*Scenario)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.CivilianAirports = nil
	stage.CivilianAirports_mapString = nil

	stage.Liners = nil
	stage.Liners_mapString = nil

	stage.Messages = nil
	stage.Messages_mapString = nil

	stage.OpsLines = nil
	stage.OpsLines_mapString = nil

	stage.Orders = nil
	stage.Orders_mapString = nil

	stage.Radars = nil
	stage.Radars_mapString = nil

	stage.Reports = nil
	stage.Reports_mapString = nil

	stage.Satellites = nil
	stage.Satellites_mapString = nil

	stage.Scenarios = nil
	stage.Scenarios_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_CivilianAirport_Identifiers := make(map[*CivilianAirport]string)
	_ = map_CivilianAirport_Identifiers

	civilianairportOrdered := []*CivilianAirport{}
	for civilianairport := range stage.CivilianAirports {
		civilianairportOrdered = append(civilianairportOrdered, civilianairport)
	}
	sort.Slice(civilianairportOrdered[:], func(i, j int) bool {
		return civilianairportOrdered[i].Name < civilianairportOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of CivilianAirport")
	for idx, civilianairport := range civilianairportOrdered {

		id = generatesIdentifier("CivilianAirport", idx, civilianairport.Name)
		map_CivilianAirport_Identifiers[civilianairport] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "CivilianAirport")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", civilianairport.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// CivilianAirport %s values setup", civilianairport.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", civilianairport.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", civilianairport.Lng))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(civilianairport.TechName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(civilianairport.Name))
		initializerStatements += setValueField

	}

	map_Liner_Identifiers := make(map[*Liner]string)
	_ = map_Liner_Identifiers

	linerOrdered := []*Liner{}
	for liner := range stage.Liners {
		linerOrdered = append(linerOrdered, liner)
	}
	sort.Slice(linerOrdered[:], func(i, j int) bool {
		return linerOrdered[i].Name < linerOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Liner")
	for idx, liner := range linerOrdered {

		id = generatesIdentifier("Liner", idx, liner.Name)
		map_Liner_Identifiers[liner] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Liner")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", liner.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Liner %s values setup", liner.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(liner.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.Lng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Heading")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.Heading))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Level")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.Level))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.Speed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(liner.TechName))
		initializerStatements += setValueField

		if liner.State != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "State")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+liner.State.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetHeading")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.TargetHeading))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetLocationLat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.TargetLocationLat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetLocationLng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.TargetLocationLng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DistanceToTarget")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.DistanceToTarget))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MaxRotationalSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.MaxRotationalSpeed))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "VerticalSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", liner.VerticalSpeed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Timestampstring")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(liner.Timestampstring))
		initializerStatements += setValueField

	}

	map_Message_Identifiers := make(map[*Message]string)
	_ = map_Message_Identifiers

	messageOrdered := []*Message{}
	for message := range stage.Messages {
		messageOrdered = append(messageOrdered, message)
	}
	sort.Slice(messageOrdered[:], func(i, j int) bool {
		return messageOrdered[i].Name < messageOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Message")
	for idx, message := range messageOrdered {

		id = generatesIdentifier("Message", idx, message.Name)
		map_Message_Identifiers[message] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Message")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", message.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Message %s values setup", message.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.Lng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Heading")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.Heading))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Level")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.Level))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.Speed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.TechName))
		initializerStatements += setValueField

		if message.State != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "State")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+message.State.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetLocationLat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.TargetLocationLat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetLocationLng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.TargetLocationLng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DistanceToTarget")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", message.DistanceToTarget))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Timestampstring")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.Timestampstring))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DurationSinceSimulationStart")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", message.DurationSinceSimulationStart))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Timestampstartstring")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.Timestampstartstring))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Source")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.Source))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Destination")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.Destination))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Content")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.Content))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "About_string")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(message.About_string))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Display")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", message.Display))
		initializerStatements += setValueField

	}

	map_OpsLine_Identifiers := make(map[*OpsLine]string)
	_ = map_OpsLine_Identifiers

	opslineOrdered := []*OpsLine{}
	for opsline := range stage.OpsLines {
		opslineOrdered = append(opslineOrdered, opsline)
	}
	sort.Slice(opslineOrdered[:], func(i, j int) bool {
		return opslineOrdered[i].Name < opslineOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of OpsLine")
	for idx, opsline := range opslineOrdered {

		id = generatesIdentifier("OpsLine", idx, opsline.Name)
		map_OpsLine_Identifiers[opsline] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "OpsLine")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", opsline.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// OpsLine %s values setup", opsline.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsTransmitting")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", opsline.IsTransmitting))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TransmissionMessage")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(opsline.TransmissionMessage))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsTransmittingBackward")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", opsline.IsTransmittingBackward))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TransmissionMessageBackward")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(opsline.TransmissionMessageBackward))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(opsline.TechName))
		initializerStatements += setValueField

		if opsline.State != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "State")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+opsline.State.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(opsline.Name))
		initializerStatements += setValueField

	}

	map_Order_Identifiers := make(map[*Order]string)
	_ = map_Order_Identifiers

	orderOrdered := []*Order{}
	for order := range stage.Orders {
		orderOrdered = append(orderOrdered, order)
	}
	sort.Slice(orderOrdered[:], func(i, j int) bool {
		return orderOrdered[i].Name < orderOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Order")
	for idx, order := range orderOrdered {

		id = generatesIdentifier("Order", idx, order.Name)
		map_Order_Identifiers[order] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Order")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", order.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Order %s values setup", order.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(order.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", order.Duration))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OrderMessage")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(order.OrderMessage))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Number")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", order.Number))
		initializerStatements += setValueField

		if order.Type != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+order.Type.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetLat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", order.TargetLat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TargetLng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", order.TargetLng))
		initializerStatements += setValueField

	}

	map_Radar_Identifiers := make(map[*Radar]string)
	_ = map_Radar_Identifiers

	radarOrdered := []*Radar{}
	for radar := range stage.Radars {
		radarOrdered = append(radarOrdered, radar)
	}
	sort.Slice(radarOrdered[:], func(i, j int) bool {
		return radarOrdered[i].Name < radarOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Radar")
	for idx, radar := range radarOrdered {

		id = generatesIdentifier("Radar", idx, radar.Name)
		map_Radar_Identifiers[radar] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Radar")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", radar.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Radar %s values setup", radar.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(radar.TechName))
		initializerStatements += setValueField

		if radar.State != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "State")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+radar.State.ToCodeString())
			initializerStatements += setValueField
		}

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(radar.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", radar.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", radar.Lng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Range")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", radar.Range))
		initializerStatements += setValueField

	}

	map_Report_Identifiers := make(map[*Report]string)
	_ = map_Report_Identifiers

	reportOrdered := []*Report{}
	for report := range stage.Reports {
		reportOrdered = append(reportOrdered, report)
	}
	sort.Slice(reportOrdered[:], func(i, j int) bool {
		return reportOrdered[i].Name < reportOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Report")
	for idx, report := range reportOrdered {

		id = generatesIdentifier("Report", idx, report.Name)
		map_Report_Identifiers[report] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Report")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", report.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Report %s values setup", report.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(report.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Duration")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", report.Duration))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ReportMessage")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(report.ReportMessage))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Number")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", report.Number))
		initializerStatements += setValueField

		if report.Type != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+report.Type.ToCodeString())
			initializerStatements += setValueField
		}

	}

	map_Satellite_Identifiers := make(map[*Satellite]string)
	_ = map_Satellite_Identifiers

	satelliteOrdered := []*Satellite{}
	for satellite := range stage.Satellites {
		satelliteOrdered = append(satelliteOrdered, satellite)
	}
	sort.Slice(satelliteOrdered[:], func(i, j int) bool {
		return satelliteOrdered[i].Name < satelliteOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Satellite")
	for idx, satellite := range satelliteOrdered {

		id = generatesIdentifier("Satellite", idx, satellite.Name)
		map_Satellite_Identifiers[satellite] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Satellite")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", satellite.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Satellite %s values setup", satellite.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", satellite.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", satellite.Lng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Heading")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", satellite.Heading))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Level")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", satellite.Level))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", satellite.Speed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Line1")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(satellite.Line1))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Line2")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(satellite.Line2))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TechName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(satellite.TechName))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(satellite.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "VerticalSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", satellite.VerticalSpeed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Timestampstring")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(satellite.Timestampstring))
		initializerStatements += setValueField

	}

	map_Scenario_Identifiers := make(map[*Scenario]string)
	_ = map_Scenario_Identifiers

	scenarioOrdered := []*Scenario{}
	for scenario := range stage.Scenarios {
		scenarioOrdered = append(scenarioOrdered, scenario)
	}
	sort.Slice(scenarioOrdered[:], func(i, j int) bool {
		return scenarioOrdered[i].Name < scenarioOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Scenario")
	for idx, scenario := range scenarioOrdered {

		id = generatesIdentifier("Scenario", idx, scenario.Name)
		map_Scenario_Identifiers[scenario] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Scenario")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", scenario.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Scenario %s values setup", scenario.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(scenario.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", scenario.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", scenario.Lng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ZoomLevel")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", scenario.ZoomLevel))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MessageVisualSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", scenario.MessageVisualSpeed))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, civilianairport := range civilianairportOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("CivilianAirport", idx, civilianairport.Name)
		map_CivilianAirport_Identifiers[civilianairport] = id

		// Initialisation of values
	}

	for idx, liner := range linerOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Liner", idx, liner.Name)
		map_Liner_Identifiers[liner] = id

		// Initialisation of values
		if liner.ReporingLine != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "ReporingLine")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_OpsLine_Identifiers[liner.ReporingLine])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, message := range messageOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Message", idx, message.Name)
		map_Message_Identifiers[message] = id

		// Initialisation of values
	}

	for idx, opsline := range opslineOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("OpsLine", idx, opsline.Name)
		map_OpsLine_Identifiers[opsline] = id

		// Initialisation of values
		if opsline.Scenario != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Scenario")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Scenario_Identifiers[opsline.Scenario])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, order := range orderOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Order", idx, order.Name)
		map_Order_Identifiers[order] = id

		// Initialisation of values
		if order.Target != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Target")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Liner_Identifiers[order.Target])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, radar := range radarOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Radar", idx, radar.Name)
		map_Radar_Identifiers[radar] = id

		// Initialisation of values
	}

	for idx, report := range reportOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Report", idx, report.Name)
		map_Report_Identifiers[report] = id

		// Initialisation of values
		if report.About != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "About")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Liner_Identifiers[report.About])
			pointersInitializesStatements += setPointerField
		}

		if report.OpsLine != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "OpsLine")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_OpsLine_Identifiers[report.OpsLine])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, satellite := range satelliteOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Satellite", idx, satellite.Name)
		map_Satellite_Identifiers[satellite] = id

		// Initialisation of values
	}

	for idx, scenario := range scenarioOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Scenario", idx, scenario.Name)
		map_Scenario_Identifiers[scenario] = id

		// Initialisation of values
	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
// Utility function for ConceptEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (conceptenum ConceptEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch conceptenum {
	// insertion code per enum code
	case Aircraft_:
		res = "Aircrafts"
	case Center_:
		res = "Centers"
	case Network_:
		res = "Networks"
	case Satellite_:
		res = "Satellites"
	case System_:
		res = "Systems"
	}
	return
}

func (conceptenum *ConceptEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "Aircrafts":
		*conceptenum = Aircraft_
	case "Centers":
		*conceptenum = Center_
	case "Networks":
		*conceptenum = Network_
	case "Satellites":
		*conceptenum = Satellite_
	case "Systems":
		*conceptenum = System_
	}
}

func (conceptenum *ConceptEnum) ToCodeString() (res string) {

	switch *conceptenum {
	// insertion code per enum code
	case Aircraft_:
		res = "Aircraft_"
	case Center_:
		res = "Center_"
	case Network_:
		res = "Network_"
	case Satellite_:
		res = "Satellite_"
	case System_:
		res = "System_"
	}
	return
}

// Utility function for LinerStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (linerstateenum LinerStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch linerstateenum {
	// insertion code per enum code
	case EN_ROUTE_NOMINAL:
		res = "EN_ROUTE_NOMINAL"
	case LANDED:
		res = "LANDED"
	}
	return
}

func (linerstateenum *LinerStateEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "EN_ROUTE_NOMINAL":
		*linerstateenum = EN_ROUTE_NOMINAL
	case "LANDED":
		*linerstateenum = LANDED
	}
}

func (linerstateenum *LinerStateEnum) ToCodeString() (res string) {

	switch *linerstateenum {
	// insertion code per enum code
	case EN_ROUTE_NOMINAL:
		res = "EN_ROUTE_NOMINAL"
	case LANDED:
		res = "LANDED"
	}
	return
}

// Utility function for MessageStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (messagestateenum MessageStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch messagestateenum {
	// insertion code per enum code
	case MESSAGE_ARRIVED:
		res = "MESSAGE_ARRIVED"
	case MESSAGE_EN_ROUTE:
		res = "MESSAGE_EN_ROUTE"
	}
	return
}

func (messagestateenum *MessageStateEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "MESSAGE_ARRIVED":
		*messagestateenum = MESSAGE_ARRIVED
	case "MESSAGE_EN_ROUTE":
		*messagestateenum = MESSAGE_EN_ROUTE
	}
}

func (messagestateenum *MessageStateEnum) ToCodeString() (res string) {

	switch *messagestateenum {
	// insertion code per enum code
	case MESSAGE_ARRIVED:
		res = "MESSAGE_ARRIVED"
	case MESSAGE_EN_ROUTE:
		res = "MESSAGE_EN_ROUTE"
	}
	return
}

// Utility function for OperationalLineStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (operationallinestateenum OperationalLineStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch operationallinestateenum {
	// insertion code per enum code
	case OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING"
	case OPS_COM_LINK_OPERATIONAL_LINE_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_WORKING"
	}
	return
}

func (operationallinestateenum *OperationalLineStateEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING":
		*operationallinestateenum = OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING
	case "OPS_COM_LINK_OPERATIONAL_LINE_WORKING":
		*operationallinestateenum = OPS_COM_LINK_OPERATIONAL_LINE_WORKING
	}
}

func (operationallinestateenum *OperationalLineStateEnum) ToCodeString() (res string) {

	switch *operationallinestateenum {
	// insertion code per enum code
	case OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING"
	case OPS_COM_LINK_OPERATIONAL_LINE_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_WORKING"
	}
	return
}

// Utility function for OrderEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (orderenum OrderEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch orderenum {
	// insertion code per enum code
	case TAKE_OFF:
		res = "TAKE_OFF"
	}
	return
}

func (orderenum *OrderEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "TAKE_OFF":
		*orderenum = TAKE_OFF
	}
}

func (orderenum *OrderEnum) ToCodeString() (res string) {

	switch *orderenum {
	// insertion code per enum code
	case TAKE_OFF:
		res = "TAKE_OFF"
	}
	return
}

// Utility function for RadarStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (radarstateenum RadarStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch radarstateenum {
	// insertion code per enum code
	case WORKING:
		res = "WORKING"
	}
	return
}

func (radarstateenum *RadarStateEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "WORKING":
		*radarstateenum = WORKING
	}
}

func (radarstateenum *RadarStateEnum) ToCodeString() (res string) {

	switch *radarstateenum {
	// insertion code per enum code
	case WORKING:
		res = "WORKING"
	}
	return
}

// Utility function for ReportEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (reportenum ReportEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch reportenum {
	// insertion code per enum code
	case TAKE_OFF_COMPLETED:
		res = "TAKE_OFF_COMPLETED"
	}
	return
}

func (reportenum *ReportEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "TAKE_OFF_COMPLETED":
		*reportenum = TAKE_OFF_COMPLETED
	}
}

func (reportenum *ReportEnum) ToCodeString() (res string) {

	switch *reportenum {
	// insertion code per enum code
	case TAKE_OFF_COMPLETED:
		res = "TAKE_OFF_COMPLETED"
	}
	return
}

