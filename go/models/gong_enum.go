// generated by ModelGongEnumFileTemplate
package models

// insertion point of enum utility functions
// Utility function for ConceptEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (conceptenum ConceptEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch conceptenum {
	// insertion code per enum code
	case Aircraft_:
		res = "Aircrafts"
	case Satellite_:
		res = "Satellites"
	case Network_:
		res = "Networks"
	case Center_:
		res = "Centers"
	case System_:
		res = "Systems"
	}
	return
}

func (conceptenum *ConceptEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "Aircrafts":
		*conceptenum = Aircraft_
	case "Satellites":
		*conceptenum = Satellite_
	case "Networks":
		*conceptenum = Network_
	case "Centers":
		*conceptenum = Center_
	case "Systems":
		*conceptenum = System_
	default:
		return errUnkownEnum
	}
	return
}

func (conceptenum *ConceptEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "Aircraft_":
		*conceptenum = Aircraft_
	case "Satellite_":
		*conceptenum = Satellite_
	case "Network_":
		*conceptenum = Network_
	case "Center_":
		*conceptenum = Center_
	case "System_":
		*conceptenum = System_
	default:
		return errUnkownEnum
	}
	return
}

func (conceptenum *ConceptEnum) ToCodeString() (res string) {

	switch *conceptenum {
	// insertion code per enum code
	case Aircraft_:
		res = "Aircraft_"
	case Satellite_:
		res = "Satellite_"
	case Network_:
		res = "Network_"
	case Center_:
		res = "Center_"
	case System_:
		res = "System_"
	}
	return
}

// Utility function for GONG__ExpressionType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gong__expressiontype GONG__ExpressionType) ToString() (res string) {

	// migration of former implementation of enum
	switch gong__expressiontype {
	// insertion code per enum code
	case GONG__STRUCT_INSTANCE:
		res = "STRUCT_INSTANCE"
	case GONG__FIELD_OR_CONST_VALUE:
		res = "FIELD_OR_CONST_VALUE"
	case GONG__FIELD_VALUE:
		res = "FIELD_VALUE"
	case GONG__ENUM_CAST_INT:
		res = "ENUM_CAST_INT"
	case GONG__ENUM_CAST_STRING:
		res = "ENUM_CAST_STRING"
	case GONG__IDENTIFIER_CONST:
		res = "IDENTIFIER_CONST"
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "STRUCT_INSTANCE":
		*gong__expressiontype = GONG__STRUCT_INSTANCE
	case "FIELD_OR_CONST_VALUE":
		*gong__expressiontype = GONG__FIELD_OR_CONST_VALUE
	case "FIELD_VALUE":
		*gong__expressiontype = GONG__FIELD_VALUE
	case "ENUM_CAST_INT":
		*gong__expressiontype = GONG__ENUM_CAST_INT
	case "ENUM_CAST_STRING":
		*gong__expressiontype = GONG__ENUM_CAST_STRING
	case "IDENTIFIER_CONST":
		*gong__expressiontype = GONG__IDENTIFIER_CONST
	default:
		return errUnkownEnum
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "GONG__STRUCT_INSTANCE":
		*gong__expressiontype = GONG__STRUCT_INSTANCE
	case "GONG__FIELD_OR_CONST_VALUE":
		*gong__expressiontype = GONG__FIELD_OR_CONST_VALUE
	case "GONG__FIELD_VALUE":
		*gong__expressiontype = GONG__FIELD_VALUE
	case "GONG__ENUM_CAST_INT":
		*gong__expressiontype = GONG__ENUM_CAST_INT
	case "GONG__ENUM_CAST_STRING":
		*gong__expressiontype = GONG__ENUM_CAST_STRING
	case "GONG__IDENTIFIER_CONST":
		*gong__expressiontype = GONG__IDENTIFIER_CONST
	default:
		return errUnkownEnum
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) ToCodeString() (res string) {

	switch *gong__expressiontype {
	// insertion code per enum code
	case GONG__STRUCT_INSTANCE:
		res = "GONG__STRUCT_INSTANCE"
	case GONG__FIELD_OR_CONST_VALUE:
		res = "GONG__FIELD_OR_CONST_VALUE"
	case GONG__FIELD_VALUE:
		res = "GONG__FIELD_VALUE"
	case GONG__ENUM_CAST_INT:
		res = "GONG__ENUM_CAST_INT"
	case GONG__ENUM_CAST_STRING:
		res = "GONG__ENUM_CAST_STRING"
	case GONG__IDENTIFIER_CONST:
		res = "GONG__IDENTIFIER_CONST"
	}
	return
}

// Utility function for LinerStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (linerstateenum LinerStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch linerstateenum {
	// insertion code per enum code
	case EN_ROUTE_NOMINAL:
		res = "EN_ROUTE_NOMINAL"
	case LANDED:
		res = "LANDED"
	}
	return
}

func (linerstateenum *LinerStateEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "EN_ROUTE_NOMINAL":
		*linerstateenum = EN_ROUTE_NOMINAL
	case "LANDED":
		*linerstateenum = LANDED
	default:
		return errUnkownEnum
	}
	return
}

func (linerstateenum *LinerStateEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "EN_ROUTE_NOMINAL":
		*linerstateenum = EN_ROUTE_NOMINAL
	case "LANDED":
		*linerstateenum = LANDED
	default:
		return errUnkownEnum
	}
	return
}

func (linerstateenum *LinerStateEnum) ToCodeString() (res string) {

	switch *linerstateenum {
	// insertion code per enum code
	case EN_ROUTE_NOMINAL:
		res = "EN_ROUTE_NOMINAL"
	case LANDED:
		res = "LANDED"
	}
	return
}

// Utility function for MessageStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (messagestateenum MessageStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch messagestateenum {
	// insertion code per enum code
	case MESSAGE_EN_ROUTE:
		res = "MESSAGE_EN_ROUTE"
	case MESSAGE_ARRIVED:
		res = "MESSAGE_ARRIVED"
	}
	return
}

func (messagestateenum *MessageStateEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "MESSAGE_EN_ROUTE":
		*messagestateenum = MESSAGE_EN_ROUTE
	case "MESSAGE_ARRIVED":
		*messagestateenum = MESSAGE_ARRIVED
	default:
		return errUnkownEnum
	}
	return
}

func (messagestateenum *MessageStateEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "MESSAGE_EN_ROUTE":
		*messagestateenum = MESSAGE_EN_ROUTE
	case "MESSAGE_ARRIVED":
		*messagestateenum = MESSAGE_ARRIVED
	default:
		return errUnkownEnum
	}
	return
}

func (messagestateenum *MessageStateEnum) ToCodeString() (res string) {

	switch *messagestateenum {
	// insertion code per enum code
	case MESSAGE_EN_ROUTE:
		res = "MESSAGE_EN_ROUTE"
	case MESSAGE_ARRIVED:
		res = "MESSAGE_ARRIVED"
	}
	return
}

// Utility function for OperationalLineStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (operationallinestateenum OperationalLineStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch operationallinestateenum {
	// insertion code per enum code
	case OPS_COM_LINK_OPERATIONAL_LINE_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_WORKING"
	case OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING"
	}
	return
}

func (operationallinestateenum *OperationalLineStateEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "OPS_COM_LINK_OPERATIONAL_LINE_WORKING":
		*operationallinestateenum = OPS_COM_LINK_OPERATIONAL_LINE_WORKING
	case "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING":
		*operationallinestateenum = OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING
	default:
		return errUnkownEnum
	}
	return
}

func (operationallinestateenum *OperationalLineStateEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "OPS_COM_LINK_OPERATIONAL_LINE_WORKING":
		*operationallinestateenum = OPS_COM_LINK_OPERATIONAL_LINE_WORKING
	case "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING":
		*operationallinestateenum = OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING
	default:
		return errUnkownEnum
	}
	return
}

func (operationallinestateenum *OperationalLineStateEnum) ToCodeString() (res string) {

	switch *operationallinestateenum {
	// insertion code per enum code
	case OPS_COM_LINK_OPERATIONAL_LINE_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_WORKING"
	case OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING:
		res = "OPS_COM_LINK_OPERATIONAL_LINE_NOT_WORKING"
	}
	return
}

// Utility function for OrderEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (orderenum OrderEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch orderenum {
	// insertion code per enum code
	case TAKE_OFF:
		res = "TAKE_OFF"
	}
	return
}

func (orderenum *OrderEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "TAKE_OFF":
		*orderenum = TAKE_OFF
	default:
		return errUnkownEnum
	}
	return
}

func (orderenum *OrderEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "TAKE_OFF":
		*orderenum = TAKE_OFF
	default:
		return errUnkownEnum
	}
	return
}

func (orderenum *OrderEnum) ToCodeString() (res string) {

	switch *orderenum {
	// insertion code per enum code
	case TAKE_OFF:
		res = "TAKE_OFF"
	}
	return
}

// Utility function for RadarStateEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (radarstateenum RadarStateEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch radarstateenum {
	// insertion code per enum code
	case WORKING:
		res = "WORKING"
	}
	return
}

func (radarstateenum *RadarStateEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "WORKING":
		*radarstateenum = WORKING
	default:
		return errUnkownEnum
	}
	return
}

func (radarstateenum *RadarStateEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "WORKING":
		*radarstateenum = WORKING
	default:
		return errUnkownEnum
	}
	return
}

func (radarstateenum *RadarStateEnum) ToCodeString() (res string) {

	switch *radarstateenum {
	// insertion code per enum code
	case WORKING:
		res = "WORKING"
	}
	return
}

// Utility function for ReportEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (reportenum ReportEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch reportenum {
	// insertion code per enum code
	case TAKE_OFF_COMPLETED:
		res = "TAKE_OFF_COMPLETED"
	}
	return
}

func (reportenum *ReportEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "TAKE_OFF_COMPLETED":
		*reportenum = TAKE_OFF_COMPLETED
	default:
		return errUnkownEnum
	}
	return
}

func (reportenum *ReportEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "TAKE_OFF_COMPLETED":
		*reportenum = TAKE_OFF_COMPLETED
	default:
		return errUnkownEnum
	}
	return
}

func (reportenum *ReportEnum) ToCodeString() (res string) {

	switch *reportenum {
	// insertion code per enum code
	case TAKE_OFF_COMPLETED:
		res = "TAKE_OFF_COMPLETED"
	}
	return
}

// Last line of the template
