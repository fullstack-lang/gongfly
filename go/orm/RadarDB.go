// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Radar_sql sql.NullBool
var dummy_Radar_time time.Duration
var dummy_Radar_sort sort.Float64Slice

// RadarAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model radarAPI
type RadarAPI struct {
	gorm.Model

	models.Radar

	// encoding of pointers
	RadarPointersEnconding
}

// RadarPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RadarPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// RadarDB describes a radar in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model radarDB
type RadarDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field radarDB.TechName {{BasicKind}} (to be completed)
	TechName_Data sql.NullString

	// Declation for basic field radarDB.State {{BasicKind}} (to be completed)
	State_Data sql.NullString

	// Declation for basic field radarDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field radarDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field radarDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field radarDB.Range {{BasicKind}} (to be completed)
	Range_Data sql.NullFloat64
	// encoding of pointers
	RadarPointersEnconding
}

// RadarDBs arrays radarDBs
// swagger:response radarDBsResponse
type RadarDBs []RadarDB

// RadarDBResponse provides response
// swagger:response radarDBResponse
type RadarDBResponse struct {
	RadarDB
}

// RadarWOP is a Radar without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RadarWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	TechName string `xlsx:"1"`

	State models.RadarStateEnum `xlsx:"2"`

	Name string `xlsx:"3"`

	Lat float64 `xlsx:"4"`

	Lng float64 `xlsx:"5"`

	Range float64 `xlsx:"6"`
	// insertion for WOP pointer fields
}

var Radar_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"TechName",
	"State",
	"Name",
	"Lat",
	"Lng",
	"Range",
}

type BackRepoRadarStruct struct {
	// stores RadarDB according to their gorm ID
	Map_RadarDBID_RadarDB *map[uint]*RadarDB

	// stores RadarDB ID according to Radar address
	Map_RadarPtr_RadarDBID *map[*models.Radar]uint

	// stores Radar according to their gorm ID
	Map_RadarDBID_RadarPtr *map[uint]*models.Radar

	db *gorm.DB
}

func (backRepoRadar *BackRepoRadarStruct) GetDB() *gorm.DB {
	return backRepoRadar.db
}

// GetRadarDBFromRadarPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRadar *BackRepoRadarStruct) GetRadarDBFromRadarPtr(radar *models.Radar) (radarDB *RadarDB) {
	id := (*backRepoRadar.Map_RadarPtr_RadarDBID)[radar]
	radarDB = (*backRepoRadar.Map_RadarDBID_RadarDB)[id]
	return
}

// BackRepoRadar.Init set up the BackRepo of the Radar
func (backRepoRadar *BackRepoRadarStruct) Init(db *gorm.DB) (Error error) {

	if backRepoRadar.Map_RadarDBID_RadarPtr != nil {
		err := errors.New("In Init, backRepoRadar.Map_RadarDBID_RadarPtr should be nil")
		return err
	}

	if backRepoRadar.Map_RadarDBID_RadarDB != nil {
		err := errors.New("In Init, backRepoRadar.Map_RadarDBID_RadarDB should be nil")
		return err
	}

	if backRepoRadar.Map_RadarPtr_RadarDBID != nil {
		err := errors.New("In Init, backRepoRadar.Map_RadarPtr_RadarDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Radar, 0)
	backRepoRadar.Map_RadarDBID_RadarPtr = &tmp

	tmpDB := make(map[uint]*RadarDB, 0)
	backRepoRadar.Map_RadarDBID_RadarDB = &tmpDB

	tmpID := make(map[*models.Radar]uint, 0)
	backRepoRadar.Map_RadarPtr_RadarDBID = &tmpID

	backRepoRadar.db = db
	return
}

// BackRepoRadar.CommitPhaseOne commits all staged instances of Radar to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRadar *BackRepoRadarStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for radar := range stage.Radars {
		backRepoRadar.CommitPhaseOneInstance(radar)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, radar := range *backRepoRadar.Map_RadarDBID_RadarPtr {
		if _, ok := stage.Radars[radar]; !ok {
			backRepoRadar.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRadar.CommitDeleteInstance commits deletion of Radar to the BackRepo
func (backRepoRadar *BackRepoRadarStruct) CommitDeleteInstance(id uint) (Error error) {

	radar := (*backRepoRadar.Map_RadarDBID_RadarPtr)[id]

	// radar is not staged anymore, remove radarDB
	radarDB := (*backRepoRadar.Map_RadarDBID_RadarDB)[id]
	query := backRepoRadar.db.Unscoped().Delete(&radarDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoRadar.Map_RadarPtr_RadarDBID), radar)
	delete((*backRepoRadar.Map_RadarDBID_RadarPtr), id)
	delete((*backRepoRadar.Map_RadarDBID_RadarDB), id)

	return
}

// BackRepoRadar.CommitPhaseOneInstance commits radar staged instances of Radar to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRadar *BackRepoRadarStruct) CommitPhaseOneInstance(radar *models.Radar) (Error error) {

	// check if the radar is not commited yet
	if _, ok := (*backRepoRadar.Map_RadarPtr_RadarDBID)[radar]; ok {
		return
	}

	// initiate radar
	var radarDB RadarDB
	radarDB.CopyBasicFieldsFromRadar(radar)

	query := backRepoRadar.db.Create(&radarDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoRadar.Map_RadarPtr_RadarDBID)[radar] = radarDB.ID
	(*backRepoRadar.Map_RadarDBID_RadarPtr)[radarDB.ID] = radar
	(*backRepoRadar.Map_RadarDBID_RadarDB)[radarDB.ID] = &radarDB

	return
}

// BackRepoRadar.CommitPhaseTwo commits all staged instances of Radar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRadar *BackRepoRadarStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, radar := range *backRepoRadar.Map_RadarDBID_RadarPtr {
		backRepoRadar.CommitPhaseTwoInstance(backRepo, idx, radar)
	}

	return
}

// BackRepoRadar.CommitPhaseTwoInstance commits {{structname }} of models.Radar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRadar *BackRepoRadarStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, radar *models.Radar) (Error error) {

	// fetch matching radarDB
	if radarDB, ok := (*backRepoRadar.Map_RadarDBID_RadarDB)[idx]; ok {

		radarDB.CopyBasicFieldsFromRadar(radar)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRadar.db.Save(&radarDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Radar intance %s", radar.Name))
		return err
	}

	return
}

// BackRepoRadar.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoRadar *BackRepoRadarStruct) CheckoutPhaseOne() (Error error) {

	radarDBArray := make([]RadarDB, 0)
	query := backRepoRadar.db.Find(&radarDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	radarInstancesToBeRemovedFromTheStage := make(map[*models.Radar]struct{})
	for key, value := range models.Stage.Radars {
		radarInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, radarDB := range radarDBArray {
		backRepoRadar.CheckoutPhaseOneInstance(&radarDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		radar, ok := (*backRepoRadar.Map_RadarDBID_RadarPtr)[radarDB.ID]
		if ok {
			delete(radarInstancesToBeRemovedFromTheStage, radar)
		}
	}

	// remove from stage and back repo's 3 maps all radars that are not in the checkout
	for radar := range radarInstancesToBeRemovedFromTheStage {
		radar.Unstage()

		// remove instance from the back repo 3 maps
		radarID := (*backRepoRadar.Map_RadarPtr_RadarDBID)[radar]
		delete((*backRepoRadar.Map_RadarPtr_RadarDBID), radar)
		delete((*backRepoRadar.Map_RadarDBID_RadarDB), radarID)
		delete((*backRepoRadar.Map_RadarDBID_RadarPtr), radarID)
	}

	return
}

// CheckoutPhaseOneInstance takes a radarDB that has been found in the DB, updates the backRepo and stages the
// models version of the radarDB
func (backRepoRadar *BackRepoRadarStruct) CheckoutPhaseOneInstance(radarDB *RadarDB) (Error error) {

	radar, ok := (*backRepoRadar.Map_RadarDBID_RadarPtr)[radarDB.ID]
	if !ok {
		radar = new(models.Radar)

		(*backRepoRadar.Map_RadarDBID_RadarPtr)[radarDB.ID] = radar
		(*backRepoRadar.Map_RadarPtr_RadarDBID)[radar] = radarDB.ID

		// append model store with the new element
		radar.Name = radarDB.Name_Data.String
		radar.Stage()
	}
	radarDB.CopyBasicFieldsToRadar(radar)

	// preserve pointer to radarDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RadarDBID_RadarDB)[radarDB hold variable pointers
	radarDB_Data := *radarDB
	preservedPtrToRadar := &radarDB_Data
	(*backRepoRadar.Map_RadarDBID_RadarDB)[radarDB.ID] = preservedPtrToRadar

	return
}

// BackRepoRadar.CheckoutPhaseTwo Checkouts all staged instances of Radar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRadar *BackRepoRadarStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, radarDB := range *backRepoRadar.Map_RadarDBID_RadarDB {
		backRepoRadar.CheckoutPhaseTwoInstance(backRepo, radarDB)
	}
	return
}

// BackRepoRadar.CheckoutPhaseTwoInstance Checkouts staged instances of Radar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRadar *BackRepoRadarStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, radarDB *RadarDB) (Error error) {

	radar := (*backRepoRadar.Map_RadarDBID_RadarPtr)[radarDB.ID]
	_ = radar // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitRadar allows commit of a single radar (if already staged)
func (backRepo *BackRepoStruct) CommitRadar(radar *models.Radar) {
	backRepo.BackRepoRadar.CommitPhaseOneInstance(radar)
	if id, ok := (*backRepo.BackRepoRadar.Map_RadarPtr_RadarDBID)[radar]; ok {
		backRepo.BackRepoRadar.CommitPhaseTwoInstance(backRepo, id, radar)
	}
}

// CommitRadar allows checkout of a single radar (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRadar(radar *models.Radar) {
	// check if the radar is staged
	if _, ok := (*backRepo.BackRepoRadar.Map_RadarPtr_RadarDBID)[radar]; ok {

		if id, ok := (*backRepo.BackRepoRadar.Map_RadarPtr_RadarDBID)[radar]; ok {
			var radarDB RadarDB
			radarDB.ID = id

			if err := backRepo.BackRepoRadar.db.First(&radarDB, id).Error; err != nil {
				log.Panicln("CheckoutRadar : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRadar.CheckoutPhaseOneInstance(&radarDB)
			backRepo.BackRepoRadar.CheckoutPhaseTwoInstance(backRepo, &radarDB)
		}
	}
}

// CopyBasicFieldsFromRadar
func (radarDB *RadarDB) CopyBasicFieldsFromRadar(radar *models.Radar) {
	// insertion point for fields commit

	radarDB.TechName_Data.String = radar.TechName
	radarDB.TechName_Data.Valid = true

	radarDB.State_Data.String = radar.State.ToString()
	radarDB.State_Data.Valid = true

	radarDB.Name_Data.String = radar.Name
	radarDB.Name_Data.Valid = true

	radarDB.Lat_Data.Float64 = radar.Lat
	radarDB.Lat_Data.Valid = true

	radarDB.Lng_Data.Float64 = radar.Lng
	radarDB.Lng_Data.Valid = true

	radarDB.Range_Data.Float64 = radar.Range
	radarDB.Range_Data.Valid = true
}

// CopyBasicFieldsFromRadarWOP
func (radarDB *RadarDB) CopyBasicFieldsFromRadarWOP(radar *RadarWOP) {
	// insertion point for fields commit

	radarDB.TechName_Data.String = radar.TechName
	radarDB.TechName_Data.Valid = true

	radarDB.State_Data.String = radar.State.ToString()
	radarDB.State_Data.Valid = true

	radarDB.Name_Data.String = radar.Name
	radarDB.Name_Data.Valid = true

	radarDB.Lat_Data.Float64 = radar.Lat
	radarDB.Lat_Data.Valid = true

	radarDB.Lng_Data.Float64 = radar.Lng
	radarDB.Lng_Data.Valid = true

	radarDB.Range_Data.Float64 = radar.Range
	radarDB.Range_Data.Valid = true
}

// CopyBasicFieldsToRadar
func (radarDB *RadarDB) CopyBasicFieldsToRadar(radar *models.Radar) {
	// insertion point for checkout of basic fields (back repo to stage)
	radar.TechName = radarDB.TechName_Data.String
	radar.State.FromString(radarDB.State_Data.String)
	radar.Name = radarDB.Name_Data.String
	radar.Lat = radarDB.Lat_Data.Float64
	radar.Lng = radarDB.Lng_Data.Float64
	radar.Range = radarDB.Range_Data.Float64
}

// CopyBasicFieldsToRadarWOP
func (radarDB *RadarDB) CopyBasicFieldsToRadarWOP(radar *RadarWOP) {
	radar.ID = int(radarDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	radar.TechName = radarDB.TechName_Data.String
	radar.State.FromString(radarDB.State_Data.String)
	radar.Name = radarDB.Name_Data.String
	radar.Lat = radarDB.Lat_Data.Float64
	radar.Lng = radarDB.Lng_Data.Float64
	radar.Range = radarDB.Range_Data.Float64
}

// Backup generates a json file from a slice of all RadarDB instances in the backrepo
func (backRepoRadar *BackRepoRadarStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RadarDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RadarDB, 0)
	for _, radarDB := range *backRepoRadar.Map_RadarDBID_RadarDB {
		forBackup = append(forBackup, radarDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Radar ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Radar file", err.Error())
	}
}

// Backup generates a json file from a slice of all RadarDB instances in the backrepo
func (backRepoRadar *BackRepoRadarStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RadarDB, 0)
	for _, radarDB := range *backRepoRadar.Map_RadarDBID_RadarDB {
		forBackup = append(forBackup, radarDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Radar")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Radar_Fields, -1)
	for _, radarDB := range forBackup {

		var radarWOP RadarWOP
		radarDB.CopyBasicFieldsToRadarWOP(&radarWOP)

		row := sh.AddRow()
		row.WriteStruct(&radarWOP, -1)
	}
}

// RestoreXL from the "Radar" sheet all RadarDB instances
func (backRepoRadar *BackRepoRadarStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRadarid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Radar"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRadar.rowVisitorRadar)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoRadar *BackRepoRadarStruct) rowVisitorRadar(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var radarWOP RadarWOP
		row.ReadStruct(&radarWOP)

		// add the unmarshalled struct to the stage
		radarDB := new(RadarDB)
		radarDB.CopyBasicFieldsFromRadarWOP(&radarWOP)

		radarDB_ID_atBackupTime := radarDB.ID
		radarDB.ID = 0
		query := backRepoRadar.db.Create(radarDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoRadar.Map_RadarDBID_RadarDB)[radarDB.ID] = radarDB
		BackRepoRadarid_atBckpTime_newID[radarDB_ID_atBackupTime] = radarDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RadarDB.json" in dirPath that stores an array
// of RadarDB and stores it in the database
// the map BackRepoRadarid_atBckpTime_newID is updated accordingly
func (backRepoRadar *BackRepoRadarStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRadarid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RadarDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Radar file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RadarDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RadarDBID_RadarDB
	for _, radarDB := range forRestore {

		radarDB_ID_atBackupTime := radarDB.ID
		radarDB.ID = 0
		query := backRepoRadar.db.Create(radarDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoRadar.Map_RadarDBID_RadarDB)[radarDB.ID] = radarDB
		BackRepoRadarid_atBckpTime_newID[radarDB_ID_atBackupTime] = radarDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Radar file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Radar>id_atBckpTime_newID
// to compute new index
func (backRepoRadar *BackRepoRadarStruct) RestorePhaseTwo() {

	for _, radarDB := range *backRepoRadar.Map_RadarDBID_RadarDB {

		// next line of code is to avert unused variable compilation error
		_ = radarDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRadar.db.Model(radarDB).Updates(*radarDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRadarid_atBckpTime_newID map[uint]uint
