// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Satellite_sql sql.NullBool
var dummy_Satellite_time time.Duration
var dummy_Satellite_sort sort.Float64Slice

// SatelliteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model satelliteAPI
type SatelliteAPI struct {
	gorm.Model

	models.Satellite

	// encoding of pointers
	SatellitePointersEnconding
}

// SatellitePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SatellitePointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// SatelliteDB describes a satellite in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model satelliteDB
type SatelliteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field satelliteDB.Name
	Name_Data sql.NullString

	// Declation for basic field satelliteDB.Line1
	Line1_Data sql.NullString

	// Declation for basic field satelliteDB.Line2
	Line2_Data sql.NullString

	// Declation for basic field satelliteDB.Lat
	Lat_Data sql.NullFloat64

	// Declation for basic field satelliteDB.Lng
	Lng_Data sql.NullFloat64

	// Declation for basic field satelliteDB.Heading
	Heading_Data sql.NullFloat64

	// Declation for basic field satelliteDB.Level
	Level_Data sql.NullFloat64

	// Declation for basic field satelliteDB.Speed
	Speed_Data sql.NullFloat64

	// Declation for basic field satelliteDB.VerticalSpeed
	VerticalSpeed_Data sql.NullFloat64

	// Declation for basic field satelliteDB.Timestampstring
	Timestampstring_Data sql.NullString
	// encoding of pointers
	SatellitePointersEnconding
}

// SatelliteDBs arrays satelliteDBs
// swagger:response satelliteDBsResponse
type SatelliteDBs []SatelliteDB

// SatelliteDBResponse provides response
// swagger:response satelliteDBResponse
type SatelliteDBResponse struct {
	SatelliteDB
}

// SatelliteWOP is a Satellite without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SatelliteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Line1 string `xlsx:"2"`

	Line2 string `xlsx:"3"`

	Lat float64 `xlsx:"4"`

	Lng float64 `xlsx:"5"`

	Heading float64 `xlsx:"6"`

	Level float64 `xlsx:"7"`

	Speed float64 `xlsx:"8"`

	VerticalSpeed float64 `xlsx:"9"`

	Timestampstring string `xlsx:"10"`
	// insertion for WOP pointer fields
}

var Satellite_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Line1",
	"Line2",
	"Lat",
	"Lng",
	"Heading",
	"Level",
	"Speed",
	"VerticalSpeed",
	"Timestampstring",
}

type BackRepoSatelliteStruct struct {
	// stores SatelliteDB according to their gorm ID
	Map_SatelliteDBID_SatelliteDB *map[uint]*SatelliteDB

	// stores SatelliteDB ID according to Satellite address
	Map_SatellitePtr_SatelliteDBID *map[*models.Satellite]uint

	// stores Satellite according to their gorm ID
	Map_SatelliteDBID_SatellitePtr *map[uint]*models.Satellite

	db *gorm.DB
}

func (backRepoSatellite *BackRepoSatelliteStruct) GetDB() *gorm.DB {
	return backRepoSatellite.db
}

// GetSatelliteDBFromSatellitePtr is a handy function to access the back repo instance from the stage instance
func (backRepoSatellite *BackRepoSatelliteStruct) GetSatelliteDBFromSatellitePtr(satellite *models.Satellite) (satelliteDB *SatelliteDB) {
	id := (*backRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite]
	satelliteDB = (*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[id]
	return
}

// BackRepoSatellite.Init set up the BackRepo of the Satellite
func (backRepoSatellite *BackRepoSatelliteStruct) Init(db *gorm.DB) (Error error) {

	if backRepoSatellite.Map_SatelliteDBID_SatellitePtr != nil {
		err := errors.New("In Init, backRepoSatellite.Map_SatelliteDBID_SatellitePtr should be nil")
		return err
	}

	if backRepoSatellite.Map_SatelliteDBID_SatelliteDB != nil {
		err := errors.New("In Init, backRepoSatellite.Map_SatelliteDBID_SatelliteDB should be nil")
		return err
	}

	if backRepoSatellite.Map_SatellitePtr_SatelliteDBID != nil {
		err := errors.New("In Init, backRepoSatellite.Map_SatellitePtr_SatelliteDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Satellite, 0)
	backRepoSatellite.Map_SatelliteDBID_SatellitePtr = &tmp

	tmpDB := make(map[uint]*SatelliteDB, 0)
	backRepoSatellite.Map_SatelliteDBID_SatelliteDB = &tmpDB

	tmpID := make(map[*models.Satellite]uint, 0)
	backRepoSatellite.Map_SatellitePtr_SatelliteDBID = &tmpID

	backRepoSatellite.db = db
	return
}

// BackRepoSatellite.CommitPhaseOne commits all staged instances of Satellite to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSatellite *BackRepoSatelliteStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for satellite := range stage.Satellites {
		backRepoSatellite.CommitPhaseOneInstance(satellite)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, satellite := range *backRepoSatellite.Map_SatelliteDBID_SatellitePtr {
		if _, ok := stage.Satellites[satellite]; !ok {
			backRepoSatellite.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSatellite.CommitDeleteInstance commits deletion of Satellite to the BackRepo
func (backRepoSatellite *BackRepoSatelliteStruct) CommitDeleteInstance(id uint) (Error error) {

	satellite := (*backRepoSatellite.Map_SatelliteDBID_SatellitePtr)[id]

	// satellite is not staged anymore, remove satelliteDB
	satelliteDB := (*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[id]
	query := backRepoSatellite.db.Unscoped().Delete(&satelliteDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoSatellite.Map_SatellitePtr_SatelliteDBID), satellite)
	delete((*backRepoSatellite.Map_SatelliteDBID_SatellitePtr), id)
	delete((*backRepoSatellite.Map_SatelliteDBID_SatelliteDB), id)

	return
}

// BackRepoSatellite.CommitPhaseOneInstance commits satellite staged instances of Satellite to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSatellite *BackRepoSatelliteStruct) CommitPhaseOneInstance(satellite *models.Satellite) (Error error) {

	// check if the satellite is not commited yet
	if _, ok := (*backRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite]; ok {
		return
	}

	// initiate satellite
	var satelliteDB SatelliteDB
	satelliteDB.CopyBasicFieldsFromSatellite(satellite)

	query := backRepoSatellite.db.Create(&satelliteDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite] = satelliteDB.ID
	(*backRepoSatellite.Map_SatelliteDBID_SatellitePtr)[satelliteDB.ID] = satellite
	(*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[satelliteDB.ID] = &satelliteDB

	return
}

// BackRepoSatellite.CommitPhaseTwo commits all staged instances of Satellite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSatellite *BackRepoSatelliteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, satellite := range *backRepoSatellite.Map_SatelliteDBID_SatellitePtr {
		backRepoSatellite.CommitPhaseTwoInstance(backRepo, idx, satellite)
	}

	return
}

// BackRepoSatellite.CommitPhaseTwoInstance commits {{structname }} of models.Satellite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSatellite *BackRepoSatelliteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, satellite *models.Satellite) (Error error) {

	// fetch matching satelliteDB
	if satelliteDB, ok := (*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[idx]; ok {

		satelliteDB.CopyBasicFieldsFromSatellite(satellite)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSatellite.db.Save(&satelliteDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Satellite intance %s", satellite.Name))
		return err
	}

	return
}

// BackRepoSatellite.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSatellite *BackRepoSatelliteStruct) CheckoutPhaseOne() (Error error) {

	satelliteDBArray := make([]SatelliteDB, 0)
	query := backRepoSatellite.db.Find(&satelliteDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	satelliteInstancesToBeRemovedFromTheStage := make(map[*models.Satellite]any)
	for key, value := range models.Stage.Satellites {
		satelliteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, satelliteDB := range satelliteDBArray {
		backRepoSatellite.CheckoutPhaseOneInstance(&satelliteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		satellite, ok := (*backRepoSatellite.Map_SatelliteDBID_SatellitePtr)[satelliteDB.ID]
		if ok {
			delete(satelliteInstancesToBeRemovedFromTheStage, satellite)
		}
	}

	// remove from stage and back repo's 3 maps all satellites that are not in the checkout
	for satellite := range satelliteInstancesToBeRemovedFromTheStage {
		satellite.Unstage()

		// remove instance from the back repo 3 maps
		satelliteID := (*backRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite]
		delete((*backRepoSatellite.Map_SatellitePtr_SatelliteDBID), satellite)
		delete((*backRepoSatellite.Map_SatelliteDBID_SatelliteDB), satelliteID)
		delete((*backRepoSatellite.Map_SatelliteDBID_SatellitePtr), satelliteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a satelliteDB that has been found in the DB, updates the backRepo and stages the
// models version of the satelliteDB
func (backRepoSatellite *BackRepoSatelliteStruct) CheckoutPhaseOneInstance(satelliteDB *SatelliteDB) (Error error) {

	satellite, ok := (*backRepoSatellite.Map_SatelliteDBID_SatellitePtr)[satelliteDB.ID]
	if !ok {
		satellite = new(models.Satellite)

		(*backRepoSatellite.Map_SatelliteDBID_SatellitePtr)[satelliteDB.ID] = satellite
		(*backRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite] = satelliteDB.ID

		// append model store with the new element
		satellite.Name = satelliteDB.Name_Data.String
		satellite.Stage()
	}
	satelliteDB.CopyBasicFieldsToSatellite(satellite)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	satellite.Stage()

	// preserve pointer to satelliteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SatelliteDBID_SatelliteDB)[satelliteDB hold variable pointers
	satelliteDB_Data := *satelliteDB
	preservedPtrToSatellite := &satelliteDB_Data
	(*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[satelliteDB.ID] = preservedPtrToSatellite

	return
}

// BackRepoSatellite.CheckoutPhaseTwo Checkouts all staged instances of Satellite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSatellite *BackRepoSatelliteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, satelliteDB := range *backRepoSatellite.Map_SatelliteDBID_SatelliteDB {
		backRepoSatellite.CheckoutPhaseTwoInstance(backRepo, satelliteDB)
	}
	return
}

// BackRepoSatellite.CheckoutPhaseTwoInstance Checkouts staged instances of Satellite to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSatellite *BackRepoSatelliteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, satelliteDB *SatelliteDB) (Error error) {

	satellite := (*backRepoSatellite.Map_SatelliteDBID_SatellitePtr)[satelliteDB.ID]
	_ = satellite // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitSatellite allows commit of a single satellite (if already staged)
func (backRepo *BackRepoStruct) CommitSatellite(satellite *models.Satellite) {
	backRepo.BackRepoSatellite.CommitPhaseOneInstance(satellite)
	if id, ok := (*backRepo.BackRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite]; ok {
		backRepo.BackRepoSatellite.CommitPhaseTwoInstance(backRepo, id, satellite)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSatellite allows checkout of a single satellite (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSatellite(satellite *models.Satellite) {
	// check if the satellite is staged
	if _, ok := (*backRepo.BackRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite]; ok {

		if id, ok := (*backRepo.BackRepoSatellite.Map_SatellitePtr_SatelliteDBID)[satellite]; ok {
			var satelliteDB SatelliteDB
			satelliteDB.ID = id

			if err := backRepo.BackRepoSatellite.db.First(&satelliteDB, id).Error; err != nil {
				log.Panicln("CheckoutSatellite : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSatellite.CheckoutPhaseOneInstance(&satelliteDB)
			backRepo.BackRepoSatellite.CheckoutPhaseTwoInstance(backRepo, &satelliteDB)
		}
	}
}

// CopyBasicFieldsFromSatellite
func (satelliteDB *SatelliteDB) CopyBasicFieldsFromSatellite(satellite *models.Satellite) {
	// insertion point for fields commit

	satelliteDB.Name_Data.String = satellite.Name
	satelliteDB.Name_Data.Valid = true

	satelliteDB.Line1_Data.String = satellite.Line1
	satelliteDB.Line1_Data.Valid = true

	satelliteDB.Line2_Data.String = satellite.Line2
	satelliteDB.Line2_Data.Valid = true

	satelliteDB.Lat_Data.Float64 = satellite.Lat
	satelliteDB.Lat_Data.Valid = true

	satelliteDB.Lng_Data.Float64 = satellite.Lng
	satelliteDB.Lng_Data.Valid = true

	satelliteDB.Heading_Data.Float64 = satellite.Heading
	satelliteDB.Heading_Data.Valid = true

	satelliteDB.Level_Data.Float64 = satellite.Level
	satelliteDB.Level_Data.Valid = true

	satelliteDB.Speed_Data.Float64 = satellite.Speed
	satelliteDB.Speed_Data.Valid = true

	satelliteDB.VerticalSpeed_Data.Float64 = satellite.VerticalSpeed
	satelliteDB.VerticalSpeed_Data.Valid = true

	satelliteDB.Timestampstring_Data.String = satellite.Timestampstring
	satelliteDB.Timestampstring_Data.Valid = true
}

// CopyBasicFieldsFromSatelliteWOP
func (satelliteDB *SatelliteDB) CopyBasicFieldsFromSatelliteWOP(satellite *SatelliteWOP) {
	// insertion point for fields commit

	satelliteDB.Name_Data.String = satellite.Name
	satelliteDB.Name_Data.Valid = true

	satelliteDB.Line1_Data.String = satellite.Line1
	satelliteDB.Line1_Data.Valid = true

	satelliteDB.Line2_Data.String = satellite.Line2
	satelliteDB.Line2_Data.Valid = true

	satelliteDB.Lat_Data.Float64 = satellite.Lat
	satelliteDB.Lat_Data.Valid = true

	satelliteDB.Lng_Data.Float64 = satellite.Lng
	satelliteDB.Lng_Data.Valid = true

	satelliteDB.Heading_Data.Float64 = satellite.Heading
	satelliteDB.Heading_Data.Valid = true

	satelliteDB.Level_Data.Float64 = satellite.Level
	satelliteDB.Level_Data.Valid = true

	satelliteDB.Speed_Data.Float64 = satellite.Speed
	satelliteDB.Speed_Data.Valid = true

	satelliteDB.VerticalSpeed_Data.Float64 = satellite.VerticalSpeed
	satelliteDB.VerticalSpeed_Data.Valid = true

	satelliteDB.Timestampstring_Data.String = satellite.Timestampstring
	satelliteDB.Timestampstring_Data.Valid = true
}

// CopyBasicFieldsToSatellite
func (satelliteDB *SatelliteDB) CopyBasicFieldsToSatellite(satellite *models.Satellite) {
	// insertion point for checkout of basic fields (back repo to stage)
	satellite.Name = satelliteDB.Name_Data.String
	satellite.Line1 = satelliteDB.Line1_Data.String
	satellite.Line2 = satelliteDB.Line2_Data.String
	satellite.Lat = satelliteDB.Lat_Data.Float64
	satellite.Lng = satelliteDB.Lng_Data.Float64
	satellite.Heading = satelliteDB.Heading_Data.Float64
	satellite.Level = satelliteDB.Level_Data.Float64
	satellite.Speed = satelliteDB.Speed_Data.Float64
	satellite.VerticalSpeed = satelliteDB.VerticalSpeed_Data.Float64
	satellite.Timestampstring = satelliteDB.Timestampstring_Data.String
}

// CopyBasicFieldsToSatelliteWOP
func (satelliteDB *SatelliteDB) CopyBasicFieldsToSatelliteWOP(satellite *SatelliteWOP) {
	satellite.ID = int(satelliteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	satellite.Name = satelliteDB.Name_Data.String
	satellite.Line1 = satelliteDB.Line1_Data.String
	satellite.Line2 = satelliteDB.Line2_Data.String
	satellite.Lat = satelliteDB.Lat_Data.Float64
	satellite.Lng = satelliteDB.Lng_Data.Float64
	satellite.Heading = satelliteDB.Heading_Data.Float64
	satellite.Level = satelliteDB.Level_Data.Float64
	satellite.Speed = satelliteDB.Speed_Data.Float64
	satellite.VerticalSpeed = satelliteDB.VerticalSpeed_Data.Float64
	satellite.Timestampstring = satelliteDB.Timestampstring_Data.String
}

// Backup generates a json file from a slice of all SatelliteDB instances in the backrepo
func (backRepoSatellite *BackRepoSatelliteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SatelliteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SatelliteDB, 0)
	for _, satelliteDB := range *backRepoSatellite.Map_SatelliteDBID_SatelliteDB {
		forBackup = append(forBackup, satelliteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Satellite ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Satellite file", err.Error())
	}
}

// Backup generates a json file from a slice of all SatelliteDB instances in the backrepo
func (backRepoSatellite *BackRepoSatelliteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SatelliteDB, 0)
	for _, satelliteDB := range *backRepoSatellite.Map_SatelliteDBID_SatelliteDB {
		forBackup = append(forBackup, satelliteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Satellite")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Satellite_Fields, -1)
	for _, satelliteDB := range forBackup {

		var satelliteWOP SatelliteWOP
		satelliteDB.CopyBasicFieldsToSatelliteWOP(&satelliteWOP)

		row := sh.AddRow()
		row.WriteStruct(&satelliteWOP, -1)
	}
}

// RestoreXL from the "Satellite" sheet all SatelliteDB instances
func (backRepoSatellite *BackRepoSatelliteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSatelliteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Satellite"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSatellite.rowVisitorSatellite)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoSatellite *BackRepoSatelliteStruct) rowVisitorSatellite(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var satelliteWOP SatelliteWOP
		row.ReadStruct(&satelliteWOP)

		// add the unmarshalled struct to the stage
		satelliteDB := new(SatelliteDB)
		satelliteDB.CopyBasicFieldsFromSatelliteWOP(&satelliteWOP)

		satelliteDB_ID_atBackupTime := satelliteDB.ID
		satelliteDB.ID = 0
		query := backRepoSatellite.db.Create(satelliteDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[satelliteDB.ID] = satelliteDB
		BackRepoSatelliteid_atBckpTime_newID[satelliteDB_ID_atBackupTime] = satelliteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SatelliteDB.json" in dirPath that stores an array
// of SatelliteDB and stores it in the database
// the map BackRepoSatelliteid_atBckpTime_newID is updated accordingly
func (backRepoSatellite *BackRepoSatelliteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSatelliteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SatelliteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Satellite file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SatelliteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SatelliteDBID_SatelliteDB
	for _, satelliteDB := range forRestore {

		satelliteDB_ID_atBackupTime := satelliteDB.ID
		satelliteDB.ID = 0
		query := backRepoSatellite.db.Create(satelliteDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoSatellite.Map_SatelliteDBID_SatelliteDB)[satelliteDB.ID] = satelliteDB
		BackRepoSatelliteid_atBckpTime_newID[satelliteDB_ID_atBackupTime] = satelliteDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Satellite file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Satellite>id_atBckpTime_newID
// to compute new index
func (backRepoSatellite *BackRepoSatelliteStruct) RestorePhaseTwo() {

	for _, satelliteDB := range *backRepoSatellite.Map_SatelliteDBID_SatelliteDB {

		// next line of code is to avert unused variable compilation error
		_ = satelliteDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSatellite.db.Model(satelliteDB).Updates(*satelliteDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSatelliteid_atBckpTime_newID map[uint]uint
