// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Liner_sql sql.NullBool
var dummy_Liner_time time.Duration
var dummy_Liner_sort sort.Float64Slice

// LinerAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model linerAPI
type LinerAPI struct {
	gorm.Model

	models.Liner

	// encoding of pointers
	LinerPointersEnconding
}

// LinerPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LinerPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field ReporingLine is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ReporingLineID sql.NullInt64
}

// LinerDB describes a liner in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model linerDB
type LinerDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field linerDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field linerDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field linerDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field linerDB.Heading {{BasicKind}} (to be completed)
	Heading_Data sql.NullFloat64

	// Declation for basic field linerDB.Level {{BasicKind}} (to be completed)
	Level_Data sql.NullFloat64

	// Declation for basic field linerDB.Speed {{BasicKind}} (to be completed)
	Speed_Data sql.NullFloat64

	// Declation for basic field linerDB.TechName {{BasicKind}} (to be completed)
	TechName_Data sql.NullString

	// Declation for basic field linerDB.State {{BasicKind}} (to be completed)
	State_Data sql.NullString

	// Declation for basic field linerDB.TargetHeading {{BasicKind}} (to be completed)
	TargetHeading_Data sql.NullFloat64

	// Declation for basic field linerDB.TargetLocationLat {{BasicKind}} (to be completed)
	TargetLocationLat_Data sql.NullFloat64

	// Declation for basic field linerDB.TargetLocationLng {{BasicKind}} (to be completed)
	TargetLocationLng_Data sql.NullFloat64

	// Declation for basic field linerDB.DistanceToTarget {{BasicKind}} (to be completed)
	DistanceToTarget_Data sql.NullFloat64

	// Declation for basic field linerDB.MaxRotationalSpeed {{BasicKind}} (to be completed)
	MaxRotationalSpeed_Data sql.NullFloat64

	// Declation for basic field linerDB.VerticalSpeed {{BasicKind}} (to be completed)
	VerticalSpeed_Data sql.NullFloat64

	// Declation for basic field linerDB.Timestampstring {{BasicKind}} (to be completed)
	Timestampstring_Data sql.NullString
	// encoding of pointers
	LinerPointersEnconding
}

// LinerDBs arrays linerDBs
// swagger:response linerDBsResponse
type LinerDBs []LinerDB

// LinerDBResponse provides response
// swagger:response linerDBResponse
type LinerDBResponse struct {
	LinerDB
}

// LinerWOP is a Liner without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LinerWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Lat float64 `xlsx:"2"`

	Lng float64 `xlsx:"3"`

	Heading float64 `xlsx:"4"`

	Level float64 `xlsx:"5"`

	Speed float64 `xlsx:"6"`

	TechName string `xlsx:"7"`

	State models.LinerStateEnum `xlsx:"8"`

	TargetHeading float64 `xlsx:"9"`

	TargetLocationLat float64 `xlsx:"10"`

	TargetLocationLng float64 `xlsx:"11"`

	DistanceToTarget float64 `xlsx:"12"`

	MaxRotationalSpeed float64 `xlsx:"13"`

	VerticalSpeed float64 `xlsx:"14"`

	Timestampstring string `xlsx:"15"`
	// insertion for WOP pointer fields
}

var Liner_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Lat",
	"Lng",
	"Heading",
	"Level",
	"Speed",
	"TechName",
	"State",
	"TargetHeading",
	"TargetLocationLat",
	"TargetLocationLng",
	"DistanceToTarget",
	"MaxRotationalSpeed",
	"VerticalSpeed",
	"Timestampstring",
}

type BackRepoLinerStruct struct {
	// stores LinerDB according to their gorm ID
	Map_LinerDBID_LinerDB *map[uint]*LinerDB

	// stores LinerDB ID according to Liner address
	Map_LinerPtr_LinerDBID *map[*models.Liner]uint

	// stores Liner according to their gorm ID
	Map_LinerDBID_LinerPtr *map[uint]*models.Liner

	db *gorm.DB
}

func (backRepoLiner *BackRepoLinerStruct) GetDB() *gorm.DB {
	return backRepoLiner.db
}

// GetLinerDBFromLinerPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLiner *BackRepoLinerStruct) GetLinerDBFromLinerPtr(liner *models.Liner) (linerDB *LinerDB) {
	id := (*backRepoLiner.Map_LinerPtr_LinerDBID)[liner]
	linerDB = (*backRepoLiner.Map_LinerDBID_LinerDB)[id]
	return
}

// BackRepoLiner.Init set up the BackRepo of the Liner
func (backRepoLiner *BackRepoLinerStruct) Init(db *gorm.DB) (Error error) {

	if backRepoLiner.Map_LinerDBID_LinerPtr != nil {
		err := errors.New("In Init, backRepoLiner.Map_LinerDBID_LinerPtr should be nil")
		return err
	}

	if backRepoLiner.Map_LinerDBID_LinerDB != nil {
		err := errors.New("In Init, backRepoLiner.Map_LinerDBID_LinerDB should be nil")
		return err
	}

	if backRepoLiner.Map_LinerPtr_LinerDBID != nil {
		err := errors.New("In Init, backRepoLiner.Map_LinerPtr_LinerDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Liner, 0)
	backRepoLiner.Map_LinerDBID_LinerPtr = &tmp

	tmpDB := make(map[uint]*LinerDB, 0)
	backRepoLiner.Map_LinerDBID_LinerDB = &tmpDB

	tmpID := make(map[*models.Liner]uint, 0)
	backRepoLiner.Map_LinerPtr_LinerDBID = &tmpID

	backRepoLiner.db = db
	return
}

// BackRepoLiner.CommitPhaseOne commits all staged instances of Liner to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLiner *BackRepoLinerStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for liner := range stage.Liners {
		backRepoLiner.CommitPhaseOneInstance(liner)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, liner := range *backRepoLiner.Map_LinerDBID_LinerPtr {
		if _, ok := stage.Liners[liner]; !ok {
			backRepoLiner.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLiner.CommitDeleteInstance commits deletion of Liner to the BackRepo
func (backRepoLiner *BackRepoLinerStruct) CommitDeleteInstance(id uint) (Error error) {

	liner := (*backRepoLiner.Map_LinerDBID_LinerPtr)[id]

	// liner is not staged anymore, remove linerDB
	linerDB := (*backRepoLiner.Map_LinerDBID_LinerDB)[id]
	query := backRepoLiner.db.Unscoped().Delete(&linerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoLiner.Map_LinerPtr_LinerDBID), liner)
	delete((*backRepoLiner.Map_LinerDBID_LinerPtr), id)
	delete((*backRepoLiner.Map_LinerDBID_LinerDB), id)

	return
}

// BackRepoLiner.CommitPhaseOneInstance commits liner staged instances of Liner to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLiner *BackRepoLinerStruct) CommitPhaseOneInstance(liner *models.Liner) (Error error) {

	// check if the liner is not commited yet
	if _, ok := (*backRepoLiner.Map_LinerPtr_LinerDBID)[liner]; ok {
		return
	}

	// initiate liner
	var linerDB LinerDB
	linerDB.CopyBasicFieldsFromLiner(liner)

	query := backRepoLiner.db.Create(&linerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoLiner.Map_LinerPtr_LinerDBID)[liner] = linerDB.ID
	(*backRepoLiner.Map_LinerDBID_LinerPtr)[linerDB.ID] = liner
	(*backRepoLiner.Map_LinerDBID_LinerDB)[linerDB.ID] = &linerDB

	return
}

// BackRepoLiner.CommitPhaseTwo commits all staged instances of Liner to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLiner *BackRepoLinerStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, liner := range *backRepoLiner.Map_LinerDBID_LinerPtr {
		backRepoLiner.CommitPhaseTwoInstance(backRepo, idx, liner)
	}

	return
}

// BackRepoLiner.CommitPhaseTwoInstance commits {{structname }} of models.Liner to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLiner *BackRepoLinerStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, liner *models.Liner) (Error error) {

	// fetch matching linerDB
	if linerDB, ok := (*backRepoLiner.Map_LinerDBID_LinerDB)[idx]; ok {

		linerDB.CopyBasicFieldsFromLiner(liner)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value liner.ReporingLine translates to updating the liner.ReporingLineID
		linerDB.ReporingLineID.Valid = true // allow for a 0 value (nil association)
		if liner.ReporingLine != nil {
			if ReporingLineId, ok := (*backRepo.BackRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[liner.ReporingLine]; ok {
				linerDB.ReporingLineID.Int64 = int64(ReporingLineId)
				linerDB.ReporingLineID.Valid = true
			}
		}

		query := backRepoLiner.db.Save(&linerDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Liner intance %s", liner.Name))
		return err
	}

	return
}

// BackRepoLiner.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoLiner *BackRepoLinerStruct) CheckoutPhaseOne() (Error error) {

	linerDBArray := make([]LinerDB, 0)
	query := backRepoLiner.db.Find(&linerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	linerInstancesToBeRemovedFromTheStage := make(map[*models.Liner]any)
	for key, value := range models.Stage.Liners {
		linerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, linerDB := range linerDBArray {
		backRepoLiner.CheckoutPhaseOneInstance(&linerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		liner, ok := (*backRepoLiner.Map_LinerDBID_LinerPtr)[linerDB.ID]
		if ok {
			delete(linerInstancesToBeRemovedFromTheStage, liner)
		}
	}

	// remove from stage and back repo's 3 maps all liners that are not in the checkout
	for liner := range linerInstancesToBeRemovedFromTheStage {
		liner.Unstage()

		// remove instance from the back repo 3 maps
		linerID := (*backRepoLiner.Map_LinerPtr_LinerDBID)[liner]
		delete((*backRepoLiner.Map_LinerPtr_LinerDBID), liner)
		delete((*backRepoLiner.Map_LinerDBID_LinerDB), linerID)
		delete((*backRepoLiner.Map_LinerDBID_LinerPtr), linerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a linerDB that has been found in the DB, updates the backRepo and stages the
// models version of the linerDB
func (backRepoLiner *BackRepoLinerStruct) CheckoutPhaseOneInstance(linerDB *LinerDB) (Error error) {

	liner, ok := (*backRepoLiner.Map_LinerDBID_LinerPtr)[linerDB.ID]
	if !ok {
		liner = new(models.Liner)

		(*backRepoLiner.Map_LinerDBID_LinerPtr)[linerDB.ID] = liner
		(*backRepoLiner.Map_LinerPtr_LinerDBID)[liner] = linerDB.ID

		// append model store with the new element
		liner.Name = linerDB.Name_Data.String
		liner.Stage()
	}
	linerDB.CopyBasicFieldsToLiner(liner)

	// preserve pointer to linerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LinerDBID_LinerDB)[linerDB hold variable pointers
	linerDB_Data := *linerDB
	preservedPtrToLiner := &linerDB_Data
	(*backRepoLiner.Map_LinerDBID_LinerDB)[linerDB.ID] = preservedPtrToLiner

	return
}

// BackRepoLiner.CheckoutPhaseTwo Checkouts all staged instances of Liner to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLiner *BackRepoLinerStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, linerDB := range *backRepoLiner.Map_LinerDBID_LinerDB {
		backRepoLiner.CheckoutPhaseTwoInstance(backRepo, linerDB)
	}
	return
}

// BackRepoLiner.CheckoutPhaseTwoInstance Checkouts staged instances of Liner to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLiner *BackRepoLinerStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, linerDB *LinerDB) (Error error) {

	liner := (*backRepoLiner.Map_LinerDBID_LinerPtr)[linerDB.ID]
	_ = liner // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// ReporingLine field
	if linerDB.ReporingLineID.Int64 != 0 {
		liner.ReporingLine = (*backRepo.BackRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[uint(linerDB.ReporingLineID.Int64)]
	}
	return
}

// CommitLiner allows commit of a single liner (if already staged)
func (backRepo *BackRepoStruct) CommitLiner(liner *models.Liner) {
	backRepo.BackRepoLiner.CommitPhaseOneInstance(liner)
	if id, ok := (*backRepo.BackRepoLiner.Map_LinerPtr_LinerDBID)[liner]; ok {
		backRepo.BackRepoLiner.CommitPhaseTwoInstance(backRepo, id, liner)
	}
}

// CommitLiner allows checkout of a single liner (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLiner(liner *models.Liner) {
	// check if the liner is staged
	if _, ok := (*backRepo.BackRepoLiner.Map_LinerPtr_LinerDBID)[liner]; ok {

		if id, ok := (*backRepo.BackRepoLiner.Map_LinerPtr_LinerDBID)[liner]; ok {
			var linerDB LinerDB
			linerDB.ID = id

			if err := backRepo.BackRepoLiner.db.First(&linerDB, id).Error; err != nil {
				log.Panicln("CheckoutLiner : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLiner.CheckoutPhaseOneInstance(&linerDB)
			backRepo.BackRepoLiner.CheckoutPhaseTwoInstance(backRepo, &linerDB)
		}
	}
}

// CopyBasicFieldsFromLiner
func (linerDB *LinerDB) CopyBasicFieldsFromLiner(liner *models.Liner) {
	// insertion point for fields commit

	linerDB.Name_Data.String = liner.Name
	linerDB.Name_Data.Valid = true

	linerDB.Lat_Data.Float64 = liner.Lat
	linerDB.Lat_Data.Valid = true

	linerDB.Lng_Data.Float64 = liner.Lng
	linerDB.Lng_Data.Valid = true

	linerDB.Heading_Data.Float64 = liner.Heading
	linerDB.Heading_Data.Valid = true

	linerDB.Level_Data.Float64 = liner.Level
	linerDB.Level_Data.Valid = true

	linerDB.Speed_Data.Float64 = liner.Speed
	linerDB.Speed_Data.Valid = true

	linerDB.TechName_Data.String = liner.TechName
	linerDB.TechName_Data.Valid = true

	linerDB.State_Data.String = liner.State.ToString()
	linerDB.State_Data.Valid = true

	linerDB.TargetHeading_Data.Float64 = liner.TargetHeading
	linerDB.TargetHeading_Data.Valid = true

	linerDB.TargetLocationLat_Data.Float64 = liner.TargetLocationLat
	linerDB.TargetLocationLat_Data.Valid = true

	linerDB.TargetLocationLng_Data.Float64 = liner.TargetLocationLng
	linerDB.TargetLocationLng_Data.Valid = true

	linerDB.DistanceToTarget_Data.Float64 = liner.DistanceToTarget
	linerDB.DistanceToTarget_Data.Valid = true

	linerDB.MaxRotationalSpeed_Data.Float64 = liner.MaxRotationalSpeed
	linerDB.MaxRotationalSpeed_Data.Valid = true

	linerDB.VerticalSpeed_Data.Float64 = liner.VerticalSpeed
	linerDB.VerticalSpeed_Data.Valid = true

	linerDB.Timestampstring_Data.String = liner.Timestampstring
	linerDB.Timestampstring_Data.Valid = true
}

// CopyBasicFieldsFromLinerWOP
func (linerDB *LinerDB) CopyBasicFieldsFromLinerWOP(liner *LinerWOP) {
	// insertion point for fields commit

	linerDB.Name_Data.String = liner.Name
	linerDB.Name_Data.Valid = true

	linerDB.Lat_Data.Float64 = liner.Lat
	linerDB.Lat_Data.Valid = true

	linerDB.Lng_Data.Float64 = liner.Lng
	linerDB.Lng_Data.Valid = true

	linerDB.Heading_Data.Float64 = liner.Heading
	linerDB.Heading_Data.Valid = true

	linerDB.Level_Data.Float64 = liner.Level
	linerDB.Level_Data.Valid = true

	linerDB.Speed_Data.Float64 = liner.Speed
	linerDB.Speed_Data.Valid = true

	linerDB.TechName_Data.String = liner.TechName
	linerDB.TechName_Data.Valid = true

	linerDB.State_Data.String = liner.State.ToString()
	linerDB.State_Data.Valid = true

	linerDB.TargetHeading_Data.Float64 = liner.TargetHeading
	linerDB.TargetHeading_Data.Valid = true

	linerDB.TargetLocationLat_Data.Float64 = liner.TargetLocationLat
	linerDB.TargetLocationLat_Data.Valid = true

	linerDB.TargetLocationLng_Data.Float64 = liner.TargetLocationLng
	linerDB.TargetLocationLng_Data.Valid = true

	linerDB.DistanceToTarget_Data.Float64 = liner.DistanceToTarget
	linerDB.DistanceToTarget_Data.Valid = true

	linerDB.MaxRotationalSpeed_Data.Float64 = liner.MaxRotationalSpeed
	linerDB.MaxRotationalSpeed_Data.Valid = true

	linerDB.VerticalSpeed_Data.Float64 = liner.VerticalSpeed
	linerDB.VerticalSpeed_Data.Valid = true

	linerDB.Timestampstring_Data.String = liner.Timestampstring
	linerDB.Timestampstring_Data.Valid = true
}

// CopyBasicFieldsToLiner
func (linerDB *LinerDB) CopyBasicFieldsToLiner(liner *models.Liner) {
	// insertion point for checkout of basic fields (back repo to stage)
	liner.Name = linerDB.Name_Data.String
	liner.Lat = linerDB.Lat_Data.Float64
	liner.Lng = linerDB.Lng_Data.Float64
	liner.Heading = linerDB.Heading_Data.Float64
	liner.Level = linerDB.Level_Data.Float64
	liner.Speed = linerDB.Speed_Data.Float64
	liner.TechName = linerDB.TechName_Data.String
	liner.State.FromString(linerDB.State_Data.String)
	liner.TargetHeading = linerDB.TargetHeading_Data.Float64
	liner.TargetLocationLat = linerDB.TargetLocationLat_Data.Float64
	liner.TargetLocationLng = linerDB.TargetLocationLng_Data.Float64
	liner.DistanceToTarget = linerDB.DistanceToTarget_Data.Float64
	liner.MaxRotationalSpeed = linerDB.MaxRotationalSpeed_Data.Float64
	liner.VerticalSpeed = linerDB.VerticalSpeed_Data.Float64
	liner.Timestampstring = linerDB.Timestampstring_Data.String
}

// CopyBasicFieldsToLinerWOP
func (linerDB *LinerDB) CopyBasicFieldsToLinerWOP(liner *LinerWOP) {
	liner.ID = int(linerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	liner.Name = linerDB.Name_Data.String
	liner.Lat = linerDB.Lat_Data.Float64
	liner.Lng = linerDB.Lng_Data.Float64
	liner.Heading = linerDB.Heading_Data.Float64
	liner.Level = linerDB.Level_Data.Float64
	liner.Speed = linerDB.Speed_Data.Float64
	liner.TechName = linerDB.TechName_Data.String
	liner.State.FromString(linerDB.State_Data.String)
	liner.TargetHeading = linerDB.TargetHeading_Data.Float64
	liner.TargetLocationLat = linerDB.TargetLocationLat_Data.Float64
	liner.TargetLocationLng = linerDB.TargetLocationLng_Data.Float64
	liner.DistanceToTarget = linerDB.DistanceToTarget_Data.Float64
	liner.MaxRotationalSpeed = linerDB.MaxRotationalSpeed_Data.Float64
	liner.VerticalSpeed = linerDB.VerticalSpeed_Data.Float64
	liner.Timestampstring = linerDB.Timestampstring_Data.String
}

// Backup generates a json file from a slice of all LinerDB instances in the backrepo
func (backRepoLiner *BackRepoLinerStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LinerDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LinerDB, 0)
	for _, linerDB := range *backRepoLiner.Map_LinerDBID_LinerDB {
		forBackup = append(forBackup, linerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Liner ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Liner file", err.Error())
	}
}

// Backup generates a json file from a slice of all LinerDB instances in the backrepo
func (backRepoLiner *BackRepoLinerStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LinerDB, 0)
	for _, linerDB := range *backRepoLiner.Map_LinerDBID_LinerDB {
		forBackup = append(forBackup, linerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Liner")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Liner_Fields, -1)
	for _, linerDB := range forBackup {

		var linerWOP LinerWOP
		linerDB.CopyBasicFieldsToLinerWOP(&linerWOP)

		row := sh.AddRow()
		row.WriteStruct(&linerWOP, -1)
	}
}

// RestoreXL from the "Liner" sheet all LinerDB instances
func (backRepoLiner *BackRepoLinerStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLinerid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Liner"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLiner.rowVisitorLiner)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoLiner *BackRepoLinerStruct) rowVisitorLiner(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var linerWOP LinerWOP
		row.ReadStruct(&linerWOP)

		// add the unmarshalled struct to the stage
		linerDB := new(LinerDB)
		linerDB.CopyBasicFieldsFromLinerWOP(&linerWOP)

		linerDB_ID_atBackupTime := linerDB.ID
		linerDB.ID = 0
		query := backRepoLiner.db.Create(linerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoLiner.Map_LinerDBID_LinerDB)[linerDB.ID] = linerDB
		BackRepoLinerid_atBckpTime_newID[linerDB_ID_atBackupTime] = linerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LinerDB.json" in dirPath that stores an array
// of LinerDB and stores it in the database
// the map BackRepoLinerid_atBckpTime_newID is updated accordingly
func (backRepoLiner *BackRepoLinerStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLinerid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LinerDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Liner file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LinerDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LinerDBID_LinerDB
	for _, linerDB := range forRestore {

		linerDB_ID_atBackupTime := linerDB.ID
		linerDB.ID = 0
		query := backRepoLiner.db.Create(linerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoLiner.Map_LinerDBID_LinerDB)[linerDB.ID] = linerDB
		BackRepoLinerid_atBckpTime_newID[linerDB_ID_atBackupTime] = linerDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Liner file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Liner>id_atBckpTime_newID
// to compute new index
func (backRepoLiner *BackRepoLinerStruct) RestorePhaseTwo() {

	for _, linerDB := range *backRepoLiner.Map_LinerDBID_LinerDB {

		// next line of code is to avert unused variable compilation error
		_ = linerDB

		// insertion point for reindexing pointers encoding
		// reindexing ReporingLine field
		if linerDB.ReporingLineID.Int64 != 0 {
			linerDB.ReporingLineID.Int64 = int64(BackRepoOpsLineid_atBckpTime_newID[uint(linerDB.ReporingLineID.Int64)])
			linerDB.ReporingLineID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoLiner.db.Model(linerDB).Updates(*linerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLinerid_atBckpTime_newID map[uint]uint
