// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Report_sql sql.NullBool
var dummy_Report_time time.Duration
var dummy_Report_sort sort.Float64Slice

// ReportAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model reportAPI
type ReportAPI struct {
	gorm.Model

	models.Report

	// encoding of pointers
	ReportPointersEnconding
}

// ReportPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ReportPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field About is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AboutID sql.NullInt64

	// field OpsLine is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	OpsLineID sql.NullInt64

}

// ReportDB describes a report in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model reportDB
type ReportDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field reportDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field reportDB.Duration {{BasicKind}} (to be completed)
	Duration_Data sql.NullInt64

	// Declation for basic field reportDB.ReportMessage {{BasicKind}} (to be completed)
	ReportMessage_Data sql.NullString

	// Declation for basic field reportDB.Number {{BasicKind}} (to be completed)
	Number_Data sql.NullInt64

	// Declation for basic field reportDB.Type {{BasicKind}} (to be completed)
	Type_Data sql.NullString

	// encoding of pointers
	ReportPointersEnconding
}

// ReportDBs arrays reportDBs
// swagger:response reportDBsResponse
type ReportDBs []ReportDB

// ReportDBResponse provides response
// swagger:response reportDBResponse
type ReportDBResponse struct {
	ReportDB
}

// ReportWOP is a Report without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ReportWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	Duration time.Duration

	ReportMessage string

	Number int

	Type models.ReportEnum
	// insertion for WOP pointer fields
}

var Report_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Duration",
	"ReportMessage",
	"Number",
	"Type",
}

type BackRepoReportStruct struct {
	// stores ReportDB according to their gorm ID
	Map_ReportDBID_ReportDB *map[uint]*ReportDB

	// stores ReportDB ID according to Report address
	Map_ReportPtr_ReportDBID *map[*models.Report]uint

	// stores Report according to their gorm ID
	Map_ReportDBID_ReportPtr *map[uint]*models.Report

	db *gorm.DB
}

func (backRepoReport *BackRepoReportStruct) GetDB() *gorm.DB {
	return backRepoReport.db
}

// GetReportDBFromReportPtr is a handy function to access the back repo instance from the stage instance
func (backRepoReport *BackRepoReportStruct) GetReportDBFromReportPtr(report *models.Report) (reportDB *ReportDB) {
	id := (*backRepoReport.Map_ReportPtr_ReportDBID)[report]
	reportDB = (*backRepoReport.Map_ReportDBID_ReportDB)[id]
	return
}

// BackRepoReport.Init set up the BackRepo of the Report
func (backRepoReport *BackRepoReportStruct) Init(db *gorm.DB) (Error error) {

	if backRepoReport.Map_ReportDBID_ReportPtr != nil {
		err := errors.New("In Init, backRepoReport.Map_ReportDBID_ReportPtr should be nil")
		return err
	}

	if backRepoReport.Map_ReportDBID_ReportDB != nil {
		err := errors.New("In Init, backRepoReport.Map_ReportDBID_ReportDB should be nil")
		return err
	}

	if backRepoReport.Map_ReportPtr_ReportDBID != nil {
		err := errors.New("In Init, backRepoReport.Map_ReportPtr_ReportDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Report, 0)
	backRepoReport.Map_ReportDBID_ReportPtr = &tmp

	tmpDB := make(map[uint]*ReportDB, 0)
	backRepoReport.Map_ReportDBID_ReportDB = &tmpDB

	tmpID := make(map[*models.Report]uint, 0)
	backRepoReport.Map_ReportPtr_ReportDBID = &tmpID

	backRepoReport.db = db
	return
}

// BackRepoReport.CommitPhaseOne commits all staged instances of Report to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoReport *BackRepoReportStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for report := range stage.Reports {
		backRepoReport.CommitPhaseOneInstance(report)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, report := range *backRepoReport.Map_ReportDBID_ReportPtr {
		if _, ok := stage.Reports[report]; !ok {
			backRepoReport.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoReport.CommitDeleteInstance commits deletion of Report to the BackRepo
func (backRepoReport *BackRepoReportStruct) CommitDeleteInstance(id uint) (Error error) {

	report := (*backRepoReport.Map_ReportDBID_ReportPtr)[id]

	// report is not staged anymore, remove reportDB
	reportDB := (*backRepoReport.Map_ReportDBID_ReportDB)[id]
	query := backRepoReport.db.Unscoped().Delete(&reportDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoReport.Map_ReportPtr_ReportDBID), report)
	delete((*backRepoReport.Map_ReportDBID_ReportPtr), id)
	delete((*backRepoReport.Map_ReportDBID_ReportDB), id)

	return
}

// BackRepoReport.CommitPhaseOneInstance commits report staged instances of Report to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoReport *BackRepoReportStruct) CommitPhaseOneInstance(report *models.Report) (Error error) {

	// check if the report is not commited yet
	if _, ok := (*backRepoReport.Map_ReportPtr_ReportDBID)[report]; ok {
		return
	}

	// initiate report
	var reportDB ReportDB
	reportDB.CopyBasicFieldsFromReport(report)

	query := backRepoReport.db.Create(&reportDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoReport.Map_ReportPtr_ReportDBID)[report] = reportDB.ID
	(*backRepoReport.Map_ReportDBID_ReportPtr)[reportDB.ID] = report
	(*backRepoReport.Map_ReportDBID_ReportDB)[reportDB.ID] = &reportDB

	return
}

// BackRepoReport.CommitPhaseTwo commits all staged instances of Report to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReport *BackRepoReportStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, report := range *backRepoReport.Map_ReportDBID_ReportPtr {
		backRepoReport.CommitPhaseTwoInstance(backRepo, idx, report)
	}

	return
}

// BackRepoReport.CommitPhaseTwoInstance commits {{structname }} of models.Report to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReport *BackRepoReportStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, report *models.Report) (Error error) {

	// fetch matching reportDB
	if reportDB, ok := (*backRepoReport.Map_ReportDBID_ReportDB)[idx]; ok {

		reportDB.CopyBasicFieldsFromReport(report)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value report.About translates to updating the report.AboutID
		reportDB.AboutID.Valid = true // allow for a 0 value (nil association)
		if report.About != nil {
			if AboutId, ok := (*backRepo.BackRepoLiner.Map_LinerPtr_LinerDBID)[report.About]; ok {
				reportDB.AboutID.Int64 = int64(AboutId)
			}
		}

		// commit pointer value report.OpsLine translates to updating the report.OpsLineID
		reportDB.OpsLineID.Valid = true // allow for a 0 value (nil association)
		if report.OpsLine != nil {
			if OpsLineId, ok := (*backRepo.BackRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[report.OpsLine]; ok {
				reportDB.OpsLineID.Int64 = int64(OpsLineId)
			}
		}

		query := backRepoReport.db.Save(&reportDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Report intance %s", report.Name))
		return err
	}

	return
}

// BackRepoReport.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoReport *BackRepoReportStruct) CheckoutPhaseOne() (Error error) {

	reportDBArray := make([]ReportDB, 0)
	query := backRepoReport.db.Find(&reportDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	reportInstancesToBeRemovedFromTheStage := make(map[*models.Report]struct{})
	for key, value := range models.Stage.Reports {
		reportInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, reportDB := range reportDBArray {
		backRepoReport.CheckoutPhaseOneInstance(&reportDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		report, ok := (*backRepoReport.Map_ReportDBID_ReportPtr)[reportDB.ID]
		if ok {
			delete(reportInstancesToBeRemovedFromTheStage, report)
		}
	}

	// remove from stage and back repo's 3 maps all reports that are not in the checkout
	for report := range reportInstancesToBeRemovedFromTheStage {
		report.Unstage()

		// remove instance from the back repo 3 maps
		reportID := (*backRepoReport.Map_ReportPtr_ReportDBID)[report]
		delete((*backRepoReport.Map_ReportPtr_ReportDBID), report)
		delete((*backRepoReport.Map_ReportDBID_ReportDB), reportID)
		delete((*backRepoReport.Map_ReportDBID_ReportPtr), reportID)
	}

	return
}

// CheckoutPhaseOneInstance takes a reportDB that has been found in the DB, updates the backRepo and stages the
// models version of the reportDB
func (backRepoReport *BackRepoReportStruct) CheckoutPhaseOneInstance(reportDB *ReportDB) (Error error) {

	report, ok := (*backRepoReport.Map_ReportDBID_ReportPtr)[reportDB.ID]
	if !ok {
		report = new(models.Report)

		(*backRepoReport.Map_ReportDBID_ReportPtr)[reportDB.ID] = report
		(*backRepoReport.Map_ReportPtr_ReportDBID)[report] = reportDB.ID

		// append model store with the new element
		report.Name = reportDB.Name_Data.String
		report.Stage()
	}
	reportDB.CopyBasicFieldsToReport(report)

	// preserve pointer to reportDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ReportDBID_ReportDB)[reportDB hold variable pointers
	reportDB_Data := *reportDB
	preservedPtrToReport := &reportDB_Data
	(*backRepoReport.Map_ReportDBID_ReportDB)[reportDB.ID] = preservedPtrToReport

	return
}

// BackRepoReport.CheckoutPhaseTwo Checkouts all staged instances of Report to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReport *BackRepoReportStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, reportDB := range *backRepoReport.Map_ReportDBID_ReportDB {
		backRepoReport.CheckoutPhaseTwoInstance(backRepo, reportDB)
	}
	return
}

// BackRepoReport.CheckoutPhaseTwoInstance Checkouts staged instances of Report to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoReport *BackRepoReportStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, reportDB *ReportDB) (Error error) {

	report := (*backRepoReport.Map_ReportDBID_ReportPtr)[reportDB.ID]
	_ = report // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// About field
	if reportDB.AboutID.Int64 != 0 {
		report.About = (*backRepo.BackRepoLiner.Map_LinerDBID_LinerPtr)[uint(reportDB.AboutID.Int64)]
	}
	// OpsLine field
	if reportDB.OpsLineID.Int64 != 0 {
		report.OpsLine = (*backRepo.BackRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[uint(reportDB.OpsLineID.Int64)]
	}
	return
}

// CommitReport allows commit of a single report (if already staged)
func (backRepo *BackRepoStruct) CommitReport(report *models.Report) {
	backRepo.BackRepoReport.CommitPhaseOneInstance(report)
	if id, ok := (*backRepo.BackRepoReport.Map_ReportPtr_ReportDBID)[report]; ok {
		backRepo.BackRepoReport.CommitPhaseTwoInstance(backRepo, id, report)
	}
}

// CommitReport allows checkout of a single report (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutReport(report *models.Report) {
	// check if the report is staged
	if _, ok := (*backRepo.BackRepoReport.Map_ReportPtr_ReportDBID)[report]; ok {

		if id, ok := (*backRepo.BackRepoReport.Map_ReportPtr_ReportDBID)[report]; ok {
			var reportDB ReportDB
			reportDB.ID = id

			if err := backRepo.BackRepoReport.db.First(&reportDB, id).Error; err != nil {
				log.Panicln("CheckoutReport : Problem with getting object with id:", id)
			}
			backRepo.BackRepoReport.CheckoutPhaseOneInstance(&reportDB)
			backRepo.BackRepoReport.CheckoutPhaseTwoInstance(backRepo, &reportDB)
		}
	}
}

// CopyBasicFieldsFromReport
func (reportDB *ReportDB) CopyBasicFieldsFromReport(report *models.Report) {
	// insertion point for fields commit
	reportDB.Name_Data.String = report.Name
	reportDB.Name_Data.Valid = true

	reportDB.Duration_Data.Int64 = int64(report.Duration)
	reportDB.Duration_Data.Valid = true

	reportDB.ReportMessage_Data.String = report.ReportMessage
	reportDB.ReportMessage_Data.Valid = true

	reportDB.Number_Data.Int64 = int64(report.Number)
	reportDB.Number_Data.Valid = true

	reportDB.Type_Data.String = string(report.Type)
	reportDB.Type_Data.Valid = true

}

// CopyBasicFieldsFromReportWOP
func (reportDB *ReportDB) CopyBasicFieldsFromReportWOP(report *ReportWOP) {
	// insertion point for fields commit
	reportDB.Name_Data.String = report.Name
	reportDB.Name_Data.Valid = true

	reportDB.Duration_Data.Int64 = int64(report.Duration)
	reportDB.Duration_Data.Valid = true

	reportDB.ReportMessage_Data.String = report.ReportMessage
	reportDB.ReportMessage_Data.Valid = true

	reportDB.Number_Data.Int64 = int64(report.Number)
	reportDB.Number_Data.Valid = true

	reportDB.Type_Data.String = string(report.Type)
	reportDB.Type_Data.Valid = true

}

// CopyBasicFieldsToReport
func (reportDB *ReportDB) CopyBasicFieldsToReport(report *models.Report) {
	// insertion point for checkout of basic fields (back repo to stage)
	report.Name = reportDB.Name_Data.String
	report.Duration = time.Duration(reportDB.Duration_Data.Int64)
	report.ReportMessage = reportDB.ReportMessage_Data.String
	report.Number = int(reportDB.Number_Data.Int64)
	report.Type = models.ReportEnum(reportDB.Type_Data.String)
}

// CopyBasicFieldsToReportWOP
func (reportDB *ReportDB) CopyBasicFieldsToReportWOP(report *ReportWOP) {
	report.ID = int(reportDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	report.Name = reportDB.Name_Data.String
	report.Duration = time.Duration(reportDB.Duration_Data.Int64)
	report.ReportMessage = reportDB.ReportMessage_Data.String
	report.Number = int(reportDB.Number_Data.Int64)
	report.Type = models.ReportEnum(reportDB.Type_Data.String)
}

// Backup generates a json file from a slice of all ReportDB instances in the backrepo
func (backRepoReport *BackRepoReportStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ReportDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReportDB, 0)
	for _, reportDB := range *backRepoReport.Map_ReportDBID_ReportDB {
		forBackup = append(forBackup, reportDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Report ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Report file", err.Error())
	}
}

// Backup generates a json file from a slice of all ReportDB instances in the backrepo
func (backRepoReport *BackRepoReportStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReportDB, 0)
	for _, reportDB := range *backRepoReport.Map_ReportDBID_ReportDB {
		forBackup = append(forBackup, reportDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Report")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Report_Fields, -1)
	for _, reportDB := range forBackup {

		var reportWOP ReportWOP
		reportDB.CopyBasicFieldsToReportWOP(&reportWOP)

		row := sh.AddRow()
		row.WriteStruct(&reportWOP, -1)
	}
}

// RestorePhaseOne read the file "ReportDB.json" in dirPath that stores an array
// of ReportDB and stores it in the database
// the map BackRepoReportid_atBckpTime_newID is updated accordingly
func (backRepoReport *BackRepoReportStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoReportid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ReportDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Report file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ReportDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ReportDBID_ReportDB
	for _, reportDB := range forRestore {

		reportDB_ID_atBackupTime := reportDB.ID
		reportDB.ID = 0
		query := backRepoReport.db.Create(reportDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoReport.Map_ReportDBID_ReportDB)[reportDB.ID] = reportDB
		BackRepoReportid_atBckpTime_newID[reportDB_ID_atBackupTime] = reportDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Report file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Report>id_atBckpTime_newID
// to compute new index
func (backRepoReport *BackRepoReportStruct) RestorePhaseTwo() {

	for _, reportDB := range *backRepoReport.Map_ReportDBID_ReportDB {

		// next line of code is to avert unused variable compilation error
		_ = reportDB

		// insertion point for reindexing pointers encoding
		// reindexing About field
		if reportDB.AboutID.Int64 != 0 {
			reportDB.AboutID.Int64 = int64(BackRepoLinerid_atBckpTime_newID[uint(reportDB.AboutID.Int64)])
		}

		// reindexing OpsLine field
		if reportDB.OpsLineID.Int64 != 0 {
			reportDB.OpsLineID.Int64 = int64(BackRepoOpsLineid_atBckpTime_newID[uint(reportDB.OpsLineID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoReport.db.Model(reportDB).Updates(*reportDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoReportid_atBckpTime_newID map[uint]uint
