// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Message_sql sql.NullBool
var dummy_Message_time time.Duration
var dummy_Message_sort sort.Float64Slice

// MessageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model messageAPI
type MessageAPI struct {
	gorm.Model

	models.Message

	// encoding of pointers
	MessagePointersEnconding
}

// MessagePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MessagePointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// MessageDB describes a message in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model messageDB
type MessageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field messageDB.Lat
	Lat_Data sql.NullFloat64

	// Declation for basic field messageDB.Lng
	Lng_Data sql.NullFloat64

	// Declation for basic field messageDB.Heading
	Heading_Data sql.NullFloat64

	// Declation for basic field messageDB.Level
	Level_Data sql.NullFloat64

	// Declation for basic field messageDB.Speed
	Speed_Data sql.NullFloat64

	// Declation for basic field messageDB.State
	State_Data sql.NullString

	// Declation for basic field messageDB.Name
	Name_Data sql.NullString

	// Declation for basic field messageDB.TargetLocationLat
	TargetLocationLat_Data sql.NullFloat64

	// Declation for basic field messageDB.TargetLocationLng
	TargetLocationLng_Data sql.NullFloat64

	// Declation for basic field messageDB.DistanceToTarget
	DistanceToTarget_Data sql.NullFloat64

	// Declation for basic field messageDB.Timestampstring
	Timestampstring_Data sql.NullString

	// Declation for basic field messageDB.DurationSinceSimulationStart
	DurationSinceSimulationStart_Data sql.NullInt64

	// Declation for basic field messageDB.Timestampstartstring
	Timestampstartstring_Data sql.NullString

	// Declation for basic field messageDB.Source
	Source_Data sql.NullString

	// Declation for basic field messageDB.Destination
	Destination_Data sql.NullString

	// Declation for basic field messageDB.Content
	Content_Data sql.NullString

	// Declation for basic field messageDB.About_string
	About_string_Data sql.NullString

	// Declation for basic field messageDB.Display
	// provide the sql storage for the boolan
	Display_Data sql.NullBool
	// encoding of pointers
	MessagePointersEnconding
}

// MessageDBs arrays messageDBs
// swagger:response messageDBsResponse
type MessageDBs []MessageDB

// MessageDBResponse provides response
// swagger:response messageDBResponse
type MessageDBResponse struct {
	MessageDB
}

// MessageWOP is a Message without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MessageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Lat float64 `xlsx:"1"`

	Lng float64 `xlsx:"2"`

	Heading float64 `xlsx:"3"`

	Level float64 `xlsx:"4"`

	Speed float64 `xlsx:"5"`

	State models.MessageStateEnum `xlsx:"6"`

	Name string `xlsx:"7"`

	TargetLocationLat float64 `xlsx:"8"`

	TargetLocationLng float64 `xlsx:"9"`

	DistanceToTarget float64 `xlsx:"10"`

	Timestampstring string `xlsx:"11"`

	DurationSinceSimulationStart time.Duration `xlsx:"12"`

	Timestampstartstring string `xlsx:"13"`

	Source string `xlsx:"14"`

	Destination string `xlsx:"15"`

	Content string `xlsx:"16"`

	About_string string `xlsx:"17"`

	Display bool `xlsx:"18"`
	// insertion for WOP pointer fields
}

var Message_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Heading",
	"Level",
	"Speed",
	"State",
	"Name",
	"TargetLocationLat",
	"TargetLocationLng",
	"DistanceToTarget",
	"Timestampstring",
	"DurationSinceSimulationStart",
	"Timestampstartstring",
	"Source",
	"Destination",
	"Content",
	"About_string",
	"Display",
}

type BackRepoMessageStruct struct {
	// stores MessageDB according to their gorm ID
	Map_MessageDBID_MessageDB *map[uint]*MessageDB

	// stores MessageDB ID according to Message address
	Map_MessagePtr_MessageDBID *map[*models.Message]uint

	// stores Message according to their gorm ID
	Map_MessageDBID_MessagePtr *map[uint]*models.Message

	db *gorm.DB
}

func (backRepoMessage *BackRepoMessageStruct) GetDB() *gorm.DB {
	return backRepoMessage.db
}

// GetMessageDBFromMessagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMessage *BackRepoMessageStruct) GetMessageDBFromMessagePtr(message *models.Message) (messageDB *MessageDB) {
	id := (*backRepoMessage.Map_MessagePtr_MessageDBID)[message]
	messageDB = (*backRepoMessage.Map_MessageDBID_MessageDB)[id]
	return
}

// BackRepoMessage.Init set up the BackRepo of the Message
func (backRepoMessage *BackRepoMessageStruct) Init(db *gorm.DB) (Error error) {

	if backRepoMessage.Map_MessageDBID_MessagePtr != nil {
		err := errors.New("In Init, backRepoMessage.Map_MessageDBID_MessagePtr should be nil")
		return err
	}

	if backRepoMessage.Map_MessageDBID_MessageDB != nil {
		err := errors.New("In Init, backRepoMessage.Map_MessageDBID_MessageDB should be nil")
		return err
	}

	if backRepoMessage.Map_MessagePtr_MessageDBID != nil {
		err := errors.New("In Init, backRepoMessage.Map_MessagePtr_MessageDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Message, 0)
	backRepoMessage.Map_MessageDBID_MessagePtr = &tmp

	tmpDB := make(map[uint]*MessageDB, 0)
	backRepoMessage.Map_MessageDBID_MessageDB = &tmpDB

	tmpID := make(map[*models.Message]uint, 0)
	backRepoMessage.Map_MessagePtr_MessageDBID = &tmpID

	backRepoMessage.db = db
	return
}

// BackRepoMessage.CommitPhaseOne commits all staged instances of Message to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMessage *BackRepoMessageStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for message := range stage.Messages {
		backRepoMessage.CommitPhaseOneInstance(message)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, message := range *backRepoMessage.Map_MessageDBID_MessagePtr {
		if _, ok := stage.Messages[message]; !ok {
			backRepoMessage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMessage.CommitDeleteInstance commits deletion of Message to the BackRepo
func (backRepoMessage *BackRepoMessageStruct) CommitDeleteInstance(id uint) (Error error) {

	message := (*backRepoMessage.Map_MessageDBID_MessagePtr)[id]

	// message is not staged anymore, remove messageDB
	messageDB := (*backRepoMessage.Map_MessageDBID_MessageDB)[id]
	query := backRepoMessage.db.Unscoped().Delete(&messageDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoMessage.Map_MessagePtr_MessageDBID), message)
	delete((*backRepoMessage.Map_MessageDBID_MessagePtr), id)
	delete((*backRepoMessage.Map_MessageDBID_MessageDB), id)

	return
}

// BackRepoMessage.CommitPhaseOneInstance commits message staged instances of Message to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMessage *BackRepoMessageStruct) CommitPhaseOneInstance(message *models.Message) (Error error) {

	// check if the message is not commited yet
	if _, ok := (*backRepoMessage.Map_MessagePtr_MessageDBID)[message]; ok {
		return
	}

	// initiate message
	var messageDB MessageDB
	messageDB.CopyBasicFieldsFromMessage(message)

	query := backRepoMessage.db.Create(&messageDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoMessage.Map_MessagePtr_MessageDBID)[message] = messageDB.ID
	(*backRepoMessage.Map_MessageDBID_MessagePtr)[messageDB.ID] = message
	(*backRepoMessage.Map_MessageDBID_MessageDB)[messageDB.ID] = &messageDB

	return
}

// BackRepoMessage.CommitPhaseTwo commits all staged instances of Message to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMessage *BackRepoMessageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, message := range *backRepoMessage.Map_MessageDBID_MessagePtr {
		backRepoMessage.CommitPhaseTwoInstance(backRepo, idx, message)
	}

	return
}

// BackRepoMessage.CommitPhaseTwoInstance commits {{structname }} of models.Message to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMessage *BackRepoMessageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, message *models.Message) (Error error) {

	// fetch matching messageDB
	if messageDB, ok := (*backRepoMessage.Map_MessageDBID_MessageDB)[idx]; ok {

		messageDB.CopyBasicFieldsFromMessage(message)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMessage.db.Save(&messageDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Message intance %s", message.Name))
		return err
	}

	return
}

// BackRepoMessage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoMessage *BackRepoMessageStruct) CheckoutPhaseOne() (Error error) {

	messageDBArray := make([]MessageDB, 0)
	query := backRepoMessage.db.Find(&messageDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	messageInstancesToBeRemovedFromTheStage := make(map[*models.Message]any)
	for key, value := range models.Stage.Messages {
		messageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, messageDB := range messageDBArray {
		backRepoMessage.CheckoutPhaseOneInstance(&messageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		message, ok := (*backRepoMessage.Map_MessageDBID_MessagePtr)[messageDB.ID]
		if ok {
			delete(messageInstancesToBeRemovedFromTheStage, message)
		}
	}

	// remove from stage and back repo's 3 maps all messages that are not in the checkout
	for message := range messageInstancesToBeRemovedFromTheStage {
		message.Unstage()

		// remove instance from the back repo 3 maps
		messageID := (*backRepoMessage.Map_MessagePtr_MessageDBID)[message]
		delete((*backRepoMessage.Map_MessagePtr_MessageDBID), message)
		delete((*backRepoMessage.Map_MessageDBID_MessageDB), messageID)
		delete((*backRepoMessage.Map_MessageDBID_MessagePtr), messageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a messageDB that has been found in the DB, updates the backRepo and stages the
// models version of the messageDB
func (backRepoMessage *BackRepoMessageStruct) CheckoutPhaseOneInstance(messageDB *MessageDB) (Error error) {

	message, ok := (*backRepoMessage.Map_MessageDBID_MessagePtr)[messageDB.ID]
	if !ok {
		message = new(models.Message)

		(*backRepoMessage.Map_MessageDBID_MessagePtr)[messageDB.ID] = message
		(*backRepoMessage.Map_MessagePtr_MessageDBID)[message] = messageDB.ID

		// append model store with the new element
		message.Name = messageDB.Name_Data.String
		message.Stage()
	}
	messageDB.CopyBasicFieldsToMessage(message)

	// preserve pointer to messageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MessageDBID_MessageDB)[messageDB hold variable pointers
	messageDB_Data := *messageDB
	preservedPtrToMessage := &messageDB_Data
	(*backRepoMessage.Map_MessageDBID_MessageDB)[messageDB.ID] = preservedPtrToMessage

	return
}

// BackRepoMessage.CheckoutPhaseTwo Checkouts all staged instances of Message to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMessage *BackRepoMessageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, messageDB := range *backRepoMessage.Map_MessageDBID_MessageDB {
		backRepoMessage.CheckoutPhaseTwoInstance(backRepo, messageDB)
	}
	return
}

// BackRepoMessage.CheckoutPhaseTwoInstance Checkouts staged instances of Message to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMessage *BackRepoMessageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, messageDB *MessageDB) (Error error) {

	message := (*backRepoMessage.Map_MessageDBID_MessagePtr)[messageDB.ID]
	_ = message // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitMessage allows commit of a single message (if already staged)
func (backRepo *BackRepoStruct) CommitMessage(message *models.Message) {
	backRepo.BackRepoMessage.CommitPhaseOneInstance(message)
	if id, ok := (*backRepo.BackRepoMessage.Map_MessagePtr_MessageDBID)[message]; ok {
		backRepo.BackRepoMessage.CommitPhaseTwoInstance(backRepo, id, message)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMessage allows checkout of a single message (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMessage(message *models.Message) {
	// check if the message is staged
	if _, ok := (*backRepo.BackRepoMessage.Map_MessagePtr_MessageDBID)[message]; ok {

		if id, ok := (*backRepo.BackRepoMessage.Map_MessagePtr_MessageDBID)[message]; ok {
			var messageDB MessageDB
			messageDB.ID = id

			if err := backRepo.BackRepoMessage.db.First(&messageDB, id).Error; err != nil {
				log.Panicln("CheckoutMessage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMessage.CheckoutPhaseOneInstance(&messageDB)
			backRepo.BackRepoMessage.CheckoutPhaseTwoInstance(backRepo, &messageDB)
		}
	}
}

// CopyBasicFieldsFromMessage
func (messageDB *MessageDB) CopyBasicFieldsFromMessage(message *models.Message) {
	// insertion point for fields commit

	messageDB.Lat_Data.Float64 = message.Lat
	messageDB.Lat_Data.Valid = true

	messageDB.Lng_Data.Float64 = message.Lng
	messageDB.Lng_Data.Valid = true

	messageDB.Heading_Data.Float64 = message.Heading
	messageDB.Heading_Data.Valid = true

	messageDB.Level_Data.Float64 = message.Level
	messageDB.Level_Data.Valid = true

	messageDB.Speed_Data.Float64 = message.Speed
	messageDB.Speed_Data.Valid = true

	messageDB.State_Data.String = message.State.ToString()
	messageDB.State_Data.Valid = true

	messageDB.Name_Data.String = message.Name
	messageDB.Name_Data.Valid = true

	messageDB.TargetLocationLat_Data.Float64 = message.TargetLocationLat
	messageDB.TargetLocationLat_Data.Valid = true

	messageDB.TargetLocationLng_Data.Float64 = message.TargetLocationLng
	messageDB.TargetLocationLng_Data.Valid = true

	messageDB.DistanceToTarget_Data.Float64 = message.DistanceToTarget
	messageDB.DistanceToTarget_Data.Valid = true

	messageDB.Timestampstring_Data.String = message.Timestampstring
	messageDB.Timestampstring_Data.Valid = true

	messageDB.DurationSinceSimulationStart_Data.Int64 = int64(message.DurationSinceSimulationStart)
	messageDB.DurationSinceSimulationStart_Data.Valid = true

	messageDB.Timestampstartstring_Data.String = message.Timestampstartstring
	messageDB.Timestampstartstring_Data.Valid = true

	messageDB.Source_Data.String = message.Source
	messageDB.Source_Data.Valid = true

	messageDB.Destination_Data.String = message.Destination
	messageDB.Destination_Data.Valid = true

	messageDB.Content_Data.String = message.Content
	messageDB.Content_Data.Valid = true

	messageDB.About_string_Data.String = message.About_string
	messageDB.About_string_Data.Valid = true

	messageDB.Display_Data.Bool = message.Display
	messageDB.Display_Data.Valid = true
}

// CopyBasicFieldsFromMessageWOP
func (messageDB *MessageDB) CopyBasicFieldsFromMessageWOP(message *MessageWOP) {
	// insertion point for fields commit

	messageDB.Lat_Data.Float64 = message.Lat
	messageDB.Lat_Data.Valid = true

	messageDB.Lng_Data.Float64 = message.Lng
	messageDB.Lng_Data.Valid = true

	messageDB.Heading_Data.Float64 = message.Heading
	messageDB.Heading_Data.Valid = true

	messageDB.Level_Data.Float64 = message.Level
	messageDB.Level_Data.Valid = true

	messageDB.Speed_Data.Float64 = message.Speed
	messageDB.Speed_Data.Valid = true

	messageDB.State_Data.String = message.State.ToString()
	messageDB.State_Data.Valid = true

	messageDB.Name_Data.String = message.Name
	messageDB.Name_Data.Valid = true

	messageDB.TargetLocationLat_Data.Float64 = message.TargetLocationLat
	messageDB.TargetLocationLat_Data.Valid = true

	messageDB.TargetLocationLng_Data.Float64 = message.TargetLocationLng
	messageDB.TargetLocationLng_Data.Valid = true

	messageDB.DistanceToTarget_Data.Float64 = message.DistanceToTarget
	messageDB.DistanceToTarget_Data.Valid = true

	messageDB.Timestampstring_Data.String = message.Timestampstring
	messageDB.Timestampstring_Data.Valid = true

	messageDB.DurationSinceSimulationStart_Data.Int64 = int64(message.DurationSinceSimulationStart)
	messageDB.DurationSinceSimulationStart_Data.Valid = true

	messageDB.Timestampstartstring_Data.String = message.Timestampstartstring
	messageDB.Timestampstartstring_Data.Valid = true

	messageDB.Source_Data.String = message.Source
	messageDB.Source_Data.Valid = true

	messageDB.Destination_Data.String = message.Destination
	messageDB.Destination_Data.Valid = true

	messageDB.Content_Data.String = message.Content
	messageDB.Content_Data.Valid = true

	messageDB.About_string_Data.String = message.About_string
	messageDB.About_string_Data.Valid = true

	messageDB.Display_Data.Bool = message.Display
	messageDB.Display_Data.Valid = true
}

// CopyBasicFieldsToMessage
func (messageDB *MessageDB) CopyBasicFieldsToMessage(message *models.Message) {
	// insertion point for checkout of basic fields (back repo to stage)
	message.Lat = messageDB.Lat_Data.Float64
	message.Lng = messageDB.Lng_Data.Float64
	message.Heading = messageDB.Heading_Data.Float64
	message.Level = messageDB.Level_Data.Float64
	message.Speed = messageDB.Speed_Data.Float64
	message.State.FromString(messageDB.State_Data.String)
	message.Name = messageDB.Name_Data.String
	message.TargetLocationLat = messageDB.TargetLocationLat_Data.Float64
	message.TargetLocationLng = messageDB.TargetLocationLng_Data.Float64
	message.DistanceToTarget = messageDB.DistanceToTarget_Data.Float64
	message.Timestampstring = messageDB.Timestampstring_Data.String
	message.DurationSinceSimulationStart = time.Duration(messageDB.DurationSinceSimulationStart_Data.Int64)
	message.Timestampstartstring = messageDB.Timestampstartstring_Data.String
	message.Source = messageDB.Source_Data.String
	message.Destination = messageDB.Destination_Data.String
	message.Content = messageDB.Content_Data.String
	message.About_string = messageDB.About_string_Data.String
	message.Display = messageDB.Display_Data.Bool
}

// CopyBasicFieldsToMessageWOP
func (messageDB *MessageDB) CopyBasicFieldsToMessageWOP(message *MessageWOP) {
	message.ID = int(messageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	message.Lat = messageDB.Lat_Data.Float64
	message.Lng = messageDB.Lng_Data.Float64
	message.Heading = messageDB.Heading_Data.Float64
	message.Level = messageDB.Level_Data.Float64
	message.Speed = messageDB.Speed_Data.Float64
	message.State.FromString(messageDB.State_Data.String)
	message.Name = messageDB.Name_Data.String
	message.TargetLocationLat = messageDB.TargetLocationLat_Data.Float64
	message.TargetLocationLng = messageDB.TargetLocationLng_Data.Float64
	message.DistanceToTarget = messageDB.DistanceToTarget_Data.Float64
	message.Timestampstring = messageDB.Timestampstring_Data.String
	message.DurationSinceSimulationStart = time.Duration(messageDB.DurationSinceSimulationStart_Data.Int64)
	message.Timestampstartstring = messageDB.Timestampstartstring_Data.String
	message.Source = messageDB.Source_Data.String
	message.Destination = messageDB.Destination_Data.String
	message.Content = messageDB.Content_Data.String
	message.About_string = messageDB.About_string_Data.String
	message.Display = messageDB.Display_Data.Bool
}

// Backup generates a json file from a slice of all MessageDB instances in the backrepo
func (backRepoMessage *BackRepoMessageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MessageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MessageDB, 0)
	for _, messageDB := range *backRepoMessage.Map_MessageDBID_MessageDB {
		forBackup = append(forBackup, messageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Message ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Message file", err.Error())
	}
}

// Backup generates a json file from a slice of all MessageDB instances in the backrepo
func (backRepoMessage *BackRepoMessageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MessageDB, 0)
	for _, messageDB := range *backRepoMessage.Map_MessageDBID_MessageDB {
		forBackup = append(forBackup, messageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Message")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Message_Fields, -1)
	for _, messageDB := range forBackup {

		var messageWOP MessageWOP
		messageDB.CopyBasicFieldsToMessageWOP(&messageWOP)

		row := sh.AddRow()
		row.WriteStruct(&messageWOP, -1)
	}
}

// RestoreXL from the "Message" sheet all MessageDB instances
func (backRepoMessage *BackRepoMessageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMessageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Message"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMessage.rowVisitorMessage)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoMessage *BackRepoMessageStruct) rowVisitorMessage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var messageWOP MessageWOP
		row.ReadStruct(&messageWOP)

		// add the unmarshalled struct to the stage
		messageDB := new(MessageDB)
		messageDB.CopyBasicFieldsFromMessageWOP(&messageWOP)

		messageDB_ID_atBackupTime := messageDB.ID
		messageDB.ID = 0
		query := backRepoMessage.db.Create(messageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMessage.Map_MessageDBID_MessageDB)[messageDB.ID] = messageDB
		BackRepoMessageid_atBckpTime_newID[messageDB_ID_atBackupTime] = messageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MessageDB.json" in dirPath that stores an array
// of MessageDB and stores it in the database
// the map BackRepoMessageid_atBckpTime_newID is updated accordingly
func (backRepoMessage *BackRepoMessageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMessageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MessageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Message file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MessageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MessageDBID_MessageDB
	for _, messageDB := range forRestore {

		messageDB_ID_atBackupTime := messageDB.ID
		messageDB.ID = 0
		query := backRepoMessage.db.Create(messageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMessage.Map_MessageDBID_MessageDB)[messageDB.ID] = messageDB
		BackRepoMessageid_atBckpTime_newID[messageDB_ID_atBackupTime] = messageDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Message file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Message>id_atBckpTime_newID
// to compute new index
func (backRepoMessage *BackRepoMessageStruct) RestorePhaseTwo() {

	for _, messageDB := range *backRepoMessage.Map_MessageDBID_MessageDB {

		// next line of code is to avert unused variable compilation error
		_ = messageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMessage.db.Model(messageDB).Updates(*messageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMessageid_atBckpTime_newID map[uint]uint
