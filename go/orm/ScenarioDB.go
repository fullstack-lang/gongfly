// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Scenario_sql sql.NullBool
var dummy_Scenario_time time.Duration
var dummy_Scenario_sort sort.Float64Slice

// ScenarioAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model scenarioAPI
type ScenarioAPI struct {
	gorm.Model

	models.Scenario

	// encoding of pointers
	ScenarioPointersEnconding
}

// ScenarioPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ScenarioPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// ScenarioDB describes a scenario in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model scenarioDB
type ScenarioDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field scenarioDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field scenarioDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field scenarioDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field scenarioDB.ZoomLevel {{BasicKind}} (to be completed)
	ZoomLevel_Data sql.NullFloat64

	// Declation for basic field scenarioDB.MessageVisualSpeed {{BasicKind}} (to be completed)
	MessageVisualSpeed_Data sql.NullFloat64
	// encoding of pointers
	ScenarioPointersEnconding
}

// ScenarioDBs arrays scenarioDBs
// swagger:response scenarioDBsResponse
type ScenarioDBs []ScenarioDB

// ScenarioDBResponse provides response
// swagger:response scenarioDBResponse
type ScenarioDBResponse struct {
	ScenarioDB
}

// ScenarioWOP is a Scenario without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ScenarioWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Lat float64 `xlsx:"2"`

	Lng float64 `xlsx:"3"`

	ZoomLevel float64 `xlsx:"4"`

	MessageVisualSpeed float64 `xlsx:"5"`
	// insertion for WOP pointer fields
}

var Scenario_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Lat",
	"Lng",
	"ZoomLevel",
	"MessageVisualSpeed",
}

type BackRepoScenarioStruct struct {
	// stores ScenarioDB according to their gorm ID
	Map_ScenarioDBID_ScenarioDB *map[uint]*ScenarioDB

	// stores ScenarioDB ID according to Scenario address
	Map_ScenarioPtr_ScenarioDBID *map[*models.Scenario]uint

	// stores Scenario according to their gorm ID
	Map_ScenarioDBID_ScenarioPtr *map[uint]*models.Scenario

	db *gorm.DB
}

func (backRepoScenario *BackRepoScenarioStruct) GetDB() *gorm.DB {
	return backRepoScenario.db
}

// GetScenarioDBFromScenarioPtr is a handy function to access the back repo instance from the stage instance
func (backRepoScenario *BackRepoScenarioStruct) GetScenarioDBFromScenarioPtr(scenario *models.Scenario) (scenarioDB *ScenarioDB) {
	id := (*backRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario]
	scenarioDB = (*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[id]
	return
}

// BackRepoScenario.Init set up the BackRepo of the Scenario
func (backRepoScenario *BackRepoScenarioStruct) Init(db *gorm.DB) (Error error) {

	if backRepoScenario.Map_ScenarioDBID_ScenarioPtr != nil {
		err := errors.New("In Init, backRepoScenario.Map_ScenarioDBID_ScenarioPtr should be nil")
		return err
	}

	if backRepoScenario.Map_ScenarioDBID_ScenarioDB != nil {
		err := errors.New("In Init, backRepoScenario.Map_ScenarioDBID_ScenarioDB should be nil")
		return err
	}

	if backRepoScenario.Map_ScenarioPtr_ScenarioDBID != nil {
		err := errors.New("In Init, backRepoScenario.Map_ScenarioPtr_ScenarioDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Scenario, 0)
	backRepoScenario.Map_ScenarioDBID_ScenarioPtr = &tmp

	tmpDB := make(map[uint]*ScenarioDB, 0)
	backRepoScenario.Map_ScenarioDBID_ScenarioDB = &tmpDB

	tmpID := make(map[*models.Scenario]uint, 0)
	backRepoScenario.Map_ScenarioPtr_ScenarioDBID = &tmpID

	backRepoScenario.db = db
	return
}

// BackRepoScenario.CommitPhaseOne commits all staged instances of Scenario to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScenario *BackRepoScenarioStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for scenario := range stage.Scenarios {
		backRepoScenario.CommitPhaseOneInstance(scenario)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, scenario := range *backRepoScenario.Map_ScenarioDBID_ScenarioPtr {
		if _, ok := stage.Scenarios[scenario]; !ok {
			backRepoScenario.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScenario.CommitDeleteInstance commits deletion of Scenario to the BackRepo
func (backRepoScenario *BackRepoScenarioStruct) CommitDeleteInstance(id uint) (Error error) {

	scenario := (*backRepoScenario.Map_ScenarioDBID_ScenarioPtr)[id]

	// scenario is not staged anymore, remove scenarioDB
	scenarioDB := (*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[id]
	query := backRepoScenario.db.Unscoped().Delete(&scenarioDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoScenario.Map_ScenarioPtr_ScenarioDBID), scenario)
	delete((*backRepoScenario.Map_ScenarioDBID_ScenarioPtr), id)
	delete((*backRepoScenario.Map_ScenarioDBID_ScenarioDB), id)

	return
}

// BackRepoScenario.CommitPhaseOneInstance commits scenario staged instances of Scenario to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScenario *BackRepoScenarioStruct) CommitPhaseOneInstance(scenario *models.Scenario) (Error error) {

	// check if the scenario is not commited yet
	if _, ok := (*backRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario]; ok {
		return
	}

	// initiate scenario
	var scenarioDB ScenarioDB
	scenarioDB.CopyBasicFieldsFromScenario(scenario)

	query := backRepoScenario.db.Create(&scenarioDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario] = scenarioDB.ID
	(*backRepoScenario.Map_ScenarioDBID_ScenarioPtr)[scenarioDB.ID] = scenario
	(*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[scenarioDB.ID] = &scenarioDB

	return
}

// BackRepoScenario.CommitPhaseTwo commits all staged instances of Scenario to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScenario *BackRepoScenarioStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, scenario := range *backRepoScenario.Map_ScenarioDBID_ScenarioPtr {
		backRepoScenario.CommitPhaseTwoInstance(backRepo, idx, scenario)
	}

	return
}

// BackRepoScenario.CommitPhaseTwoInstance commits {{structname }} of models.Scenario to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScenario *BackRepoScenarioStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, scenario *models.Scenario) (Error error) {

	// fetch matching scenarioDB
	if scenarioDB, ok := (*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[idx]; ok {

		scenarioDB.CopyBasicFieldsFromScenario(scenario)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoScenario.db.Save(&scenarioDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Scenario intance %s", scenario.Name))
		return err
	}

	return
}

// BackRepoScenario.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoScenario *BackRepoScenarioStruct) CheckoutPhaseOne() (Error error) {

	scenarioDBArray := make([]ScenarioDB, 0)
	query := backRepoScenario.db.Find(&scenarioDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	scenarioInstancesToBeRemovedFromTheStage := make(map[*models.Scenario]any)
	for key, value := range models.Stage.Scenarios {
		scenarioInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, scenarioDB := range scenarioDBArray {
		backRepoScenario.CheckoutPhaseOneInstance(&scenarioDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		scenario, ok := (*backRepoScenario.Map_ScenarioDBID_ScenarioPtr)[scenarioDB.ID]
		if ok {
			delete(scenarioInstancesToBeRemovedFromTheStage, scenario)
		}
	}

	// remove from stage and back repo's 3 maps all scenarios that are not in the checkout
	for scenario := range scenarioInstancesToBeRemovedFromTheStage {
		scenario.Unstage()

		// remove instance from the back repo 3 maps
		scenarioID := (*backRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario]
		delete((*backRepoScenario.Map_ScenarioPtr_ScenarioDBID), scenario)
		delete((*backRepoScenario.Map_ScenarioDBID_ScenarioDB), scenarioID)
		delete((*backRepoScenario.Map_ScenarioDBID_ScenarioPtr), scenarioID)
	}

	return
}

// CheckoutPhaseOneInstance takes a scenarioDB that has been found in the DB, updates the backRepo and stages the
// models version of the scenarioDB
func (backRepoScenario *BackRepoScenarioStruct) CheckoutPhaseOneInstance(scenarioDB *ScenarioDB) (Error error) {

	scenario, ok := (*backRepoScenario.Map_ScenarioDBID_ScenarioPtr)[scenarioDB.ID]
	if !ok {
		scenario = new(models.Scenario)

		(*backRepoScenario.Map_ScenarioDBID_ScenarioPtr)[scenarioDB.ID] = scenario
		(*backRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario] = scenarioDB.ID

		// append model store with the new element
		scenario.Name = scenarioDB.Name_Data.String
		scenario.Stage()
	}
	scenarioDB.CopyBasicFieldsToScenario(scenario)

	// preserve pointer to scenarioDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ScenarioDBID_ScenarioDB)[scenarioDB hold variable pointers
	scenarioDB_Data := *scenarioDB
	preservedPtrToScenario := &scenarioDB_Data
	(*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[scenarioDB.ID] = preservedPtrToScenario

	return
}

// BackRepoScenario.CheckoutPhaseTwo Checkouts all staged instances of Scenario to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScenario *BackRepoScenarioStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, scenarioDB := range *backRepoScenario.Map_ScenarioDBID_ScenarioDB {
		backRepoScenario.CheckoutPhaseTwoInstance(backRepo, scenarioDB)
	}
	return
}

// BackRepoScenario.CheckoutPhaseTwoInstance Checkouts staged instances of Scenario to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScenario *BackRepoScenarioStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, scenarioDB *ScenarioDB) (Error error) {

	scenario := (*backRepoScenario.Map_ScenarioDBID_ScenarioPtr)[scenarioDB.ID]
	_ = scenario // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitScenario allows commit of a single scenario (if already staged)
func (backRepo *BackRepoStruct) CommitScenario(scenario *models.Scenario) {
	backRepo.BackRepoScenario.CommitPhaseOneInstance(scenario)
	if id, ok := (*backRepo.BackRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario]; ok {
		backRepo.BackRepoScenario.CommitPhaseTwoInstance(backRepo, id, scenario)
	}
}

// CommitScenario allows checkout of a single scenario (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScenario(scenario *models.Scenario) {
	// check if the scenario is staged
	if _, ok := (*backRepo.BackRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario]; ok {

		if id, ok := (*backRepo.BackRepoScenario.Map_ScenarioPtr_ScenarioDBID)[scenario]; ok {
			var scenarioDB ScenarioDB
			scenarioDB.ID = id

			if err := backRepo.BackRepoScenario.db.First(&scenarioDB, id).Error; err != nil {
				log.Panicln("CheckoutScenario : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScenario.CheckoutPhaseOneInstance(&scenarioDB)
			backRepo.BackRepoScenario.CheckoutPhaseTwoInstance(backRepo, &scenarioDB)
		}
	}
}

// CopyBasicFieldsFromScenario
func (scenarioDB *ScenarioDB) CopyBasicFieldsFromScenario(scenario *models.Scenario) {
	// insertion point for fields commit

	scenarioDB.Name_Data.String = scenario.Name
	scenarioDB.Name_Data.Valid = true

	scenarioDB.Lat_Data.Float64 = scenario.Lat
	scenarioDB.Lat_Data.Valid = true

	scenarioDB.Lng_Data.Float64 = scenario.Lng
	scenarioDB.Lng_Data.Valid = true

	scenarioDB.ZoomLevel_Data.Float64 = scenario.ZoomLevel
	scenarioDB.ZoomLevel_Data.Valid = true

	scenarioDB.MessageVisualSpeed_Data.Float64 = scenario.MessageVisualSpeed
	scenarioDB.MessageVisualSpeed_Data.Valid = true
}

// CopyBasicFieldsFromScenarioWOP
func (scenarioDB *ScenarioDB) CopyBasicFieldsFromScenarioWOP(scenario *ScenarioWOP) {
	// insertion point for fields commit

	scenarioDB.Name_Data.String = scenario.Name
	scenarioDB.Name_Data.Valid = true

	scenarioDB.Lat_Data.Float64 = scenario.Lat
	scenarioDB.Lat_Data.Valid = true

	scenarioDB.Lng_Data.Float64 = scenario.Lng
	scenarioDB.Lng_Data.Valid = true

	scenarioDB.ZoomLevel_Data.Float64 = scenario.ZoomLevel
	scenarioDB.ZoomLevel_Data.Valid = true

	scenarioDB.MessageVisualSpeed_Data.Float64 = scenario.MessageVisualSpeed
	scenarioDB.MessageVisualSpeed_Data.Valid = true
}

// CopyBasicFieldsToScenario
func (scenarioDB *ScenarioDB) CopyBasicFieldsToScenario(scenario *models.Scenario) {
	// insertion point for checkout of basic fields (back repo to stage)
	scenario.Name = scenarioDB.Name_Data.String
	scenario.Lat = scenarioDB.Lat_Data.Float64
	scenario.Lng = scenarioDB.Lng_Data.Float64
	scenario.ZoomLevel = scenarioDB.ZoomLevel_Data.Float64
	scenario.MessageVisualSpeed = scenarioDB.MessageVisualSpeed_Data.Float64
}

// CopyBasicFieldsToScenarioWOP
func (scenarioDB *ScenarioDB) CopyBasicFieldsToScenarioWOP(scenario *ScenarioWOP) {
	scenario.ID = int(scenarioDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	scenario.Name = scenarioDB.Name_Data.String
	scenario.Lat = scenarioDB.Lat_Data.Float64
	scenario.Lng = scenarioDB.Lng_Data.Float64
	scenario.ZoomLevel = scenarioDB.ZoomLevel_Data.Float64
	scenario.MessageVisualSpeed = scenarioDB.MessageVisualSpeed_Data.Float64
}

// Backup generates a json file from a slice of all ScenarioDB instances in the backrepo
func (backRepoScenario *BackRepoScenarioStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ScenarioDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScenarioDB, 0)
	for _, scenarioDB := range *backRepoScenario.Map_ScenarioDBID_ScenarioDB {
		forBackup = append(forBackup, scenarioDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Scenario ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Scenario file", err.Error())
	}
}

// Backup generates a json file from a slice of all ScenarioDB instances in the backrepo
func (backRepoScenario *BackRepoScenarioStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScenarioDB, 0)
	for _, scenarioDB := range *backRepoScenario.Map_ScenarioDBID_ScenarioDB {
		forBackup = append(forBackup, scenarioDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Scenario")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Scenario_Fields, -1)
	for _, scenarioDB := range forBackup {

		var scenarioWOP ScenarioWOP
		scenarioDB.CopyBasicFieldsToScenarioWOP(&scenarioWOP)

		row := sh.AddRow()
		row.WriteStruct(&scenarioWOP, -1)
	}
}

// RestoreXL from the "Scenario" sheet all ScenarioDB instances
func (backRepoScenario *BackRepoScenarioStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScenarioid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Scenario"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScenario.rowVisitorScenario)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoScenario *BackRepoScenarioStruct) rowVisitorScenario(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var scenarioWOP ScenarioWOP
		row.ReadStruct(&scenarioWOP)

		// add the unmarshalled struct to the stage
		scenarioDB := new(ScenarioDB)
		scenarioDB.CopyBasicFieldsFromScenarioWOP(&scenarioWOP)

		scenarioDB_ID_atBackupTime := scenarioDB.ID
		scenarioDB.ID = 0
		query := backRepoScenario.db.Create(scenarioDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[scenarioDB.ID] = scenarioDB
		BackRepoScenarioid_atBckpTime_newID[scenarioDB_ID_atBackupTime] = scenarioDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ScenarioDB.json" in dirPath that stores an array
// of ScenarioDB and stores it in the database
// the map BackRepoScenarioid_atBckpTime_newID is updated accordingly
func (backRepoScenario *BackRepoScenarioStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScenarioid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ScenarioDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Scenario file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ScenarioDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ScenarioDBID_ScenarioDB
	for _, scenarioDB := range forRestore {

		scenarioDB_ID_atBackupTime := scenarioDB.ID
		scenarioDB.ID = 0
		query := backRepoScenario.db.Create(scenarioDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoScenario.Map_ScenarioDBID_ScenarioDB)[scenarioDB.ID] = scenarioDB
		BackRepoScenarioid_atBckpTime_newID[scenarioDB_ID_atBackupTime] = scenarioDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Scenario file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Scenario>id_atBckpTime_newID
// to compute new index
func (backRepoScenario *BackRepoScenarioStruct) RestorePhaseTwo() {

	for _, scenarioDB := range *backRepoScenario.Map_ScenarioDBID_ScenarioDB {

		// next line of code is to avert unused variable compilation error
		_ = scenarioDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoScenario.db.Model(scenarioDB).Updates(*scenarioDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScenarioid_atBckpTime_newID map[uint]uint
