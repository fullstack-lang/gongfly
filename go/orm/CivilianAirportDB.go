// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CivilianAirport_sql sql.NullBool
var dummy_CivilianAirport_time time.Duration
var dummy_CivilianAirport_sort sort.Float64Slice

// CivilianAirportAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model civilianairportAPI
type CivilianAirportAPI struct {
	gorm.Model

	models.CivilianAirport

	// encoding of pointers
	CivilianAirportPointersEnconding
}

// CivilianAirportPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CivilianAirportPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// CivilianAirportDB describes a civilianairport in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model civilianairportDB
type CivilianAirportDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field civilianairportDB.Lat
	Lat_Data sql.NullFloat64

	// Declation for basic field civilianairportDB.Lng
	Lng_Data sql.NullFloat64

	// Declation for basic field civilianairportDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	CivilianAirportPointersEnconding
}

// CivilianAirportDBs arrays civilianairportDBs
// swagger:response civilianairportDBsResponse
type CivilianAirportDBs []CivilianAirportDB

// CivilianAirportDBResponse provides response
// swagger:response civilianairportDBResponse
type CivilianAirportDBResponse struct {
	CivilianAirportDB
}

// CivilianAirportWOP is a CivilianAirport without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CivilianAirportWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Lat float64 `xlsx:"1"`

	Lng float64 `xlsx:"2"`

	Name string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var CivilianAirport_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Name",
}

type BackRepoCivilianAirportStruct struct {
	// stores CivilianAirportDB according to their gorm ID
	Map_CivilianAirportDBID_CivilianAirportDB map[uint]*CivilianAirportDB

	// stores CivilianAirportDB ID according to CivilianAirport address
	Map_CivilianAirportPtr_CivilianAirportDBID map[*models.CivilianAirport]uint

	// stores CivilianAirport according to their gorm ID
	Map_CivilianAirportDBID_CivilianAirportPtr map[uint]*models.CivilianAirport

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCivilianAirport.stage
	return
}

func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) GetDB() *gorm.DB {
	return backRepoCivilianAirport.db
}

// GetCivilianAirportDBFromCivilianAirportPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) GetCivilianAirportDBFromCivilianAirportPtr(civilianairport *models.CivilianAirport) (civilianairportDB *CivilianAirportDB) {
	id := backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport]
	civilianairportDB = backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[id]
	return
}

// BackRepoCivilianAirport.CommitPhaseOne commits all staged instances of CivilianAirport to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for civilianairport := range stage.CivilianAirports {
		backRepoCivilianAirport.CommitPhaseOneInstance(civilianairport)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, civilianairport := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr {
		if _, ok := stage.CivilianAirports[civilianairport]; !ok {
			backRepoCivilianAirport.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCivilianAirport.CommitDeleteInstance commits deletion of CivilianAirport to the BackRepo
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CommitDeleteInstance(id uint) (Error error) {

	civilianairport := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr[id]

	// civilianairport is not staged anymore, remove civilianairportDB
	civilianairportDB := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[id]
	query := backRepoCivilianAirport.db.Unscoped().Delete(&civilianairportDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID, civilianairport)
	delete(backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr, id)
	delete(backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB, id)

	return
}

// BackRepoCivilianAirport.CommitPhaseOneInstance commits civilianairport staged instances of CivilianAirport to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CommitPhaseOneInstance(civilianairport *models.CivilianAirport) (Error error) {

	// check if the civilianairport is not commited yet
	if _, ok := backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport]; ok {
		return
	}

	// initiate civilianairport
	var civilianairportDB CivilianAirportDB
	civilianairportDB.CopyBasicFieldsFromCivilianAirport(civilianairport)

	query := backRepoCivilianAirport.db.Create(&civilianairportDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport] = civilianairportDB.ID
	backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr[civilianairportDB.ID] = civilianairport
	backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[civilianairportDB.ID] = &civilianairportDB

	return
}

// BackRepoCivilianAirport.CommitPhaseTwo commits all staged instances of CivilianAirport to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, civilianairport := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr {
		backRepoCivilianAirport.CommitPhaseTwoInstance(backRepo, idx, civilianairport)
	}

	return
}

// BackRepoCivilianAirport.CommitPhaseTwoInstance commits {{structname }} of models.CivilianAirport to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, civilianairport *models.CivilianAirport) (Error error) {

	// fetch matching civilianairportDB
	if civilianairportDB, ok := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[idx]; ok {

		civilianairportDB.CopyBasicFieldsFromCivilianAirport(civilianairport)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCivilianAirport.db.Save(&civilianairportDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CivilianAirport intance %s", civilianairport.Name))
		return err
	}

	return
}

// BackRepoCivilianAirport.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CheckoutPhaseOne() (Error error) {

	civilianairportDBArray := make([]CivilianAirportDB, 0)
	query := backRepoCivilianAirport.db.Find(&civilianairportDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	civilianairportInstancesToBeRemovedFromTheStage := make(map[*models.CivilianAirport]any)
	for key, value := range backRepoCivilianAirport.stage.CivilianAirports {
		civilianairportInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, civilianairportDB := range civilianairportDBArray {
		backRepoCivilianAirport.CheckoutPhaseOneInstance(&civilianairportDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		civilianairport, ok := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr[civilianairportDB.ID]
		if ok {
			delete(civilianairportInstancesToBeRemovedFromTheStage, civilianairport)
		}
	}

	// remove from stage and back repo's 3 maps all civilianairports that are not in the checkout
	for civilianairport := range civilianairportInstancesToBeRemovedFromTheStage {
		civilianairport.Unstage(backRepoCivilianAirport.GetStage())

		// remove instance from the back repo 3 maps
		civilianairportID := backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport]
		delete(backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID, civilianairport)
		delete(backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB, civilianairportID)
		delete(backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr, civilianairportID)
	}

	return
}

// CheckoutPhaseOneInstance takes a civilianairportDB that has been found in the DB, updates the backRepo and stages the
// models version of the civilianairportDB
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CheckoutPhaseOneInstance(civilianairportDB *CivilianAirportDB) (Error error) {

	civilianairport, ok := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr[civilianairportDB.ID]
	if !ok {
		civilianairport = new(models.CivilianAirport)

		backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr[civilianairportDB.ID] = civilianairport
		backRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport] = civilianairportDB.ID

		// append model store with the new element
		civilianairport.Name = civilianairportDB.Name_Data.String
		civilianairport.Stage(backRepoCivilianAirport.GetStage())
	}
	civilianairportDB.CopyBasicFieldsToCivilianAirport(civilianairport)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	civilianairport.Stage(backRepoCivilianAirport.GetStage())

	// preserve pointer to civilianairportDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CivilianAirportDBID_CivilianAirportDB)[civilianairportDB hold variable pointers
	civilianairportDB_Data := *civilianairportDB
	preservedPtrToCivilianAirport := &civilianairportDB_Data
	backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[civilianairportDB.ID] = preservedPtrToCivilianAirport

	return
}

// BackRepoCivilianAirport.CheckoutPhaseTwo Checkouts all staged instances of CivilianAirport to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, civilianairportDB := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB {
		backRepoCivilianAirport.CheckoutPhaseTwoInstance(backRepo, civilianairportDB)
	}
	return
}

// BackRepoCivilianAirport.CheckoutPhaseTwoInstance Checkouts staged instances of CivilianAirport to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, civilianairportDB *CivilianAirportDB) (Error error) {

	civilianairport := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr[civilianairportDB.ID]
	_ = civilianairport // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitCivilianAirport allows commit of a single civilianairport (if already staged)
func (backRepo *BackRepoStruct) CommitCivilianAirport(civilianairport *models.CivilianAirport) {
	backRepo.BackRepoCivilianAirport.CommitPhaseOneInstance(civilianairport)
	if id, ok := backRepo.BackRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport]; ok {
		backRepo.BackRepoCivilianAirport.CommitPhaseTwoInstance(backRepo, id, civilianairport)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCivilianAirport allows checkout of a single civilianairport (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCivilianAirport(civilianairport *models.CivilianAirport) {
	// check if the civilianairport is staged
	if _, ok := backRepo.BackRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport]; ok {

		if id, ok := backRepo.BackRepoCivilianAirport.Map_CivilianAirportPtr_CivilianAirportDBID[civilianairport]; ok {
			var civilianairportDB CivilianAirportDB
			civilianairportDB.ID = id

			if err := backRepo.BackRepoCivilianAirport.db.First(&civilianairportDB, id).Error; err != nil {
				log.Panicln("CheckoutCivilianAirport : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCivilianAirport.CheckoutPhaseOneInstance(&civilianairportDB)
			backRepo.BackRepoCivilianAirport.CheckoutPhaseTwoInstance(backRepo, &civilianairportDB)
		}
	}
}

// CopyBasicFieldsFromCivilianAirport
func (civilianairportDB *CivilianAirportDB) CopyBasicFieldsFromCivilianAirport(civilianairport *models.CivilianAirport) {
	// insertion point for fields commit

	civilianairportDB.Lat_Data.Float64 = civilianairport.Lat
	civilianairportDB.Lat_Data.Valid = true

	civilianairportDB.Lng_Data.Float64 = civilianairport.Lng
	civilianairportDB.Lng_Data.Valid = true

	civilianairportDB.Name_Data.String = civilianairport.Name
	civilianairportDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCivilianAirportWOP
func (civilianairportDB *CivilianAirportDB) CopyBasicFieldsFromCivilianAirportWOP(civilianairport *CivilianAirportWOP) {
	// insertion point for fields commit

	civilianairportDB.Lat_Data.Float64 = civilianairport.Lat
	civilianairportDB.Lat_Data.Valid = true

	civilianairportDB.Lng_Data.Float64 = civilianairport.Lng
	civilianairportDB.Lng_Data.Valid = true

	civilianairportDB.Name_Data.String = civilianairport.Name
	civilianairportDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCivilianAirport
func (civilianairportDB *CivilianAirportDB) CopyBasicFieldsToCivilianAirport(civilianairport *models.CivilianAirport) {
	// insertion point for checkout of basic fields (back repo to stage)
	civilianairport.Lat = civilianairportDB.Lat_Data.Float64
	civilianairport.Lng = civilianairportDB.Lng_Data.Float64
	civilianairport.Name = civilianairportDB.Name_Data.String
}

// CopyBasicFieldsToCivilianAirportWOP
func (civilianairportDB *CivilianAirportDB) CopyBasicFieldsToCivilianAirportWOP(civilianairport *CivilianAirportWOP) {
	civilianairport.ID = int(civilianairportDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	civilianairport.Lat = civilianairportDB.Lat_Data.Float64
	civilianairport.Lng = civilianairportDB.Lng_Data.Float64
	civilianairport.Name = civilianairportDB.Name_Data.String
}

// Backup generates a json file from a slice of all CivilianAirportDB instances in the backrepo
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CivilianAirportDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CivilianAirportDB, 0)
	for _, civilianairportDB := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB {
		forBackup = append(forBackup, civilianairportDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json CivilianAirport ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json CivilianAirport file", err.Error())
	}
}

// Backup generates a json file from a slice of all CivilianAirportDB instances in the backrepo
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CivilianAirportDB, 0)
	for _, civilianairportDB := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB {
		forBackup = append(forBackup, civilianairportDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CivilianAirport")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CivilianAirport_Fields, -1)
	for _, civilianairportDB := range forBackup {

		var civilianairportWOP CivilianAirportWOP
		civilianairportDB.CopyBasicFieldsToCivilianAirportWOP(&civilianairportWOP)

		row := sh.AddRow()
		row.WriteStruct(&civilianairportWOP, -1)
	}
}

// RestoreXL from the "CivilianAirport" sheet all CivilianAirportDB instances
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCivilianAirportid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CivilianAirport"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCivilianAirport.rowVisitorCivilianAirport)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) rowVisitorCivilianAirport(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var civilianairportWOP CivilianAirportWOP
		row.ReadStruct(&civilianairportWOP)

		// add the unmarshalled struct to the stage
		civilianairportDB := new(CivilianAirportDB)
		civilianairportDB.CopyBasicFieldsFromCivilianAirportWOP(&civilianairportWOP)

		civilianairportDB_ID_atBackupTime := civilianairportDB.ID
		civilianairportDB.ID = 0
		query := backRepoCivilianAirport.db.Create(civilianairportDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[civilianairportDB.ID] = civilianairportDB
		BackRepoCivilianAirportid_atBckpTime_newID[civilianairportDB_ID_atBackupTime] = civilianairportDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CivilianAirportDB.json" in dirPath that stores an array
// of CivilianAirportDB and stores it in the database
// the map BackRepoCivilianAirportid_atBckpTime_newID is updated accordingly
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCivilianAirportid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CivilianAirportDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json CivilianAirport file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CivilianAirportDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CivilianAirportDBID_CivilianAirportDB
	for _, civilianairportDB := range forRestore {

		civilianairportDB_ID_atBackupTime := civilianairportDB.ID
		civilianairportDB.ID = 0
		query := backRepoCivilianAirport.db.Create(civilianairportDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[civilianairportDB.ID] = civilianairportDB
		BackRepoCivilianAirportid_atBckpTime_newID[civilianairportDB_ID_atBackupTime] = civilianairportDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json CivilianAirport file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CivilianAirport>id_atBckpTime_newID
// to compute new index
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) RestorePhaseTwo() {

	for _, civilianairportDB := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB {

		// next line of code is to avert unused variable compilation error
		_ = civilianairportDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCivilianAirport.db.Model(civilianairportDB).Updates(*civilianairportDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// BackRepoCivilianAirport.ResetReversePointers commits all staged instances of CivilianAirport to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, civilianairport := range backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportPtr {
		backRepoCivilianAirport.ResetReversePointersInstance(backRepo, idx, civilianairport)
	}

	return
}

func (backRepoCivilianAirport *BackRepoCivilianAirportStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astruct *models.CivilianAirport) (Error error) {

	// fetch matching civilianairportDB
	if civilianairportDB, ok := backRepoCivilianAirport.Map_CivilianAirportDBID_CivilianAirportDB[idx]; ok {
		_ = civilianairportDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCivilianAirportid_atBckpTime_newID map[uint]uint
