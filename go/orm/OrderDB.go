// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Order sql.NullBool
var __Order_time__dummyDeclaration time.Duration
var dummy_Order_sort sort.Float64Slice

// OrderAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model orderAPI
type OrderAPI struct {
	gorm.Model

	models.Order

	// encoding of pointers
	OrderPointersEnconding
}

// OrderPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OrderPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field Target is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TargetID sql.NullInt64

}

// OrderDB describes a order in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model orderDB
type OrderDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field orderDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field orderDB.Duration {{BasicKind}} (to be completed)
	Duration_Data sql.NullInt64

	// Declation for basic field orderDB.OrderMessage {{BasicKind}} (to be completed)
	OrderMessage_Data sql.NullString

	// Declation for basic field orderDB.Number {{BasicKind}} (to be completed)
	Number_Data sql.NullInt64

	// Declation for basic field orderDB.Type {{BasicKind}} (to be completed)
	Type_Data sql.NullString

	// Declation for basic field orderDB.TargetLat {{BasicKind}} (to be completed)
	TargetLat_Data sql.NullFloat64

	// Declation for basic field orderDB.TargetLng {{BasicKind}} (to be completed)
	TargetLng_Data sql.NullFloat64

	// encoding of pointers
	OrderPointersEnconding
}

// OrderDBs arrays orderDBs
// swagger:response orderDBsResponse
type OrderDBs []OrderDB

// OrderDBResponse provides response
// swagger:response orderDBResponse
type OrderDBResponse struct {
	OrderDB
}

// OrderWOP is a Order without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OrderWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	Duration time.Duration

	OrderMessage string

	Number int

	Type models.OrderEnum

	TargetLat float64

	TargetLng float64
	// insertion for WOP pointer fields
}

var Order_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Duration",
	"OrderMessage",
	"Number",
	"Type",
	"TargetLat",
	"TargetLng",
}

type BackRepoOrderStruct struct {
	// stores OrderDB according to their gorm ID
	Map_OrderDBID_OrderDB *map[uint]*OrderDB

	// stores OrderDB ID according to Order address
	Map_OrderPtr_OrderDBID *map[*models.Order]uint

	// stores Order according to their gorm ID
	Map_OrderDBID_OrderPtr *map[uint]*models.Order

	db *gorm.DB
}

func (backRepoOrder *BackRepoOrderStruct) GetDB() *gorm.DB {
	return backRepoOrder.db
}

// GetOrderDBFromOrderPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOrder *BackRepoOrderStruct) GetOrderDBFromOrderPtr(order *models.Order) (orderDB *OrderDB) {
	id := (*backRepoOrder.Map_OrderPtr_OrderDBID)[order]
	orderDB = (*backRepoOrder.Map_OrderDBID_OrderDB)[id]
	return
}

// BackRepoOrder.Init set up the BackRepo of the Order
func (backRepoOrder *BackRepoOrderStruct) Init(db *gorm.DB) (Error error) {

	if backRepoOrder.Map_OrderDBID_OrderPtr != nil {
		err := errors.New("In Init, backRepoOrder.Map_OrderDBID_OrderPtr should be nil")
		return err
	}

	if backRepoOrder.Map_OrderDBID_OrderDB != nil {
		err := errors.New("In Init, backRepoOrder.Map_OrderDBID_OrderDB should be nil")
		return err
	}

	if backRepoOrder.Map_OrderPtr_OrderDBID != nil {
		err := errors.New("In Init, backRepoOrder.Map_OrderPtr_OrderDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Order, 0)
	backRepoOrder.Map_OrderDBID_OrderPtr = &tmp

	tmpDB := make(map[uint]*OrderDB, 0)
	backRepoOrder.Map_OrderDBID_OrderDB = &tmpDB

	tmpID := make(map[*models.Order]uint, 0)
	backRepoOrder.Map_OrderPtr_OrderDBID = &tmpID

	backRepoOrder.db = db
	return
}

// BackRepoOrder.CommitPhaseOne commits all staged instances of Order to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOrder *BackRepoOrderStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for order := range stage.Orders {
		backRepoOrder.CommitPhaseOneInstance(order)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, order := range *backRepoOrder.Map_OrderDBID_OrderPtr {
		if _, ok := stage.Orders[order]; !ok {
			backRepoOrder.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOrder.CommitDeleteInstance commits deletion of Order to the BackRepo
func (backRepoOrder *BackRepoOrderStruct) CommitDeleteInstance(id uint) (Error error) {

	order := (*backRepoOrder.Map_OrderDBID_OrderPtr)[id]

	// order is not staged anymore, remove orderDB
	orderDB := (*backRepoOrder.Map_OrderDBID_OrderDB)[id]
	query := backRepoOrder.db.Unscoped().Delete(&orderDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoOrder.Map_OrderPtr_OrderDBID), order)
	delete((*backRepoOrder.Map_OrderDBID_OrderPtr), id)
	delete((*backRepoOrder.Map_OrderDBID_OrderDB), id)

	return
}

// BackRepoOrder.CommitPhaseOneInstance commits order staged instances of Order to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOrder *BackRepoOrderStruct) CommitPhaseOneInstance(order *models.Order) (Error error) {

	// check if the order is not commited yet
	if _, ok := (*backRepoOrder.Map_OrderPtr_OrderDBID)[order]; ok {
		return
	}

	// initiate order
	var orderDB OrderDB
	orderDB.CopyBasicFieldsFromOrder(order)

	query := backRepoOrder.db.Create(&orderDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoOrder.Map_OrderPtr_OrderDBID)[order] = orderDB.ID
	(*backRepoOrder.Map_OrderDBID_OrderPtr)[orderDB.ID] = order
	(*backRepoOrder.Map_OrderDBID_OrderDB)[orderDB.ID] = &orderDB

	return
}

// BackRepoOrder.CommitPhaseTwo commits all staged instances of Order to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOrder *BackRepoOrderStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, order := range *backRepoOrder.Map_OrderDBID_OrderPtr {
		backRepoOrder.CommitPhaseTwoInstance(backRepo, idx, order)
	}

	return
}

// BackRepoOrder.CommitPhaseTwoInstance commits {{structname }} of models.Order to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOrder *BackRepoOrderStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, order *models.Order) (Error error) {

	// fetch matching orderDB
	if orderDB, ok := (*backRepoOrder.Map_OrderDBID_OrderDB)[idx]; ok {

		orderDB.CopyBasicFieldsFromOrder(order)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value order.Target translates to updating the order.TargetID
		orderDB.TargetID.Valid = true // allow for a 0 value (nil association)
		if order.Target != nil {
			if TargetId, ok := (*backRepo.BackRepoLiner.Map_LinerPtr_LinerDBID)[order.Target]; ok {
				orderDB.TargetID.Int64 = int64(TargetId)
			}
		}

		query := backRepoOrder.db.Save(&orderDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Order intance %s", order.Name))
		return err
	}

	return
}

// BackRepoOrder.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoOrder *BackRepoOrderStruct) CheckoutPhaseOne() (Error error) {

	orderDBArray := make([]OrderDB, 0)
	query := backRepoOrder.db.Find(&orderDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	orderInstancesToBeRemovedFromTheStage := make(map[*models.Order]struct{})
	for key, value := range models.Stage.Orders {
		orderInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, orderDB := range orderDBArray {
		backRepoOrder.CheckoutPhaseOneInstance(&orderDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		order, ok := (*backRepoOrder.Map_OrderDBID_OrderPtr)[orderDB.ID]
		if ok {
			delete(orderInstancesToBeRemovedFromTheStage, order)
		}
	}

	// remove from stage and back repo's 3 maps all orders that are not in the checkout
	for order := range orderInstancesToBeRemovedFromTheStage {
		order.Unstage()

		// remove instance from the back repo 3 maps
		orderID := (*backRepoOrder.Map_OrderPtr_OrderDBID)[order]
		delete((*backRepoOrder.Map_OrderPtr_OrderDBID), order)
		delete((*backRepoOrder.Map_OrderDBID_OrderDB), orderID)
		delete((*backRepoOrder.Map_OrderDBID_OrderPtr), orderID)
	}

	return
}

// CheckoutPhaseOneInstance takes a orderDB that has been found in the DB, updates the backRepo and stages the
// models version of the orderDB
func (backRepoOrder *BackRepoOrderStruct) CheckoutPhaseOneInstance(orderDB *OrderDB) (Error error) {

	order, ok := (*backRepoOrder.Map_OrderDBID_OrderPtr)[orderDB.ID]
	if !ok {
		order = new(models.Order)

		(*backRepoOrder.Map_OrderDBID_OrderPtr)[orderDB.ID] = order
		(*backRepoOrder.Map_OrderPtr_OrderDBID)[order] = orderDB.ID

		// append model store with the new element
		order.Name = orderDB.Name_Data.String
		order.Stage()
	}
	orderDB.CopyBasicFieldsToOrder(order)

	// preserve pointer to orderDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OrderDBID_OrderDB)[orderDB hold variable pointers
	orderDB_Data := *orderDB
	preservedPtrToOrder := &orderDB_Data
	(*backRepoOrder.Map_OrderDBID_OrderDB)[orderDB.ID] = preservedPtrToOrder

	return
}

// BackRepoOrder.CheckoutPhaseTwo Checkouts all staged instances of Order to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOrder *BackRepoOrderStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, orderDB := range *backRepoOrder.Map_OrderDBID_OrderDB {
		backRepoOrder.CheckoutPhaseTwoInstance(backRepo, orderDB)
	}
	return
}

// BackRepoOrder.CheckoutPhaseTwoInstance Checkouts staged instances of Order to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOrder *BackRepoOrderStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, orderDB *OrderDB) (Error error) {

	order := (*backRepoOrder.Map_OrderDBID_OrderPtr)[orderDB.ID]
	_ = order // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Target field
	if orderDB.TargetID.Int64 != 0 {
		order.Target = (*backRepo.BackRepoLiner.Map_LinerDBID_LinerPtr)[uint(orderDB.TargetID.Int64)]
	}
	return
}

// CommitOrder allows commit of a single order (if already staged)
func (backRepo *BackRepoStruct) CommitOrder(order *models.Order) {
	backRepo.BackRepoOrder.CommitPhaseOneInstance(order)
	if id, ok := (*backRepo.BackRepoOrder.Map_OrderPtr_OrderDBID)[order]; ok {
		backRepo.BackRepoOrder.CommitPhaseTwoInstance(backRepo, id, order)
	}
}

// CommitOrder allows checkout of a single order (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOrder(order *models.Order) {
	// check if the order is staged
	if _, ok := (*backRepo.BackRepoOrder.Map_OrderPtr_OrderDBID)[order]; ok {

		if id, ok := (*backRepo.BackRepoOrder.Map_OrderPtr_OrderDBID)[order]; ok {
			var orderDB OrderDB
			orderDB.ID = id

			if err := backRepo.BackRepoOrder.db.First(&orderDB, id).Error; err != nil {
				log.Panicln("CheckoutOrder : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOrder.CheckoutPhaseOneInstance(&orderDB)
			backRepo.BackRepoOrder.CheckoutPhaseTwoInstance(backRepo, &orderDB)
		}
	}
}

// CopyBasicFieldsFromOrder
func (orderDB *OrderDB) CopyBasicFieldsFromOrder(order *models.Order) {
	// insertion point for fields commit
	orderDB.Name_Data.String = order.Name
	orderDB.Name_Data.Valid = true

	orderDB.Duration_Data.Int64 = int64(order.Duration)
	orderDB.Duration_Data.Valid = true

	orderDB.OrderMessage_Data.String = order.OrderMessage
	orderDB.OrderMessage_Data.Valid = true

	orderDB.Number_Data.Int64 = int64(order.Number)
	orderDB.Number_Data.Valid = true

	orderDB.Type_Data.String = string(order.Type)
	orderDB.Type_Data.Valid = true

	orderDB.TargetLat_Data.Float64 = order.TargetLat
	orderDB.TargetLat_Data.Valid = true

	orderDB.TargetLng_Data.Float64 = order.TargetLng
	orderDB.TargetLng_Data.Valid = true

}

// CopyBasicFieldsFromOrderWOP
func (orderDB *OrderDB) CopyBasicFieldsFromOrderWOP(order *OrderWOP) {
	// insertion point for fields commit
	orderDB.Name_Data.String = order.Name
	orderDB.Name_Data.Valid = true

	orderDB.Duration_Data.Int64 = int64(order.Duration)
	orderDB.Duration_Data.Valid = true

	orderDB.OrderMessage_Data.String = order.OrderMessage
	orderDB.OrderMessage_Data.Valid = true

	orderDB.Number_Data.Int64 = int64(order.Number)
	orderDB.Number_Data.Valid = true

	orderDB.Type_Data.String = string(order.Type)
	orderDB.Type_Data.Valid = true

	orderDB.TargetLat_Data.Float64 = order.TargetLat
	orderDB.TargetLat_Data.Valid = true

	orderDB.TargetLng_Data.Float64 = order.TargetLng
	orderDB.TargetLng_Data.Valid = true

}

// CopyBasicFieldsToOrder
func (orderDB *OrderDB) CopyBasicFieldsToOrder(order *models.Order) {
	// insertion point for checkout of basic fields (back repo to stage)
	order.Name = orderDB.Name_Data.String
	order.Duration = time.Duration(orderDB.Duration_Data.Int64)
	order.OrderMessage = orderDB.OrderMessage_Data.String
	order.Number = int(orderDB.Number_Data.Int64)
	order.Type = models.OrderEnum(orderDB.Type_Data.String)
	order.TargetLat = orderDB.TargetLat_Data.Float64
	order.TargetLng = orderDB.TargetLng_Data.Float64
}

// CopyBasicFieldsToOrderWOP
func (orderDB *OrderDB) CopyBasicFieldsToOrderWOP(order *OrderWOP) {
	order.ID = int(orderDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	order.Name = orderDB.Name_Data.String
	order.Duration = time.Duration(orderDB.Duration_Data.Int64)
	order.OrderMessage = orderDB.OrderMessage_Data.String
	order.Number = int(orderDB.Number_Data.Int64)
	order.Type = models.OrderEnum(orderDB.Type_Data.String)
	order.TargetLat = orderDB.TargetLat_Data.Float64
	order.TargetLng = orderDB.TargetLng_Data.Float64
}

// Backup generates a json file from a slice of all OrderDB instances in the backrepo
func (backRepoOrder *BackRepoOrderStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OrderDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OrderDB, 0)
	for _, orderDB := range *backRepoOrder.Map_OrderDBID_OrderDB {
		forBackup = append(forBackup, orderDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Order ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Order file", err.Error())
	}
}

// Backup generates a json file from a slice of all OrderDB instances in the backrepo
func (backRepoOrder *BackRepoOrderStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OrderDB, 0)
	for _, orderDB := range *backRepoOrder.Map_OrderDBID_OrderDB {
		forBackup = append(forBackup, orderDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Order")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Order_Fields, -1)
	for _, orderDB := range forBackup {

		var orderWOP OrderWOP
		orderDB.CopyBasicFieldsToOrderWOP(&orderWOP)

		row := sh.AddRow()
		row.WriteStruct(&orderWOP, -1)
	}
}

// RestorePhaseOne read the file "OrderDB.json" in dirPath that stores an array
// of OrderDB and stores it in the database
// the map BackRepoOrderid_atBckpTime_newID is updated accordingly
func (backRepoOrder *BackRepoOrderStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOrderid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OrderDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Order file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OrderDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OrderDBID_OrderDB
	for _, orderDB := range forRestore {

		orderDB_ID_atBackupTime := orderDB.ID
		orderDB.ID = 0
		query := backRepoOrder.db.Create(orderDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoOrder.Map_OrderDBID_OrderDB)[orderDB.ID] = orderDB
		BackRepoOrderid_atBckpTime_newID[orderDB_ID_atBackupTime] = orderDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Order file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Order>id_atBckpTime_newID
// to compute new index
func (backRepoOrder *BackRepoOrderStruct) RestorePhaseTwo() {

	for _, orderDB := range *backRepoOrder.Map_OrderDBID_OrderDB {

		// next line of code is to avert unused variable compilation error
		_ = orderDB

		// insertion point for reindexing pointers encoding
		// reindexing Target field
		if orderDB.TargetID.Int64 != 0 {
			orderDB.TargetID.Int64 = int64(BackRepoLinerid_atBckpTime_newID[uint(orderDB.TargetID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoOrder.db.Model(orderDB).Updates(*orderDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOrderid_atBckpTime_newID map[uint]uint
