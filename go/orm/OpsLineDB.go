// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongfly/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_OpsLine_sql sql.NullBool
var dummy_OpsLine_time time.Duration
var dummy_OpsLine_sort sort.Float64Slice

// OpsLineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model opslineAPI
type OpsLineAPI struct {
	gorm.Model

	models.OpsLine

	// encoding of pointers
	OpsLinePointersEnconding
}

// OpsLinePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OpsLinePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Scenario is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ScenarioID sql.NullInt64
}

// OpsLineDB describes a opsline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model opslineDB
type OpsLineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field opslineDB.IsTransmitting
	// provide the sql storage for the boolan
	IsTransmitting_Data sql.NullBool

	// Declation for basic field opslineDB.TransmissionMessage
	TransmissionMessage_Data sql.NullString

	// Declation for basic field opslineDB.IsTransmittingBackward
	// provide the sql storage for the boolan
	IsTransmittingBackward_Data sql.NullBool

	// Declation for basic field opslineDB.TransmissionMessageBackward
	TransmissionMessageBackward_Data sql.NullString

	// Declation for basic field opslineDB.State
	State_Data sql.NullString

	// Declation for basic field opslineDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	OpsLinePointersEnconding
}

// OpsLineDBs arrays opslineDBs
// swagger:response opslineDBsResponse
type OpsLineDBs []OpsLineDB

// OpsLineDBResponse provides response
// swagger:response opslineDBResponse
type OpsLineDBResponse struct {
	OpsLineDB
}

// OpsLineWOP is a OpsLine without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OpsLineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	IsTransmitting bool `xlsx:"1"`

	TransmissionMessage string `xlsx:"2"`

	IsTransmittingBackward bool `xlsx:"3"`

	TransmissionMessageBackward string `xlsx:"4"`

	State models.OperationalLineStateEnum `xlsx:"5"`

	Name string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var OpsLine_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"IsTransmitting",
	"TransmissionMessage",
	"IsTransmittingBackward",
	"TransmissionMessageBackward",
	"State",
	"Name",
}

type BackRepoOpsLineStruct struct {
	// stores OpsLineDB according to their gorm ID
	Map_OpsLineDBID_OpsLineDB *map[uint]*OpsLineDB

	// stores OpsLineDB ID according to OpsLine address
	Map_OpsLinePtr_OpsLineDBID *map[*models.OpsLine]uint

	// stores OpsLine according to their gorm ID
	Map_OpsLineDBID_OpsLinePtr *map[uint]*models.OpsLine

	db *gorm.DB
}

func (backRepoOpsLine *BackRepoOpsLineStruct) GetDB() *gorm.DB {
	return backRepoOpsLine.db
}

// GetOpsLineDBFromOpsLinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoOpsLine *BackRepoOpsLineStruct) GetOpsLineDBFromOpsLinePtr(opsline *models.OpsLine) (opslineDB *OpsLineDB) {
	id := (*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline]
	opslineDB = (*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[id]
	return
}

// BackRepoOpsLine.Init set up the BackRepo of the OpsLine
func (backRepoOpsLine *BackRepoOpsLineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr != nil {
		err := errors.New("In Init, backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr should be nil")
		return err
	}

	if backRepoOpsLine.Map_OpsLineDBID_OpsLineDB != nil {
		err := errors.New("In Init, backRepoOpsLine.Map_OpsLineDBID_OpsLineDB should be nil")
		return err
	}

	if backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID != nil {
		err := errors.New("In Init, backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.OpsLine, 0)
	backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr = &tmp

	tmpDB := make(map[uint]*OpsLineDB, 0)
	backRepoOpsLine.Map_OpsLineDBID_OpsLineDB = &tmpDB

	tmpID := make(map[*models.OpsLine]uint, 0)
	backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID = &tmpID

	backRepoOpsLine.db = db
	return
}

// BackRepoOpsLine.CommitPhaseOne commits all staged instances of OpsLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOpsLine *BackRepoOpsLineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for opsline := range stage.OpsLines {
		backRepoOpsLine.CommitPhaseOneInstance(opsline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, opsline := range *backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr {
		if _, ok := stage.OpsLines[opsline]; !ok {
			backRepoOpsLine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOpsLine.CommitDeleteInstance commits deletion of OpsLine to the BackRepo
func (backRepoOpsLine *BackRepoOpsLineStruct) CommitDeleteInstance(id uint) (Error error) {

	opsline := (*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[id]

	// opsline is not staged anymore, remove opslineDB
	opslineDB := (*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[id]
	query := backRepoOpsLine.db.Unscoped().Delete(&opslineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID), opsline)
	delete((*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr), id)
	delete((*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB), id)

	return
}

// BackRepoOpsLine.CommitPhaseOneInstance commits opsline staged instances of OpsLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOpsLine *BackRepoOpsLineStruct) CommitPhaseOneInstance(opsline *models.OpsLine) (Error error) {

	// check if the opsline is not commited yet
	if _, ok := (*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline]; ok {
		return
	}

	// initiate opsline
	var opslineDB OpsLineDB
	opslineDB.CopyBasicFieldsFromOpsLine(opsline)

	query := backRepoOpsLine.db.Create(&opslineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline] = opslineDB.ID
	(*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[opslineDB.ID] = opsline
	(*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[opslineDB.ID] = &opslineDB

	return
}

// BackRepoOpsLine.CommitPhaseTwo commits all staged instances of OpsLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpsLine *BackRepoOpsLineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, opsline := range *backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr {
		backRepoOpsLine.CommitPhaseTwoInstance(backRepo, idx, opsline)
	}

	return
}

// BackRepoOpsLine.CommitPhaseTwoInstance commits {{structname }} of models.OpsLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpsLine *BackRepoOpsLineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, opsline *models.OpsLine) (Error error) {

	// fetch matching opslineDB
	if opslineDB, ok := (*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[idx]; ok {

		opslineDB.CopyBasicFieldsFromOpsLine(opsline)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value opsline.Scenario translates to updating the opsline.ScenarioID
		opslineDB.ScenarioID.Valid = true // allow for a 0 value (nil association)
		if opsline.Scenario != nil {
			if ScenarioId, ok := (*backRepo.BackRepoScenario.Map_ScenarioPtr_ScenarioDBID)[opsline.Scenario]; ok {
				opslineDB.ScenarioID.Int64 = int64(ScenarioId)
				opslineDB.ScenarioID.Valid = true
			}
		}

		query := backRepoOpsLine.db.Save(&opslineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown OpsLine intance %s", opsline.Name))
		return err
	}

	return
}

// BackRepoOpsLine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoOpsLine *BackRepoOpsLineStruct) CheckoutPhaseOne() (Error error) {

	opslineDBArray := make([]OpsLineDB, 0)
	query := backRepoOpsLine.db.Find(&opslineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	opslineInstancesToBeRemovedFromTheStage := make(map[*models.OpsLine]any)
	for key, value := range models.Stage.OpsLines {
		opslineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, opslineDB := range opslineDBArray {
		backRepoOpsLine.CheckoutPhaseOneInstance(&opslineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		opsline, ok := (*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[opslineDB.ID]
		if ok {
			delete(opslineInstancesToBeRemovedFromTheStage, opsline)
		}
	}

	// remove from stage and back repo's 3 maps all opslines that are not in the checkout
	for opsline := range opslineInstancesToBeRemovedFromTheStage {
		opsline.Unstage()

		// remove instance from the back repo 3 maps
		opslineID := (*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline]
		delete((*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID), opsline)
		delete((*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB), opslineID)
		delete((*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr), opslineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a opslineDB that has been found in the DB, updates the backRepo and stages the
// models version of the opslineDB
func (backRepoOpsLine *BackRepoOpsLineStruct) CheckoutPhaseOneInstance(opslineDB *OpsLineDB) (Error error) {

	opsline, ok := (*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[opslineDB.ID]
	if !ok {
		opsline = new(models.OpsLine)

		(*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[opslineDB.ID] = opsline
		(*backRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline] = opslineDB.ID

		// append model store with the new element
		opsline.Name = opslineDB.Name_Data.String
		opsline.Stage()
	}
	opslineDB.CopyBasicFieldsToOpsLine(opsline)

	// preserve pointer to opslineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OpsLineDBID_OpsLineDB)[opslineDB hold variable pointers
	opslineDB_Data := *opslineDB
	preservedPtrToOpsLine := &opslineDB_Data
	(*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[opslineDB.ID] = preservedPtrToOpsLine

	return
}

// BackRepoOpsLine.CheckoutPhaseTwo Checkouts all staged instances of OpsLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpsLine *BackRepoOpsLineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, opslineDB := range *backRepoOpsLine.Map_OpsLineDBID_OpsLineDB {
		backRepoOpsLine.CheckoutPhaseTwoInstance(backRepo, opslineDB)
	}
	return
}

// BackRepoOpsLine.CheckoutPhaseTwoInstance Checkouts staged instances of OpsLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpsLine *BackRepoOpsLineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, opslineDB *OpsLineDB) (Error error) {

	opsline := (*backRepoOpsLine.Map_OpsLineDBID_OpsLinePtr)[opslineDB.ID]
	_ = opsline // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Scenario field
	if opslineDB.ScenarioID.Int64 != 0 {
		opsline.Scenario = (*backRepo.BackRepoScenario.Map_ScenarioDBID_ScenarioPtr)[uint(opslineDB.ScenarioID.Int64)]
	}
	return
}

// CommitOpsLine allows commit of a single opsline (if already staged)
func (backRepo *BackRepoStruct) CommitOpsLine(opsline *models.OpsLine) {
	backRepo.BackRepoOpsLine.CommitPhaseOneInstance(opsline)
	if id, ok := (*backRepo.BackRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline]; ok {
		backRepo.BackRepoOpsLine.CommitPhaseTwoInstance(backRepo, id, opsline)
	}
}

// CommitOpsLine allows checkout of a single opsline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOpsLine(opsline *models.OpsLine) {
	// check if the opsline is staged
	if _, ok := (*backRepo.BackRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline]; ok {

		if id, ok := (*backRepo.BackRepoOpsLine.Map_OpsLinePtr_OpsLineDBID)[opsline]; ok {
			var opslineDB OpsLineDB
			opslineDB.ID = id

			if err := backRepo.BackRepoOpsLine.db.First(&opslineDB, id).Error; err != nil {
				log.Panicln("CheckoutOpsLine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOpsLine.CheckoutPhaseOneInstance(&opslineDB)
			backRepo.BackRepoOpsLine.CheckoutPhaseTwoInstance(backRepo, &opslineDB)
		}
	}
}

// CopyBasicFieldsFromOpsLine
func (opslineDB *OpsLineDB) CopyBasicFieldsFromOpsLine(opsline *models.OpsLine) {
	// insertion point for fields commit

	opslineDB.IsTransmitting_Data.Bool = opsline.IsTransmitting
	opslineDB.IsTransmitting_Data.Valid = true

	opslineDB.TransmissionMessage_Data.String = opsline.TransmissionMessage
	opslineDB.TransmissionMessage_Data.Valid = true

	opslineDB.IsTransmittingBackward_Data.Bool = opsline.IsTransmittingBackward
	opslineDB.IsTransmittingBackward_Data.Valid = true

	opslineDB.TransmissionMessageBackward_Data.String = opsline.TransmissionMessageBackward
	opslineDB.TransmissionMessageBackward_Data.Valid = true

	opslineDB.State_Data.String = opsline.State.ToString()
	opslineDB.State_Data.Valid = true

	opslineDB.Name_Data.String = opsline.Name
	opslineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOpsLineWOP
func (opslineDB *OpsLineDB) CopyBasicFieldsFromOpsLineWOP(opsline *OpsLineWOP) {
	// insertion point for fields commit

	opslineDB.IsTransmitting_Data.Bool = opsline.IsTransmitting
	opslineDB.IsTransmitting_Data.Valid = true

	opslineDB.TransmissionMessage_Data.String = opsline.TransmissionMessage
	opslineDB.TransmissionMessage_Data.Valid = true

	opslineDB.IsTransmittingBackward_Data.Bool = opsline.IsTransmittingBackward
	opslineDB.IsTransmittingBackward_Data.Valid = true

	opslineDB.TransmissionMessageBackward_Data.String = opsline.TransmissionMessageBackward
	opslineDB.TransmissionMessageBackward_Data.Valid = true

	opslineDB.State_Data.String = opsline.State.ToString()
	opslineDB.State_Data.Valid = true

	opslineDB.Name_Data.String = opsline.Name
	opslineDB.Name_Data.Valid = true
}

// CopyBasicFieldsToOpsLine
func (opslineDB *OpsLineDB) CopyBasicFieldsToOpsLine(opsline *models.OpsLine) {
	// insertion point for checkout of basic fields (back repo to stage)
	opsline.IsTransmitting = opslineDB.IsTransmitting_Data.Bool
	opsline.TransmissionMessage = opslineDB.TransmissionMessage_Data.String
	opsline.IsTransmittingBackward = opslineDB.IsTransmittingBackward_Data.Bool
	opsline.TransmissionMessageBackward = opslineDB.TransmissionMessageBackward_Data.String
	opsline.State.FromString(opslineDB.State_Data.String)
	opsline.Name = opslineDB.Name_Data.String
}

// CopyBasicFieldsToOpsLineWOP
func (opslineDB *OpsLineDB) CopyBasicFieldsToOpsLineWOP(opsline *OpsLineWOP) {
	opsline.ID = int(opslineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	opsline.IsTransmitting = opslineDB.IsTransmitting_Data.Bool
	opsline.TransmissionMessage = opslineDB.TransmissionMessage_Data.String
	opsline.IsTransmittingBackward = opslineDB.IsTransmittingBackward_Data.Bool
	opsline.TransmissionMessageBackward = opslineDB.TransmissionMessageBackward_Data.String
	opsline.State.FromString(opslineDB.State_Data.String)
	opsline.Name = opslineDB.Name_Data.String
}

// Backup generates a json file from a slice of all OpsLineDB instances in the backrepo
func (backRepoOpsLine *BackRepoOpsLineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OpsLineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OpsLineDB, 0)
	for _, opslineDB := range *backRepoOpsLine.Map_OpsLineDBID_OpsLineDB {
		forBackup = append(forBackup, opslineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json OpsLine ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json OpsLine file", err.Error())
	}
}

// Backup generates a json file from a slice of all OpsLineDB instances in the backrepo
func (backRepoOpsLine *BackRepoOpsLineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OpsLineDB, 0)
	for _, opslineDB := range *backRepoOpsLine.Map_OpsLineDBID_OpsLineDB {
		forBackup = append(forBackup, opslineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("OpsLine")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&OpsLine_Fields, -1)
	for _, opslineDB := range forBackup {

		var opslineWOP OpsLineWOP
		opslineDB.CopyBasicFieldsToOpsLineWOP(&opslineWOP)

		row := sh.AddRow()
		row.WriteStruct(&opslineWOP, -1)
	}
}

// RestoreXL from the "OpsLine" sheet all OpsLineDB instances
func (backRepoOpsLine *BackRepoOpsLineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOpsLineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["OpsLine"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOpsLine.rowVisitorOpsLine)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoOpsLine *BackRepoOpsLineStruct) rowVisitorOpsLine(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var opslineWOP OpsLineWOP
		row.ReadStruct(&opslineWOP)

		// add the unmarshalled struct to the stage
		opslineDB := new(OpsLineDB)
		opslineDB.CopyBasicFieldsFromOpsLineWOP(&opslineWOP)

		opslineDB_ID_atBackupTime := opslineDB.ID
		opslineDB.ID = 0
		query := backRepoOpsLine.db.Create(opslineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[opslineDB.ID] = opslineDB
		BackRepoOpsLineid_atBckpTime_newID[opslineDB_ID_atBackupTime] = opslineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "OpsLineDB.json" in dirPath that stores an array
// of OpsLineDB and stores it in the database
// the map BackRepoOpsLineid_atBckpTime_newID is updated accordingly
func (backRepoOpsLine *BackRepoOpsLineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOpsLineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OpsLineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json OpsLine file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OpsLineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OpsLineDBID_OpsLineDB
	for _, opslineDB := range forRestore {

		opslineDB_ID_atBackupTime := opslineDB.ID
		opslineDB.ID = 0
		query := backRepoOpsLine.db.Create(opslineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoOpsLine.Map_OpsLineDBID_OpsLineDB)[opslineDB.ID] = opslineDB
		BackRepoOpsLineid_atBckpTime_newID[opslineDB_ID_atBackupTime] = opslineDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json OpsLine file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<OpsLine>id_atBckpTime_newID
// to compute new index
func (backRepoOpsLine *BackRepoOpsLineStruct) RestorePhaseTwo() {

	for _, opslineDB := range *backRepoOpsLine.Map_OpsLineDBID_OpsLineDB {

		// next line of code is to avert unused variable compilation error
		_ = opslineDB

		// insertion point for reindexing pointers encoding
		// reindexing Scenario field
		if opslineDB.ScenarioID.Int64 != 0 {
			opslineDB.ScenarioID.Int64 = int64(BackRepoScenarioid_atBckpTime_newID[uint(opslineDB.ScenarioID.Int64)])
			opslineDB.ScenarioID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoOpsLine.db.Model(opslineDB).Updates(*opslineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOpsLineid_atBckpTime_newID map[uint]uint
